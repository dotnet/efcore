<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <_FullOutputPath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), '$(OutputPath)'))</_FullOutputPath>
    <_FullIntermediateOutputPath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), '$(IntermediateOutputPath)'))</_FullIntermediateOutputPath>
    <EFGeneratedSourcesFile Condition="'$(EFGeneratedSourcesFile)' == ''">$(_FullIntermediateOutputPath)$(AssemblyName).EFGeneratedSources.txt</EFGeneratedSourcesFile>
    <EFProjectsToOptimizePath Condition="'$(EFProjectsToOptimizePath)' == ''">$(_FullIntermediateOutputPath)EFProjectsToOptimize\</EFProjectsToOptimizePath>
    <_AssemblyFullName>$(_FullOutputPath)$(AssemblyName).dll</_AssemblyFullName>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);_EFPrepareForCompile</CoreCompileDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutputType)'=='Exe' Or '$(OutputType)'=='WinExe'">
    <_AssemblyFullName>$(_FullOutputPath)$(AssemblyName).exe</_AssemblyFullName>
  </PropertyGroup>

  <!-- Invokes OptimizeDbContext on projects that had changes since the last time they were optimized -->
  <Target Name="_EFGenerateFiles"
          AfterTargets="Build"
          Condition="Exists($(EFProjectsToOptimizePath))">
    <ItemGroup>
      <_EFProjectsToOptimizeFiles Include="$(EFProjectsToOptimizePath)*.*" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_EFProjectsToOptimizeFiles.Identity)">
      <Output TaskParameter="Lines" ItemName="_EFProjectsToOptimize"/>
    </ReadLinesFromFile>

    <RemoveDir Directories="$(EFProjectsToOptimizePath)" />

    <!-- The startup assembly used for file generation should be compiled without using AOT mode -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Build"
             BuildInParallel="true"
             Condition="'$(PublishAot)'=='true'"
             Properties="Configuration=$(Configuration);Platform=$(Platform);EFOptimizeContext=false;PublishAot=false" />

    <MSBuild Projects="@(_EFProjectsToOptimize)"
             Targets="OptimizeDbContext"
             BuildInParallel="true"
             Properties="Configuration=$(Configuration);Platform=$(Platform);EFOptimizeContext=false;EFStartupAssembly=$(_AssemblyFullName)" />

    <ItemGroup>
      <_EFProjectsToOptimize Remove="$(MSBuildProjectFullPath)" />
    </ItemGroup>

    <!-- This assumes that the optimized projects are dependencies, so the current project needs to be recompiled too -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Build"
             BuildInParallel="true"
             Condition="@(_EFProjectsToOptimize->Count()) &gt; 0"
             Properties="Configuration=$(Configuration);Platform=$(Platform);EFOptimizeContext=false" />
  </Target>

  <Target Name="OptimizeDbContext"
          Inputs="$(_AssemblyFullName)"
          Outputs="$(EFGeneratedSourcesFile)"
          Returns="$(_EFGeneratedFiles)">
    <PropertyGroup>
      <EFRootNamespace Condition="'$(EFRootNamespace)'==''">$(RootNamespace)</EFRootNamespace>
      <EFRootNamespace Condition="'$(EFRootNamespace)'==''">$(AssemblyName)</EFRootNamespace>
      <EFTargetNamespace Condition="'$(EFTargetNamespace)'==''">$(EFRootNamespace)</EFTargetNamespace>
      <EFOutputDir Condition="'$(EFOutputDir)'==''">$(_FullIntermediateOutputPath)</EFOutputDir>
      <EFNullable>false</EFNullable>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Nullable)'=='enable' Or '$(Nullable)'=='annotations'">
      <EFNullable>true</EFNullable>
    </PropertyGroup>

    <OptimizeDbContext Assembly="$(_AssemblyFullName)"
                       StartupAssembly="$(EFStartupAssembly)"
                       ProjectAssetsFile="$(ProjectAssetsFile)"
                       RuntimeFrameworkVersion="$(RuntimeFrameworkVersion)"
                       TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
                       DbContextName="$(DbContextName)"
                       RootNamespace="$(EFRootNamespace)"
                       TargetNamespace="$(EFTargetNamespace)"
                       Language="$(Language)"
                       Nullable="$(EFNullable)"
                       OutputDir="$(EFOutputDir)"
                       ProjectDir="$(MSBuildProjectDirectory)">
      <Output TaskParameter="GeneratedFiles" PropertyName="_EFGeneratedFiles" />
    </OptimizeDbContext>

    <Delete Files="$(EFGeneratedSourcesFile)" />

    <CallTarget Targets="Build"/>

    <WriteLinesToFile File="$(EFGeneratedSourcesFile)" Lines="$(_EFGeneratedFiles)"/>
  </Target>

  <!-- Read the previously generated files if the files weren't regenerated -->
  <Target Name="_EFReadGeneratedFilesList"
          BeforeTargets="_EFProcessGeneratedFiles;_EFCleanupGeneratedFiles"
          Condition="'$(EFOptimizeContext)'=='true' And Exists($(EFGeneratedSourcesFile))">
    <ReadLinesFromFile File="$(EFGeneratedSourcesFile)">
      <Output TaskParameter="Lines" ItemName="_ReadGeneratedFiles"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <_EFGeneratedFiles Include="@(_ReadGeneratedFiles)" />
    </ItemGroup>
  </Target>

  <!-- Adds the generated files to compilation -->
  <Target Name="_EFProcessGeneratedFiles"
          BeforeTargets="CoreCompile">
    <ItemGroup>
      <Compile Include="@(_EFGeneratedFiles)" />
    </ItemGroup>
  </Target>

  <!-- Removes the outdated generated files from compilation and registers this project for optimization
       This target has the same Inputs and Outputs as CoreCompile to run only if CoreCompile isn't going to be skipped -->
  <Target Name="_EFPrepareForCompile"
          DependsOnTargets="_EFProcessGeneratedFiles"
          Condition="'$(EFOptimizeContext)'=='true'"
          Inputs="$(MSBuildAllProjects);
                  @(Compile);
                  @(_CoreCompileResourceInputs);
                  $(ApplicationIcon);
                  $(KeyOriginatorFile);
                  @(ReferencePathWithRefAssemblies);
                  @(CompiledLicenseFile);
                  @(LinkResource);
                  @(EmbeddedDocumentation);
                  $(Win32Resource);
                  $(Win32Manifest);
                  @(CustomAdditionalCompileInputs);
                  $(ResolvedCodeAnalysisRuleSet);
                  @(AdditionalFiles);
                  @(EmbeddedFiles);
                  @(Analyzer);
                  @(EditorConfigFiles);
                  $(SourceLink)"
          Outputs="@(DocFileItem);
                   @(IntermediateAssembly);
                   @(IntermediateRefAssembly);
                   @(_DebugSymbolsIntermediatePath);
                   $(NonExistentFile);
                   @(CustomAdditionalCompileOutputs)">
    <ItemGroup>
      <Compile Remove="@(_EFGeneratedFiles)" />
    </ItemGroup>

    <MSBuild Projects="$(EFStartupProject)"
             Targets="_EFRegisterProjectToOptimize"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFProjectToOptimize=$(MSBuildProjectFullPath)" />
  </Target>

  <Target Name="_EFRegisterProjectToOptimize">
    <PropertyGroup>
      <_ProjectName>$([System.IO.Path]::GetFileName('$(_EFProjectToOptimize)'))</_ProjectName>
    </PropertyGroup>
    <MakeDir Directories="$(EFProjectsToOptimizePath)" />
    <WriteLinesToFile File="$(EFProjectsToOptimizePath)$(_ProjectName).txt" Lines="$(_EFProjectToOptimize)" Overwrite="true"/>
  </Target>

  <Target Name="_EFCleanGeneratedFiles" AfterTargets="Clean">
    <Delete Files="@(_EFGeneratedFiles)" />
    <Delete Files="$(EFGeneratedSourcesFile)" />
    <RemoveDir Directories="$(EFProjectsToOptimizePath)" />
  </Target>

</Project>