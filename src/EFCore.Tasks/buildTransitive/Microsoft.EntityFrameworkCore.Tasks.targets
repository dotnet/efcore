<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <_FullOutputPath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), '$(OutputPath)'))</_FullOutputPath>
    <_FullIntermediateOutputPath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), '$(IntermediateOutputPath)'))</_FullIntermediateOutputPath>
    <EFGeneratedSourcesBuildFile Condition="'$(EFGeneratedSourcesBuildFile)' == ''">$(_FullIntermediateOutputPath)$(AssemblyName).EFGeneratedSources.Build.txt</EFGeneratedSourcesBuildFile>
    <EFGeneratedSourcesPublishFile Condition="'$(EFGeneratedSourcesPublishFile)' == ''">$(_FullIntermediateOutputPath)$(AssemblyName).EFGeneratedSources.Publish.txt</EFGeneratedSourcesPublishFile>
    <EFProjectsToOptimizePath Condition="'$(EFProjectsToOptimizePath)' == ''">$(_FullIntermediateOutputPath)EFProjectsToOptimize\</EFProjectsToOptimizePath>
    <_AssemblyFullName>$(_FullOutputPath)$(AssemblyName).dll</_AssemblyFullName>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);_EFPrepareForCompile</CoreCompileDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(OutputType)'=='Exe' Or '$(OutputType)'=='WinExe'">
    <_AssemblyFullName>$(_FullOutputPath)$(AssemblyName).exe</_AssemblyFullName>
  </PropertyGroup>

  <Target Name="_EFGenerateFilesAfterBuild"
        AfterTargets="Build"
        Condition="Exists($(EFProjectsToOptimizePath)) And '$(_EFGenerationStage)'==''">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="_EFGenerateFiles"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFGenerationStage=build" />
  </Target>

  <Target Name="_EFGenerateFilesBeforePublish"
        AfterTargets="GetCopyToPublishDirectoryItems"
        BeforeTargets="GeneratePublishDependencyFile"
        Condition="Exists($(EFProjectsToOptimizePath)) And '$(_EFGenerationStage)'==''">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="_EFGenerateFiles"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFGenerationStage=publish" />
  </Target>

  <!-- Invokes OptimizeDbContext on projects that had changes since the last time they were optimized -->
  <Target Name="_EFGenerateFiles">
    <ItemGroup>
      <_EFProjectsToOptimizeFiles Include="$(EFProjectsToOptimizePath)*.*" />
    </ItemGroup>

    <ReadLinesFromFile File="%(_EFProjectsToOptimizeFiles.Identity)">
      <Output TaskParameter="Lines" ItemName="_EFProjectsToOptimize"/>
    </ReadLinesFromFile>

    <RemoveDir Directories="$(EFProjectsToOptimizePath)" />

    <!-- The startup assembly used for file generation should be compiled without using AOT mode -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Build"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Condition="'$(PublishAot)'=='true'"
             Properties="Configuration=$(Configuration);Platform=$(Platform);PublishAot=false;_EFGenerationStage=$(_EFGenerationStage)" />

    <MSBuild Projects="@(_EFProjectsToOptimize)"
             Targets="OptimizeDbContext"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Properties="Configuration=$(Configuration);Platform=$(Platform);EFStartupAssembly=$(_AssemblyFullName);_EFGenerationStage=$(_EFGenerationStage)" />

    <ItemGroup>
      <_EFProjectsToOptimize Remove="$(MSBuildProjectFullPath)" />
    </ItemGroup>

    <!-- This assumes that the optimized projects are dependencies, so the current project needs to be recompiled too -->
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="Build"
             BuildInParallel="$(BuildInParallel)"
             ContinueOnError="$(ContinueOnError)"
             Condition="@(_EFProjectsToOptimize->Count()) &gt; 0"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFGenerationStage=$(_EFGenerationStage)" />
  </Target>

  <Target Name="OptimizeDbContext">
    <PropertyGroup>
      <EFRootNamespace Condition="'$(EFRootNamespace)'==''">$(RootNamespace)</EFRootNamespace>
      <EFRootNamespace Condition="'$(EFRootNamespace)'==''">$(AssemblyName)</EFRootNamespace>
      <EFTargetNamespace Condition="'$(EFTargetNamespace)'==''">$(EFRootNamespace)</EFTargetNamespace>
      <EFOutputDir Condition="'$(EFOutputDir)'==''">$(_FullIntermediateOutputPath)</EFOutputDir>
      <_EFNoScaffold>true</_EFNoScaffold>
      <_EFNoScaffold Condition="'$(_EFGenerationStage)'=='$(EFScaffoldModelStage)'">false</_EFNoScaffold>
      <_EFPrecompileQueries>false</_EFPrecompileQueries>
      <_EFPrecompileQueries Condition="'$(_EFGenerationStage)'=='$(EFPrecompileQueriesStage)'">true</_EFPrecompileQueries>
      <EFNullable Condition="'$(Nullable)'=='enable' Or '$(Nullable)'=='annotations'">true</EFNullable>
      <EFNullable Condition="'$(EFNullable)'==''">false</EFNullable>
    </PropertyGroup>

    <OptimizeDbContext Assembly="$(_AssemblyFullName)"
                       StartupAssembly="$(EFStartupAssembly)"
                       ProjectAssetsFile="$(ProjectAssetsFile)"
                       RuntimeFrameworkVersion="$(RuntimeFrameworkVersion)"
                       TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
                       DbContextName="$(DbContextName)"
                       RootNamespace="$(EFRootNamespace)"
                       TargetNamespace="$(EFTargetNamespace)"
                       Language="$(Language)"
                       Nullable="$(EFNullable)"
                       OutputDir="$(EFOutputDir)"
                       Project="$(MSBuildProjectFullPath)"
                       ProjectDir="$(MSBuildProjectDirectory)"
                       NoScaffold="$(_EFNoScaffold)"
                       PrecompileQueries="$(_EFPrecompileQueries)">
      <Output TaskParameter="GeneratedFiles" PropertyName="_EFGeneratedFiles" />
    </OptimizeDbContext>

    <Delete Files="$(EFGeneratedSourcesBuildFile)"
            Condition="'$(_EFGenerationStage)'=='build'"/>
    <Delete Files="$(EFGeneratedSourcesPublishFile)"
            Condition="'$(_EFGenerationStage)'=='publish'"/>

    <CallTarget Targets="Build"/>

    <WriteLinesToFile File="$(EFGeneratedSourcesBuildFile)"
                      Lines="$(_EFGeneratedFiles)"
                      Condition="'$(_EFGenerationStage)'=='build'"/>
    <WriteLinesToFile File="$(EFGeneratedSourcesPublishFile)"
                      Lines="$(_EFGeneratedFiles)"
                      Condition="'$(_EFGenerationStage)'=='publish'"/>
  </Target>

  <Target Name="_EFValidateProperties"
          BeforeTargets="CoreCompile">
    <Error Condition="'$(EFScaffoldModelStage)'=='publish' And '$(EFPrecompileQueriesStage)'=='build'"
           Text="If %24(EFScaffoldModelStage) is set to 'publish' then %24(EFPrecompileQueriesStage) must also be set to 'publish'."/>
  </Target>

  <!-- Read the previously generated files -->
  <Target Name="_EFReadGeneratedFilesList"
          BeforeTargets="_EFProcessGeneratedFiles;_EFCleanGeneratedFiles">
    <ReadLinesFromFile File="$(EFGeneratedSourcesBuildFile)"
                       Condition="Exists($(EFGeneratedSourcesBuildFile))">
      <Output TaskParameter="Lines" ItemName="_ReadGeneratedFiles"/>
    </ReadLinesFromFile>
    <ReadLinesFromFile File="$(EFGeneratedSourcesPublishFile)"
                       Condition="Exists($(EFGeneratedSourcesPublishFile))">
      <Output TaskParameter="Lines" ItemName="_ReadGeneratedFiles"/>
    </ReadLinesFromFile>

    <ItemGroup>
      <_EFGeneratedFiles Include="@(_ReadGeneratedFiles)" />
    </ItemGroup>
  </Target>

  <!-- Adds the generated files to compilation -->
  <Target Name="_EFProcessGeneratedFiles"
          BeforeTargets="CoreCompile">
    <ItemGroup>
      <Compile Include="@(_EFGeneratedFiles)" />
    </ItemGroup>
  </Target>

  <!-- Removes the outdated generated files from compilation and registers this project for after-compile optimization
       This target has the same Inputs and Outputs as CoreCompile to run only if CoreCompile isn't going to be skipped -->
  <Target Name="_EFPrepareForCompile"
          DependsOnTargets="_EFProcessGeneratedFiles"
          Condition="'$(_EFGenerationStage)'==''"
          Inputs="$(MSBuildAllProjects);
                  @(Compile);
                  @(_CoreCompileResourceInputs);
                  $(ApplicationIcon);
                  $(KeyOriginatorFile);
                  @(ReferencePathWithRefAssemblies);
                  @(CompiledLicenseFile);
                  @(LinkResource);
                  @(EmbeddedDocumentation);
                  $(Win32Resource);
                  $(Win32Manifest);
                  @(CustomAdditionalCompileInputs);
                  $(ResolvedCodeAnalysisRuleSet);
                  @(AdditionalFiles);
                  @(EmbeddedFiles);
                  @(Analyzer);
                  @(EditorConfigFiles);
                  $(SourceLink)"
          Outputs="@(DocFileItem);
                   @(IntermediateAssembly);
                   @(IntermediateRefAssembly);
                   @(_DebugSymbolsIntermediatePath);
                   $(NonExistentFile);
                   @(CustomAdditionalCompileOutputs)">
    <ItemGroup>
      <Compile Remove="@(_EFGeneratedFiles)" />
    </ItemGroup>

    <Delete Files="$(EFGeneratedSourcesBuildFile)" />
    <Delete Files="$(EFGeneratedSourcesPublishFile)" />

    <MSBuild Projects="$(EFStartupProject)"
             Targets="_EFRegisterProjectToOptimize"
             Condition="'$(EFOptimizeContext)'=='true' And ('$(EFScaffoldModelStage)'=='build' Or '$(EFPrecompileQueriesStage)'=='build')"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFProjectToOptimize=$(MSBuildProjectFullPath)" />
  </Target>

  <!-- Registers this project for before-publish optimization -->
  <Target Name="_EFPrepareForPublish"
          BeforeTargets="GetCopyToPublishDirectoryItems"
          Condition="'$(_EFGenerationStage)'=='' And ('$(EFScaffoldModelStage)'=='publish' Or '$(EFPrecompileQueriesStage)'=='publish') And ('$(EFOptimizeContext)'=='true' Or ('$(EFOptimizeContext)'=='' And ('$(_EFPublishAOT)'=='true' Or '$(PublishAOT)'=='true')))">
    <MSBuild Projects="$(EFStartupProject)"
             Targets="_EFRegisterProjectToOptimize"
             Properties="Configuration=$(Configuration);Platform=$(Platform);_EFProjectToOptimize=$(MSBuildProjectFullPath)" />
  </Target>

  <!-- Go through the dependencies to check whether they need code generated for Native AOT -->
  <Target Name="_EFPrepareDependenciesForPublishAOT"
          BeforeTargets="GetCopyToPublishDirectoryItems"
          Condition="'$(PublishAOT)'=='true' And '$(_EFGenerationStage)'=='' and '@(_MSBuildProjectReferenceExistent)' != ''">
    <MSBuild
      Projects="@(_MSBuildProjectReferenceExistent)"
      Targets="_EFPrepareForPublish"
      BuildInParallel="$(BuildInParallel)"
      Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); %(_MSBuildProjectReferenceExistent.SetTargetFramework); _EFPublishAOT=true"
      Condition="'%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' "
      ContinueOnError="$(ContinueOnError)"
      SkipNonexistentTargets="true"
      RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)$(_GlobalPropertiesToRemoveFromProjectReferences)">

      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedProjectReferencePaths"/>
    </MSBuild>
  </Target>

  <Target Name="_EFRegisterProjectToOptimize">
    <PropertyGroup>
      <_ProjectName>$([System.IO.Path]::GetFileName('$(_EFProjectToOptimize)'))</_ProjectName>
    </PropertyGroup>
    <MakeDir Directories="$(EFProjectsToOptimizePath)" />
    <WriteLinesToFile File="$(EFProjectsToOptimizePath)$(_ProjectName).txt" Lines="$(_EFProjectToOptimize)" Overwrite="true"/>
  </Target>

  <Target Name="_EFCleanGeneratedFiles" AfterTargets="Clean">
    <Delete Files="@(_EFGeneratedFiles)" />
    <Delete Files="$(EFGeneratedSourcesBuildFile)" />
    <Delete Files="$(EFGeneratedSourcesPublishFile)" />
    <RemoveDir Directories="$(EFProjectsToOptimizePath)" />
  </Target>

</Project>