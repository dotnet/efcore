<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateOperationNotSupported" xml:space="preserve">
    <value>SQLite cannot apply aggregate operator '{aggregateOperator}' on expressions of type '{type}'. Convert the values to a supported type, or use LINQ to Objects to aggregate the results on the client side.</value>
  </data>
  <data name="ApplyNotSupported" xml:space="preserve">
    <value>Translating this query requires the SQL APPLY operation, which is not supported on SQLite.</value>
  </data>
  <data name="DefaultNotSupported" xml:space="preserve">
    <value>Translating this operation requires the 'DEFAULT', which is not supported on SQLite.</value>
  </data>
  <data name="DuplicateColumnNameSridMismatch" xml:space="preserve">
    <value>'{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different SRIDs.</value>
  </data>
  <data name="IncompatibleSqlReturningClauseMismatch" xml:space="preserve">
    <value>Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{entityTypeWithSqlReturningClause}' is configured to use the SQL RETURNING clause, but entity type '{entityTypeWithoutSqlReturningClause}' is not.</value>
  </data>
  <data name="InvalidMigrationOperation" xml:space="preserve">
    <value>SQLite does not support this migration operation ('{operation}'). See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.</value>
  </data>
  <data name="LogCompositeKeyWithValueGeneration" xml:space="preserve">
    <value>The entity type '{entityType}' has composite key '{key}' which is configured to use generated values. SQLite does not support generated values on composite keys.</value>
    <comment>Warning SqliteEventId.CompositeKeyWithValueGeneration string? string?</comment>
  </data>
  <data name="LogForeignKeyScaffoldErrorPrincipalTableNotFound" xml:space="preserve">
    <value>Skipping foreign key with identity '{id}' on table '{tableName}' since principal table '{principalTableName}' was not found in the model. This usually happens when the principal table was not included in the selection set.</value>
    <comment>Warning SqliteEventId.ForeignKeyReferencesMissingTableWarning string? string? string?</comment>
  </data>
  <data name="LogFormatWarning" xml:space="preserve">
    <value>The column '{columnName}' on table '{tableName}' should map to a property of type '{type}', but its values are in an incompatible format. Using a different type.</value>
    <comment>Warning SqliteEventId.FormatWarning string? string? string?</comment>
  </data>
  <data name="LogFoundColumn" xml:space="preserve">
    <value>Found column on table '{tableName}' with name: '{columnName}', data type: {dataType}, not nullable: {notNullable}, default value: {defaultValue}.</value>
    <comment>Debug SqliteEventId.ColumnFound string? string? string? bool string?</comment>
  </data>
  <data name="LogFoundForeignKey" xml:space="preserve">
    <value>Found foreign key on table '{tableName}', id: {id}, principal table: {principalTableName}, delete action: {deleteAction}.</value>
    <comment>Debug SqliteEventId.ForeignKeyFound string? long string? string?</comment>
  </data>
  <data name="LogFoundIndex" xml:space="preserve">
    <value>Found index on table '{tableName}' with name '{indexName}', is unique: {isUnique}.</value>
    <comment>Debug SqliteEventId.IndexFound string? string? bool?</comment>
  </data>
  <data name="LogFoundPrimaryKey" xml:space="preserve">
    <value>Found primary key on table '{tableName}' with name {primaryKeyName}.</value>
    <comment>Debug SqliteEventId.PrimaryKeyFound string? string?</comment>
  </data>
  <data name="LogFoundTable" xml:space="preserve">
    <value>Found table with name: '{name}'.</value>
    <comment>Debug SqliteEventId.TableFound string?</comment>
  </data>
  <data name="LogFoundUniqueConstraint" xml:space="preserve">
    <value>Found unique constraint on table '{tableName}' with name: {uniqueConstraintName}.</value>
    <comment>Debug SqliteEventId.UniqueConstraintFound string? string?</comment>
  </data>
  <data name="LogInferringTypes" xml:space="preserve">
    <value>Querying table '{tableName}' to determine an appropriate CLR type for each column.</value>
    <comment>Debug SqliteEventId.InferringTypes string?</comment>
  </data>
  <data name="LogMissingTable" xml:space="preserve">
    <value>Unable to find a table in the database matching the selected table '{table}'.</value>
    <comment>Warning SqliteEventId.MissingTableWarning string?</comment>
  </data>
  <data name="LogOutOfRangeWarning" xml:space="preserve">
    <value>The column '{columnName}' on table '{tableName}' should map to a property of type '{type}', but its values are out of range. Using a different type.</value>
    <comment>Warning SqliteEventId.OutOfRangeWarning string? string? string?</comment>
  </data>
  <data name="LogPrincipalColumnNotFound" xml:space="preserve">
    <value>Skipping foreign key with identity '{id}' on table '{tableName}', since the principal column '{principalColumnName}' on the foreign key's principal table, '{principalTableName}', was not found in the model.</value>
    <comment>Warning SqliteEventId.ForeignKeyPrincipalColumnMissingWarning string? string? string? string?</comment>
  </data>
  <data name="LogSchemaConfigured" xml:space="preserve">
    <value>The entity type '{entityType}' is configured to use schema '{schema}', but SQLite does not support schemas. This configuration will be ignored by the SQLite provider.</value>
    <comment>Warning SqliteEventId.SchemaConfiguredWarning string string</comment>
  </data>
  <data name="LogSequenceConfigured" xml:space="preserve">
    <value>The model was configured with the database sequence '{sequence}'. SQLite does not support sequences.</value>
    <comment>Warning SqliteEventId.SequenceConfiguredWarning string</comment>
  </data>
  <data name="LogTableRebuildPendingWarning" xml:space="preserve">
    <value>An operation of type '{operationType}' will be attempted while a rebuild of table '{tableName}' is pending. The database may not be in an expected state. Review the SQL generated by this migration to help diagnose any failures. Consider moving these operations to a subsequent migration.</value>
    <comment>Warning SqliteEventId.TableRebuildPendingWarning string string</comment>
  </data>
  <data name="LogUnexpectedConnectionType" xml:space="preserve">
    <value>A connection of an unexpected type ({type}) is being used. The SQL functions prefixed with 'ef_' could not be created automatically. Manually define them if you encounter errors while querying.</value>
    <comment>Warning SqliteEventId.UnexpectedConnectionTypeWarning string</comment>
  </data>
  <data name="LogUsingSchemaSelectionsWarning" xml:space="preserve">
    <value>SQLite doesn't support schemas. The specified schema selection arguments will be ignored.</value>
    <comment>Warning SqliteEventId.SchemasNotSupportedWarning</comment>
  </data>
  <data name="MigrationScriptGenerationNotSupported" xml:space="preserve">
    <value>Generating idempotent scripts for migrations is not currently supported for SQLite. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.</value>
  </data>
  <data name="OrderByNotSupported" xml:space="preserve">
    <value>SQLite does not support expressions of type '{type}' in ORDER BY clauses. Convert the values to a supported type, or use LINQ to Objects to order the results on the client side.</value>
  </data>
  <data name="QueryingIntoJsonCollectionsNotSupported" xml:space="preserve">
    <value>SQLite version {sqliteVersion} is being used, but version 3.38.0 or higher is required for querying into JSON collections.</value>
  </data>
  <data name="SequencesNotSupported" xml:space="preserve">
    <value>SQLite does not support sequences. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.</value>
  </data>
  <data name="StoredProceduresNotSupported" xml:space="preserve">
    <value>SQLite does not support stored procedures, but one has been configured on entity type '{entityType}'. See https://go.microsoft.com/fwlink/?LinkId=723262 for more information and examples.</value>
  </data>
</root>