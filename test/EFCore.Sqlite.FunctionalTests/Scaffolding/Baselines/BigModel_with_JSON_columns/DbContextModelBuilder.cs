// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    public partial class DbContextModel
    {
        private DbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("00000000-0000-0000-0000-000000000000"), entityTypeCount: 9)
        {
        }

        partial void Initialize()
        {
            var data = DataEntityType.Create(this);
            var dependentBase = DependentBaseEntityType.Create(this);
            var manyTypes = ManyTypesEntityType.Create(this);
            var principalBase = PrincipalBaseEntityType.Create(this);
            var ownedType = OwnedTypeEntityType.Create(this);
            var ownedType0 = OwnedType0EntityType.Create(this);
            var principalBasePrincipalDerivedDependentBasebyte = PrincipalBasePrincipalDerivedDependentBasebyteEntityType.Create(this);
            var dependentDerived = DependentDerivedEntityType.Create(this, dependentBase);
            var principalDerived = PrincipalDerivedEntityType.Create(this, principalBase);

            DependentBaseEntityType.CreateForeignKey1(dependentBase, principalBase);
            DependentBaseEntityType.CreateForeignKey2(dependentBase, principalDerived);
            OwnedTypeEntityType.CreateForeignKey1(ownedType, principalBase);
            OwnedType0EntityType.CreateForeignKey1(ownedType0, principalDerived);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalBasePrincipalDerivedDependentBasebyte, principalDerived);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey2(principalBasePrincipalDerivedDependentBasebyte, principalBase);

            PrincipalBaseEntityType.CreateSkipNavigation1(principalBase, principalDerived, principalBasePrincipalDerivedDependentBasebyte);
            PrincipalDerivedEntityType.CreateSkipNavigation1(principalDerived, principalBase, principalBasePrincipalDerivedDependentBasebyte);

            DataEntityType.CreateAnnotations(data);
            DependentBaseEntityType.CreateAnnotations(dependentBase);
            ManyTypesEntityType.CreateAnnotations(manyTypes);
            PrincipalBaseEntityType.CreateAnnotations(principalBase);
            OwnedTypeEntityType.CreateAnnotations(ownedType);
            OwnedType0EntityType.CreateAnnotations(ownedType0);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalBasePrincipalDerivedDependentBasebyte);
            DependentDerivedEntityType.CreateAnnotations(dependentDerived);
            PrincipalDerivedEntityType.CreateAnnotations(principalDerived);

            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var data = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Data")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            data.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Data", null, relationalModel);
            var blobColumnBase = new ColumnBase<ColumnMappingBase>("Blob", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase.Columns.Add("Blob", blobColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase.Columns.Add("Id", idColumnBase);
            var pointColumnBase = new ColumnBase<ColumnMappingBase>("Point", "POINT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase.Columns.Add("Point", pointColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Data", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase = new TableMappingBase<ColumnMappingBase>(data, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase, false);
            defaultTableMappings.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, data.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blobColumnBase, data.FindProperty("Blob")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pointColumnBase, data.FindProperty("Point")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDataMappingBase);

            var tableMappings = new List<TableMapping>();
            data.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var dataTable = new Table("Data", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", dataTable);
            dataTable.Columns.Add("Id", idColumn);
            var blobColumn = new Column("Blob", "BLOB", dataTable)
            {
                IsNullable = true
            };
            dataTable.Columns.Add("Blob", blobColumn);
            var pointColumn = new Column("Point", "POINT", dataTable)
            {
                IsNullable = true
            };
            dataTable.Columns.Add("Point", pointColumn);
            var pK_Data = new UniqueConstraint("PK_Data", dataTable, new[] { idColumn });
            dataTable.PrimaryKey = pK_Data;
            var pK_DataUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Data",
                new[] { "Id" });
            pK_Data.MappedKeys.Add(pK_DataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataUc).Add(pK_Data);
            dataTable.UniqueConstraints.Add("PK_Data", pK_Data);
            relationalModel.Tables.Add(("Data", null), dataTable);
            var dataTableMapping = new TableMapping(data, dataTable, true);
            dataTable.AddTypeMapping(dataTableMapping, false);
            tableMappings.Add(dataTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, data.FindProperty("Id")!, dataTableMapping);
            RelationalModel.CreateColumnMapping(blobColumn, data.FindProperty("Blob")!, dataTableMapping);
            RelationalModel.CreateColumnMapping(pointColumn, data.FindProperty("Point")!, dataTableMapping);

            var dependentBase = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            dependentBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>", null, relationalModel);
            var dataColumnBase = new ColumnBase<ColumnMappingBase>("Data", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("Data", dataColumnBase);
            var enumDiscriminatorColumnBase = new ColumnBase<ColumnMappingBase>("EnumDiscriminator", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("EnumDiscriminator", enumDiscriminatorColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("Id", idColumnBase0);
            var moneyColumnBase = new ColumnBase<ColumnMappingBase>("Money", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("Money", moneyColumnBase);
            var principalAlternateIdColumnBase = new ColumnBase<ColumnMappingBase>("PrincipalAlternateId", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("PrincipalAlternateId", principalAlternateIdColumnBase);
            var principalIdColumnBase = new ColumnBase<ColumnMappingBase>("PrincipalId", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.Columns.Add("PrincipalId", principalIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase = new TableMappingBase<ColumnMappingBase>(dependentBase, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase, false);
            defaultTableMappings0.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalAlternateIdColumnBase, dependentBase.FindProperty("PrincipalAlternateId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalIdColumnBase, dependentBase.FindProperty("PrincipalId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumDiscriminatorColumnBase, dependentBase.FindProperty("EnumDiscriminator")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, dependentBase.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase);

            var tableMappings0 = new List<TableMapping>();
            dependentBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var dependentBasebyteTable = new Table("DependentBase<byte?>", null, relationalModel);
            var principalIdColumn = new Column("PrincipalId", "INTEGER", dependentBasebyteTable);
            dependentBasebyteTable.Columns.Add("PrincipalId", principalIdColumn);
            var principalAlternateIdColumn = new Column("PrincipalAlternateId", "TEXT", dependentBasebyteTable);
            dependentBasebyteTable.Columns.Add("PrincipalAlternateId", principalAlternateIdColumn);
            var dataColumn = new Column("Data", "TEXT", dependentBasebyteTable)
            {
                IsNullable = true
            };
            dependentBasebyteTable.Columns.Add("Data", dataColumn);
            var enumDiscriminatorColumn = new Column("EnumDiscriminator", "INTEGER", dependentBasebyteTable);
            dependentBasebyteTable.Columns.Add("EnumDiscriminator", enumDiscriminatorColumn);
            var idColumn0 = new Column("Id", "INTEGER", dependentBasebyteTable)
            {
                IsNullable = true
            };
            dependentBasebyteTable.Columns.Add("Id", idColumn0);
            var moneyColumn = new Column("Money", "TEXT", dependentBasebyteTable)
            {
                IsNullable = true
            };
            dependentBasebyteTable.Columns.Add("Money", moneyColumn);
            var pK_DependentBasebyte = new UniqueConstraint("PK_DependentBase<byte?>", dependentBasebyteTable, new[] { principalIdColumn, principalAlternateIdColumn });
            dependentBasebyteTable.PrimaryKey = pK_DependentBasebyte;
            var pK_DependentBasebyteUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>",
                new[] { "PrincipalId", "PrincipalAlternateId" });
            pK_DependentBasebyte.MappedKeys.Add(pK_DependentBasebyteUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DependentBasebyteUc).Add(pK_DependentBasebyte);
            dependentBasebyteTable.UniqueConstraints.Add("PK_DependentBase<byte?>", pK_DependentBasebyte);
            var iX_DependentBasebyte_PrincipalId = new TableIndex(
            "IX_DependentBase<byte?>_PrincipalId", dependentBasebyteTable, new[] { principalIdColumn }, true);
            var iX_DependentBasebyte_PrincipalIdIx = RelationalModel.GetIndex(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>",
                new[] { "PrincipalId" });
            iX_DependentBasebyte_PrincipalId.MappedIndexes.Add(iX_DependentBasebyte_PrincipalIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DependentBasebyte_PrincipalIdIx).Add(iX_DependentBasebyte_PrincipalId);
            dependentBasebyteTable.Indexes.Add("IX_DependentBase<byte?>_PrincipalId", iX_DependentBasebyte_PrincipalId);
            relationalModel.Tables.Add(("DependentBase<byte?>", null), dependentBasebyteTable);
            var dependentBasebyteTableMapping = new TableMapping(dependentBase, dependentBasebyteTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping, false);
            tableMappings0.Add(dependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentBase.FindProperty("PrincipalAlternateId")!, dependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentBase.FindProperty("PrincipalId")!, dependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentBase.FindProperty("EnumDiscriminator")!, dependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, dependentBase.FindProperty("Id")!, dependentBasebyteTableMapping);

            var dependentDerived = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentDerived<byte?>")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            dependentDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0 = new TableMappingBase<ColumnMappingBase>(dependentDerived, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0, false);
            defaultTableMappings1.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalAlternateIdColumnBase, dependentDerived.FindProperty("PrincipalAlternateId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalIdColumnBase, dependentDerived.FindProperty("PrincipalId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataColumnBase, dependentDerived.FindProperty("Data")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumDiscriminatorColumnBase, dependentDerived.FindProperty("EnumDiscriminator")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, dependentDerived.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)moneyColumnBase, dependentDerived.FindProperty("Money")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteMappingBase0);

            var tableMappings1 = new List<TableMapping>();
            dependentDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var dependentBasebyteTableMapping0 = new TableMapping(dependentDerived, dependentBasebyteTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            dependentBasebyteTable.AddTypeMapping(dependentBasebyteTableMapping0, false);
            tableMappings1.Add(dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(principalAlternateIdColumn, dependentDerived.FindProperty("PrincipalAlternateId")!, dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(principalIdColumn, dependentDerived.FindProperty("PrincipalId")!, dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(dataColumn, dependentDerived.FindProperty("Data")!, dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(enumDiscriminatorColumn, dependentDerived.FindProperty("EnumDiscriminator")!, dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn0, dependentDerived.FindProperty("Id")!, dependentBasebyteTableMapping0);
            RelationalModel.CreateColumnMapping(moneyColumn, dependentDerived.FindProperty("Money")!, dependentBasebyteTableMapping0);

            var manyTypes = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+ManyTypes")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            manyTypes.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+ManyTypes", null, relationalModel);
            var boolColumnBase = new ColumnBase<ColumnMappingBase>("Bool", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Bool", boolColumnBase);
            var boolArrayColumnBase = new ColumnBase<ColumnMappingBase>("BoolArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BoolArray", boolArrayColumnBase);
            var boolToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("BoolToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BoolToStringConverterProperty", boolToStringConverterPropertyColumnBase);
            var boolToTwoValuesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("BoolToTwoValuesConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BoolToTwoValuesConverterProperty", boolToTwoValuesConverterPropertyColumnBase);
            var boolToZeroOneConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("BoolToZeroOneConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BoolToZeroOneConverterProperty", boolToZeroOneConverterPropertyColumnBase);
            var bytesColumnBase = new ColumnBase<ColumnMappingBase>("Bytes", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Bytes", bytesColumnBase);
            var bytesArrayColumnBase = new ColumnBase<ColumnMappingBase>("BytesArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BytesArray", bytesArrayColumnBase);
            var bytesToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("BytesToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("BytesToStringConverterProperty", bytesToStringConverterPropertyColumnBase);
            var castingConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("CastingConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("CastingConverterProperty", castingConverterPropertyColumnBase);
            var charColumnBase = new ColumnBase<ColumnMappingBase>("Char", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Char", charColumnBase);
            var charArrayColumnBase = new ColumnBase<ColumnMappingBase>("CharArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("CharArray", charArrayColumnBase);
            var charToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("CharToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("CharToStringConverterProperty", charToStringConverterPropertyColumnBase);
            var dateOnlyColumnBase = new ColumnBase<ColumnMappingBase>("DateOnly", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateOnly", dateOnlyColumnBase);
            var dateOnlyArrayColumnBase = new ColumnBase<ColumnMappingBase>("DateOnlyArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateOnlyArray", dateOnlyArrayColumnBase);
            var dateOnlyToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateOnlyToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateOnlyToStringConverterProperty", dateOnlyToStringConverterPropertyColumnBase);
            var dateTimeColumnBase = new ColumnBase<ColumnMappingBase>("DateTime", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTime", dateTimeColumnBase);
            var dateTimeArrayColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeArray", dateTimeArrayColumnBase);
            var dateTimeOffsetToBinaryConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeOffsetToBinaryConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeOffsetToBinaryConverterProperty", dateTimeOffsetToBinaryConverterPropertyColumnBase);
            var dateTimeOffsetToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeOffsetToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeOffsetToBytesConverterProperty", dateTimeOffsetToBytesConverterPropertyColumnBase);
            var dateTimeOffsetToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeOffsetToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeOffsetToStringConverterProperty", dateTimeOffsetToStringConverterPropertyColumnBase);
            var dateTimeToBinaryConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeToBinaryConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeToBinaryConverterProperty", dateTimeToBinaryConverterPropertyColumnBase);
            var dateTimeToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeToStringConverterProperty", dateTimeToStringConverterPropertyColumnBase);
            var dateTimeToTicksConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DateTimeToTicksConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DateTimeToTicksConverterProperty", dateTimeToTicksConverterPropertyColumnBase);
            var decimalColumnBase = new ColumnBase<ColumnMappingBase>("Decimal", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Decimal", decimalColumnBase);
            var decimalArrayColumnBase = new ColumnBase<ColumnMappingBase>("DecimalArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DecimalArray", decimalArrayColumnBase);
            var decimalNumberToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DecimalNumberToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DecimalNumberToBytesConverterProperty", decimalNumberToBytesConverterPropertyColumnBase);
            var decimalNumberToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DecimalNumberToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DecimalNumberToStringConverterProperty", decimalNumberToStringConverterPropertyColumnBase);
            var doubleColumnBase = new ColumnBase<ColumnMappingBase>("Double", "REAL", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Double", doubleColumnBase);
            var doubleArrayColumnBase = new ColumnBase<ColumnMappingBase>("DoubleArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DoubleArray", doubleArrayColumnBase);
            var doubleNumberToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DoubleNumberToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DoubleNumberToBytesConverterProperty", doubleNumberToBytesConverterPropertyColumnBase);
            var doubleNumberToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("DoubleNumberToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("DoubleNumberToStringConverterProperty", doubleNumberToStringConverterPropertyColumnBase);
            var enum16ColumnBase = new ColumnBase<ColumnMappingBase>("Enum16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16", enum16ColumnBase);
            var enum16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16Array", enum16ArrayColumnBase);
            var enum16AsStringColumnBase = new ColumnBase<ColumnMappingBase>("Enum16AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16AsString", enum16AsStringColumnBase);
            var enum16AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum16AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16AsStringArray", enum16AsStringArrayColumnBase);
            var enum16AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum16AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16AsStringCollection", enum16AsStringCollectionColumnBase);
            var enum16CollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum16Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum16Collection", enum16CollectionColumnBase);
            var enum32ColumnBase = new ColumnBase<ColumnMappingBase>("Enum32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32", enum32ColumnBase);
            var enum32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32Array", enum32ArrayColumnBase);
            var enum32AsStringColumnBase = new ColumnBase<ColumnMappingBase>("Enum32AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32AsString", enum32AsStringColumnBase);
            var enum32AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum32AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32AsStringArray", enum32AsStringArrayColumnBase);
            var enum32AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum32AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32AsStringCollection", enum32AsStringCollectionColumnBase);
            var enum32CollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum32Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum32Collection", enum32CollectionColumnBase);
            var enum64ColumnBase = new ColumnBase<ColumnMappingBase>("Enum64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64", enum64ColumnBase);
            var enum64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64Array", enum64ArrayColumnBase);
            var enum64AsStringColumnBase = new ColumnBase<ColumnMappingBase>("Enum64AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64AsString", enum64AsStringColumnBase);
            var enum64AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum64AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64AsStringArray", enum64AsStringArrayColumnBase);
            var enum64AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum64AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64AsStringCollection", enum64AsStringCollectionColumnBase);
            var enum64CollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum64Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum64Collection", enum64CollectionColumnBase);
            var enum8ColumnBase = new ColumnBase<ColumnMappingBase>("Enum8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8", enum8ColumnBase);
            var enum8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8Array", enum8ArrayColumnBase);
            var enum8AsStringColumnBase = new ColumnBase<ColumnMappingBase>("Enum8AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8AsString", enum8AsStringColumnBase);
            var enum8AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("Enum8AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8AsStringArray", enum8AsStringArrayColumnBase);
            var enum8AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum8AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8AsStringCollection", enum8AsStringCollectionColumnBase);
            var enum8CollectionColumnBase = new ColumnBase<ColumnMappingBase>("Enum8Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Enum8Collection", enum8CollectionColumnBase);
            var enumToNumberConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("EnumToNumberConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumToNumberConverterProperty", enumToNumberConverterPropertyColumnBase);
            var enumToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("EnumToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumToStringConverterProperty", enumToStringConverterPropertyColumnBase);
            var enumU16ColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16", enumU16ColumnBase);
            var enumU16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16Array", enumU16ArrayColumnBase);
            var enumU16AsStringColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16AsString", enumU16AsStringColumnBase);
            var enumU16AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16AsStringArray", enumU16AsStringArrayColumnBase);
            var enumU16AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16AsStringCollection", enumU16AsStringCollectionColumnBase);
            var enumU16CollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU16Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU16Collection", enumU16CollectionColumnBase);
            var enumU32ColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32", enumU32ColumnBase);
            var enumU32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32Array", enumU32ArrayColumnBase);
            var enumU32AsStringColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32AsString", enumU32AsStringColumnBase);
            var enumU32AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32AsStringArray", enumU32AsStringArrayColumnBase);
            var enumU32AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32AsStringCollection", enumU32AsStringCollectionColumnBase);
            var enumU32CollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU32Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU32Collection", enumU32CollectionColumnBase);
            var enumU64ColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64", enumU64ColumnBase);
            var enumU64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64Array", enumU64ArrayColumnBase);
            var enumU64AsStringColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64AsString", enumU64AsStringColumnBase);
            var enumU64AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64AsStringArray", enumU64AsStringArrayColumnBase);
            var enumU64AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64AsStringCollection", enumU64AsStringCollectionColumnBase);
            var enumU64CollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU64Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU64Collection", enumU64CollectionColumnBase);
            var enumU8ColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8", enumU8ColumnBase);
            var enumU8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8Array", enumU8ArrayColumnBase);
            var enumU8AsStringColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8AsString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8AsString", enumU8AsStringColumnBase);
            var enumU8AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8AsStringArray", enumU8AsStringArrayColumnBase);
            var enumU8AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8AsStringCollection", enumU8AsStringCollectionColumnBase);
            var enumU8CollectionColumnBase = new ColumnBase<ColumnMappingBase>("EnumU8Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("EnumU8Collection", enumU8CollectionColumnBase);
            var floatColumnBase = new ColumnBase<ColumnMappingBase>("Float", "REAL", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Float", floatColumnBase);
            var floatArrayColumnBase = new ColumnBase<ColumnMappingBase>("FloatArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("FloatArray", floatArrayColumnBase);
            var guidColumnBase = new ColumnBase<ColumnMappingBase>("Guid", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Guid", guidColumnBase);
            var guidArrayColumnBase = new ColumnBase<ColumnMappingBase>("GuidArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("GuidArray", guidArrayColumnBase);
            var guidToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("GuidToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("GuidToBytesConverterProperty", guidToBytesConverterPropertyColumnBase);
            var guidToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("GuidToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("GuidToStringConverterProperty", guidToStringConverterPropertyColumnBase);
            var iPAddressColumnBase = new ColumnBase<ColumnMappingBase>("IPAddress", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IPAddress", iPAddressColumnBase);
            var iPAddressArrayColumnBase = new ColumnBase<ColumnMappingBase>("IPAddressArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IPAddressArray", iPAddressArrayColumnBase);
            var iPAddressToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("IPAddressToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IPAddressToBytesConverterProperty", iPAddressToBytesConverterPropertyColumnBase);
            var iPAddressToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("IPAddressToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IPAddressToStringConverterProperty", iPAddressToStringConverterPropertyColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Id", idColumnBase1);
            var int16ColumnBase = new ColumnBase<ColumnMappingBase>("Int16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int16", int16ColumnBase);
            var int16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Int16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int16Array", int16ArrayColumnBase);
            var int32ColumnBase = new ColumnBase<ColumnMappingBase>("Int32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int32", int32ColumnBase);
            var int32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Int32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int32Array", int32ArrayColumnBase);
            var int64ColumnBase = new ColumnBase<ColumnMappingBase>("Int64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int64", int64ColumnBase);
            var int64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Int64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int64Array", int64ArrayColumnBase);
            var int8ColumnBase = new ColumnBase<ColumnMappingBase>("Int8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int8", int8ColumnBase);
            var int8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("Int8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Int8Array", int8ArrayColumnBase);
            var intNumberToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("IntNumberToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IntNumberToBytesConverterProperty", intNumberToBytesConverterPropertyColumnBase);
            var intNumberToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("IntNumberToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("IntNumberToStringConverterProperty", intNumberToStringConverterPropertyColumnBase);
            var nullIntToNullStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("NullIntToNullStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullIntToNullStringConverterProperty", nullIntToNullStringConverterPropertyColumnBase);
            var nullableBoolColumnBase = new ColumnBase<ColumnMappingBase>("NullableBool", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableBool", nullableBoolColumnBase);
            var nullableBoolArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableBoolArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableBoolArray", nullableBoolArrayColumnBase);
            var nullableBytesColumnBase = new ColumnBase<ColumnMappingBase>("NullableBytes", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableBytes", nullableBytesColumnBase);
            var nullableBytesArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableBytesArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableBytesArray", nullableBytesArrayColumnBase);
            var nullableCharColumnBase = new ColumnBase<ColumnMappingBase>("NullableChar", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableChar", nullableCharColumnBase);
            var nullableCharArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableCharArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableCharArray", nullableCharArrayColumnBase);
            var nullableDateOnlyColumnBase = new ColumnBase<ColumnMappingBase>("NullableDateOnly", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDateOnly", nullableDateOnlyColumnBase);
            var nullableDateOnlyArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableDateOnlyArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDateOnlyArray", nullableDateOnlyArrayColumnBase);
            var nullableDateTimeColumnBase = new ColumnBase<ColumnMappingBase>("NullableDateTime", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDateTime", nullableDateTimeColumnBase);
            var nullableDateTimeArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableDateTimeArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDateTimeArray", nullableDateTimeArrayColumnBase);
            var nullableDecimalColumnBase = new ColumnBase<ColumnMappingBase>("NullableDecimal", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDecimal", nullableDecimalColumnBase);
            var nullableDecimalArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableDecimalArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDecimalArray", nullableDecimalArrayColumnBase);
            var nullableDoubleColumnBase = new ColumnBase<ColumnMappingBase>("NullableDouble", "REAL", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDouble", nullableDoubleColumnBase);
            var nullableDoubleArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableDoubleArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableDoubleArray", nullableDoubleArrayColumnBase);
            var nullableEnum16ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16", nullableEnum16ColumnBase);
            var nullableEnum16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16Array", nullableEnum16ArrayColumnBase);
            var nullableEnum16AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16AsString", nullableEnum16AsStringColumnBase);
            var nullableEnum16AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16AsStringArray", nullableEnum16AsStringArrayColumnBase);
            var nullableEnum16AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16AsStringCollection", nullableEnum16AsStringCollectionColumnBase);
            var nullableEnum16CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum16Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum16Collection", nullableEnum16CollectionColumnBase);
            var nullableEnum32ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32", nullableEnum32ColumnBase);
            var nullableEnum32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32Array", nullableEnum32ArrayColumnBase);
            var nullableEnum32AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32AsString", nullableEnum32AsStringColumnBase);
            var nullableEnum32AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32AsStringArray", nullableEnum32AsStringArrayColumnBase);
            var nullableEnum32AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32AsStringCollection", nullableEnum32AsStringCollectionColumnBase);
            var nullableEnum32CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum32Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum32Collection", nullableEnum32CollectionColumnBase);
            var nullableEnum64ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64", nullableEnum64ColumnBase);
            var nullableEnum64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64Array", nullableEnum64ArrayColumnBase);
            var nullableEnum64AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64AsString", nullableEnum64AsStringColumnBase);
            var nullableEnum64AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64AsStringArray", nullableEnum64AsStringArrayColumnBase);
            var nullableEnum64AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64AsStringCollection", nullableEnum64AsStringCollectionColumnBase);
            var nullableEnum64CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum64Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum64Collection", nullableEnum64CollectionColumnBase);
            var nullableEnum8ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8", nullableEnum8ColumnBase);
            var nullableEnum8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8Array", nullableEnum8ArrayColumnBase);
            var nullableEnum8AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8AsString", nullableEnum8AsStringColumnBase);
            var nullableEnum8AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8AsStringArray", nullableEnum8AsStringArrayColumnBase);
            var nullableEnum8AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8AsStringCollection", nullableEnum8AsStringCollectionColumnBase);
            var nullableEnum8CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnum8Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnum8Collection", nullableEnum8CollectionColumnBase);
            var nullableEnumU16ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16", nullableEnumU16ColumnBase);
            var nullableEnumU16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16Array", nullableEnumU16ArrayColumnBase);
            var nullableEnumU16AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16AsString", nullableEnumU16AsStringColumnBase);
            var nullableEnumU16AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16AsStringArray", nullableEnumU16AsStringArrayColumnBase);
            var nullableEnumU16AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16AsStringCollection", nullableEnumU16AsStringCollectionColumnBase);
            var nullableEnumU16CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU16Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU16Collection", nullableEnumU16CollectionColumnBase);
            var nullableEnumU32ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32", nullableEnumU32ColumnBase);
            var nullableEnumU32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32Array", nullableEnumU32ArrayColumnBase);
            var nullableEnumU32AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32AsString", nullableEnumU32AsStringColumnBase);
            var nullableEnumU32AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32AsStringArray", nullableEnumU32AsStringArrayColumnBase);
            var nullableEnumU32AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32AsStringCollection", nullableEnumU32AsStringCollectionColumnBase);
            var nullableEnumU32CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU32Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU32Collection", nullableEnumU32CollectionColumnBase);
            var nullableEnumU64ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64", nullableEnumU64ColumnBase);
            var nullableEnumU64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64Array", nullableEnumU64ArrayColumnBase);
            var nullableEnumU64AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64AsString", nullableEnumU64AsStringColumnBase);
            var nullableEnumU64AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64AsStringArray", nullableEnumU64AsStringArrayColumnBase);
            var nullableEnumU64AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64AsStringCollection", nullableEnumU64AsStringCollectionColumnBase);
            var nullableEnumU64CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU64Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU64Collection", nullableEnumU64CollectionColumnBase);
            var nullableEnumU8ColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8", nullableEnumU8ColumnBase);
            var nullableEnumU8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8Array", nullableEnumU8ArrayColumnBase);
            var nullableEnumU8AsStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8AsString", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8AsString", nullableEnumU8AsStringColumnBase);
            var nullableEnumU8AsStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8AsStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8AsStringArray", nullableEnumU8AsStringArrayColumnBase);
            var nullableEnumU8AsStringCollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8AsStringCollection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8AsStringCollection", nullableEnumU8AsStringCollectionColumnBase);
            var nullableEnumU8CollectionColumnBase = new ColumnBase<ColumnMappingBase>("NullableEnumU8Collection", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableEnumU8Collection", nullableEnumU8CollectionColumnBase);
            var nullableFloatColumnBase = new ColumnBase<ColumnMappingBase>("NullableFloat", "REAL", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableFloat", nullableFloatColumnBase);
            var nullableFloatArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableFloatArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableFloatArray", nullableFloatArrayColumnBase);
            var nullableGuidColumnBase = new ColumnBase<ColumnMappingBase>("NullableGuid", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableGuid", nullableGuidColumnBase);
            var nullableGuidArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableGuidArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableGuidArray", nullableGuidArrayColumnBase);
            var nullableIPAddressColumnBase = new ColumnBase<ColumnMappingBase>("NullableIPAddress", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableIPAddress", nullableIPAddressColumnBase);
            var nullableIPAddressArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableIPAddressArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableIPAddressArray", nullableIPAddressArrayColumnBase);
            var nullableInt16ColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt16", nullableInt16ColumnBase);
            var nullableInt16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt16Array", nullableInt16ArrayColumnBase);
            var nullableInt32ColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt32", nullableInt32ColumnBase);
            var nullableInt32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt32Array", nullableInt32ArrayColumnBase);
            var nullableInt64ColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt64", nullableInt64ColumnBase);
            var nullableInt64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt64Array", nullableInt64ArrayColumnBase);
            var nullableInt8ColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt8", nullableInt8ColumnBase);
            var nullableInt8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableInt8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableInt8Array", nullableInt8ArrayColumnBase);
            var nullablePhysicalAddressColumnBase = new ColumnBase<ColumnMappingBase>("NullablePhysicalAddress", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullablePhysicalAddress", nullablePhysicalAddressColumnBase);
            var nullablePhysicalAddressArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullablePhysicalAddressArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullablePhysicalAddressArray", nullablePhysicalAddressArrayColumnBase);
            var nullableStringColumnBase = new ColumnBase<ColumnMappingBase>("NullableString", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableString", nullableStringColumnBase);
            var nullableStringArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableStringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableStringArray", nullableStringArrayColumnBase);
            var nullableTimeOnlyColumnBase = new ColumnBase<ColumnMappingBase>("NullableTimeOnly", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableTimeOnly", nullableTimeOnlyColumnBase);
            var nullableTimeOnlyArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableTimeOnlyArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableTimeOnlyArray", nullableTimeOnlyArrayColumnBase);
            var nullableTimeSpanColumnBase = new ColumnBase<ColumnMappingBase>("NullableTimeSpan", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableTimeSpan", nullableTimeSpanColumnBase);
            var nullableTimeSpanArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableTimeSpanArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableTimeSpanArray", nullableTimeSpanArrayColumnBase);
            var nullableUInt16ColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt16", nullableUInt16ColumnBase);
            var nullableUInt16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt16Array", nullableUInt16ArrayColumnBase);
            var nullableUInt32ColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt32", nullableUInt32ColumnBase);
            var nullableUInt32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt32Array", nullableUInt32ArrayColumnBase);
            var nullableUInt64ColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt64", nullableUInt64ColumnBase);
            var nullableUInt64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt64Array", nullableUInt64ArrayColumnBase);
            var nullableUInt8ColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt8", nullableUInt8ColumnBase);
            var nullableUInt8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableUInt8Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUInt8Array", nullableUInt8ArrayColumnBase);
            var nullableUriColumnBase = new ColumnBase<ColumnMappingBase>("NullableUri", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUri", nullableUriColumnBase);
            var nullableUriArrayColumnBase = new ColumnBase<ColumnMappingBase>("NullableUriArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("NullableUriArray", nullableUriArrayColumnBase);
            var physicalAddressColumnBase = new ColumnBase<ColumnMappingBase>("PhysicalAddress", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("PhysicalAddress", physicalAddressColumnBase);
            var physicalAddressArrayColumnBase = new ColumnBase<ColumnMappingBase>("PhysicalAddressArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("PhysicalAddressArray", physicalAddressArrayColumnBase);
            var physicalAddressToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("PhysicalAddressToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("PhysicalAddressToBytesConverterProperty", physicalAddressToBytesConverterPropertyColumnBase);
            var physicalAddressToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("PhysicalAddressToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("PhysicalAddressToStringConverterProperty", physicalAddressToStringConverterPropertyColumnBase);
            var stringColumnBase = new ColumnBase<ColumnMappingBase>("String", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("String", stringColumnBase);
            var stringArrayColumnBase = new ColumnBase<ColumnMappingBase>("StringArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringArray", stringArrayColumnBase);
            var stringToBoolConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToBoolConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToBoolConverterProperty", stringToBoolConverterPropertyColumnBase);
            var stringToBytesConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToBytesConverterProperty", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToBytesConverterProperty", stringToBytesConverterPropertyColumnBase);
            var stringToCharConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToCharConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToCharConverterProperty", stringToCharConverterPropertyColumnBase);
            var stringToDateOnlyConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToDateOnlyConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToDateOnlyConverterProperty", stringToDateOnlyConverterPropertyColumnBase);
            var stringToDateTimeConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToDateTimeConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToDateTimeConverterProperty", stringToDateTimeConverterPropertyColumnBase);
            var stringToDateTimeOffsetConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToDateTimeOffsetConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToDateTimeOffsetConverterProperty", stringToDateTimeOffsetConverterPropertyColumnBase);
            var stringToDecimalNumberConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToDecimalNumberConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToDecimalNumberConverterProperty", stringToDecimalNumberConverterPropertyColumnBase);
            var stringToDoubleNumberConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToDoubleNumberConverterProperty", "REAL", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToDoubleNumberConverterProperty", stringToDoubleNumberConverterPropertyColumnBase);
            var stringToEnumConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToEnumConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToEnumConverterProperty", stringToEnumConverterPropertyColumnBase);
            var stringToGuidConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToGuidConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToGuidConverterProperty", stringToGuidConverterPropertyColumnBase);
            var stringToIntNumberConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToIntNumberConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToIntNumberConverterProperty", stringToIntNumberConverterPropertyColumnBase);
            var stringToTimeOnlyConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToTimeOnlyConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToTimeOnlyConverterProperty", stringToTimeOnlyConverterPropertyColumnBase);
            var stringToTimeSpanConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToTimeSpanConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToTimeSpanConverterProperty", stringToTimeSpanConverterPropertyColumnBase);
            var stringToUriConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("StringToUriConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("StringToUriConverterProperty", stringToUriConverterPropertyColumnBase);
            var timeOnlyColumnBase = new ColumnBase<ColumnMappingBase>("TimeOnly", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeOnly", timeOnlyColumnBase);
            var timeOnlyArrayColumnBase = new ColumnBase<ColumnMappingBase>("TimeOnlyArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeOnlyArray", timeOnlyArrayColumnBase);
            var timeOnlyToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("TimeOnlyToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeOnlyToStringConverterProperty", timeOnlyToStringConverterPropertyColumnBase);
            var timeOnlyToTicksConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("TimeOnlyToTicksConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeOnlyToTicksConverterProperty", timeOnlyToTicksConverterPropertyColumnBase);
            var timeSpanColumnBase = new ColumnBase<ColumnMappingBase>("TimeSpan", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeSpan", timeSpanColumnBase);
            var timeSpanArrayColumnBase = new ColumnBase<ColumnMappingBase>("TimeSpanArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeSpanArray", timeSpanArrayColumnBase);
            var timeSpanToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("TimeSpanToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeSpanToStringConverterProperty", timeSpanToStringConverterPropertyColumnBase);
            var timeSpanToTicksConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("TimeSpanToTicksConverterProperty", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("TimeSpanToTicksConverterProperty", timeSpanToTicksConverterPropertyColumnBase);
            var uInt16ColumnBase = new ColumnBase<ColumnMappingBase>("UInt16", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt16", uInt16ColumnBase);
            var uInt16ArrayColumnBase = new ColumnBase<ColumnMappingBase>("UInt16Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt16Array", uInt16ArrayColumnBase);
            var uInt32ColumnBase = new ColumnBase<ColumnMappingBase>("UInt32", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt32", uInt32ColumnBase);
            var uInt32ArrayColumnBase = new ColumnBase<ColumnMappingBase>("UInt32Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt32Array", uInt32ArrayColumnBase);
            var uInt64ColumnBase = new ColumnBase<ColumnMappingBase>("UInt64", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt64", uInt64ColumnBase);
            var uInt64ArrayColumnBase = new ColumnBase<ColumnMappingBase>("UInt64Array", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt64Array", uInt64ArrayColumnBase);
            var uInt8ColumnBase = new ColumnBase<ColumnMappingBase>("UInt8", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt8", uInt8ColumnBase);
            var uInt8ArrayColumnBase = new ColumnBase<ColumnMappingBase>("UInt8Array", "BLOB", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UInt8Array", uInt8ArrayColumnBase);
            var uriColumnBase = new ColumnBase<ColumnMappingBase>("Uri", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("Uri", uriColumnBase);
            var uriArrayColumnBase = new ColumnBase<ColumnMappingBase>("UriArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UriArray", uriArrayColumnBase);
            var uriToStringConverterPropertyColumnBase = new ColumnBase<ColumnMappingBase>("UriToStringConverterProperty", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.Columns.Add("UriToStringConverterProperty", uriToStringConverterPropertyColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+ManyTypes", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase = new TableMappingBase<ColumnMappingBase>(manyTypes, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase, false);
            defaultTableMappings2.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, manyTypes.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolColumnBase, manyTypes.FindProperty("Bool")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolArrayColumnBase, manyTypes.FindProperty("BoolArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolToStringConverterPropertyColumnBase, manyTypes.FindProperty("BoolToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolToTwoValuesConverterPropertyColumnBase, manyTypes.FindProperty("BoolToTwoValuesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)boolToZeroOneConverterPropertyColumnBase, manyTypes.FindProperty("BoolToZeroOneConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bytesColumnBase, manyTypes.FindProperty("Bytes")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bytesArrayColumnBase, manyTypes.FindProperty("BytesArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bytesToStringConverterPropertyColumnBase, manyTypes.FindProperty("BytesToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)castingConverterPropertyColumnBase, manyTypes.FindProperty("CastingConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)charColumnBase, manyTypes.FindProperty("Char")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)charArrayColumnBase, manyTypes.FindProperty("CharArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)charToStringConverterPropertyColumnBase, manyTypes.FindProperty("CharToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateOnlyColumnBase, manyTypes.FindProperty("DateOnly")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateOnlyArrayColumnBase, manyTypes.FindProperty("DateOnlyArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateOnlyToStringConverterPropertyColumnBase, manyTypes.FindProperty("DateOnlyToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeColumnBase, manyTypes.FindProperty("DateTime")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeArrayColumnBase, manyTypes.FindProperty("DateTimeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeOffsetToBinaryConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeOffsetToBinaryConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeOffsetToBytesConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeOffsetToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeOffsetToStringConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeOffsetToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeToBinaryConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeToBinaryConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeToStringConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateTimeToTicksConverterPropertyColumnBase, manyTypes.FindProperty("DateTimeToTicksConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)decimalColumnBase, manyTypes.FindProperty("Decimal")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)decimalArrayColumnBase, manyTypes.FindProperty("DecimalArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)decimalNumberToBytesConverterPropertyColumnBase, manyTypes.FindProperty("DecimalNumberToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)decimalNumberToStringConverterPropertyColumnBase, manyTypes.FindProperty("DecimalNumberToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doubleColumnBase, manyTypes.FindProperty("Double")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doubleArrayColumnBase, manyTypes.FindProperty("DoubleArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doubleNumberToBytesConverterPropertyColumnBase, manyTypes.FindProperty("DoubleNumberToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)doubleNumberToStringConverterPropertyColumnBase, manyTypes.FindProperty("DoubleNumberToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16ColumnBase, manyTypes.FindProperty("Enum16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16ArrayColumnBase, manyTypes.FindProperty("Enum16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16AsStringColumnBase, manyTypes.FindProperty("Enum16AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16AsStringArrayColumnBase, manyTypes.FindProperty("Enum16AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16AsStringCollectionColumnBase, manyTypes.FindProperty("Enum16AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum16CollectionColumnBase, manyTypes.FindProperty("Enum16Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32ColumnBase, manyTypes.FindProperty("Enum32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32ArrayColumnBase, manyTypes.FindProperty("Enum32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32AsStringColumnBase, manyTypes.FindProperty("Enum32AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32AsStringArrayColumnBase, manyTypes.FindProperty("Enum32AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32AsStringCollectionColumnBase, manyTypes.FindProperty("Enum32AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum32CollectionColumnBase, manyTypes.FindProperty("Enum32Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64ColumnBase, manyTypes.FindProperty("Enum64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64ArrayColumnBase, manyTypes.FindProperty("Enum64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64AsStringColumnBase, manyTypes.FindProperty("Enum64AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64AsStringArrayColumnBase, manyTypes.FindProperty("Enum64AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64AsStringCollectionColumnBase, manyTypes.FindProperty("Enum64AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum64CollectionColumnBase, manyTypes.FindProperty("Enum64Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8ColumnBase, manyTypes.FindProperty("Enum8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8ArrayColumnBase, manyTypes.FindProperty("Enum8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8AsStringColumnBase, manyTypes.FindProperty("Enum8AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8AsStringArrayColumnBase, manyTypes.FindProperty("Enum8AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8AsStringCollectionColumnBase, manyTypes.FindProperty("Enum8AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum8CollectionColumnBase, manyTypes.FindProperty("Enum8Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumToNumberConverterPropertyColumnBase, manyTypes.FindProperty("EnumToNumberConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumToStringConverterPropertyColumnBase, manyTypes.FindProperty("EnumToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16ColumnBase, manyTypes.FindProperty("EnumU16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16ArrayColumnBase, manyTypes.FindProperty("EnumU16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16AsStringColumnBase, manyTypes.FindProperty("EnumU16AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16AsStringArrayColumnBase, manyTypes.FindProperty("EnumU16AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16AsStringCollectionColumnBase, manyTypes.FindProperty("EnumU16AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU16CollectionColumnBase, manyTypes.FindProperty("EnumU16Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32ColumnBase, manyTypes.FindProperty("EnumU32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32ArrayColumnBase, manyTypes.FindProperty("EnumU32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32AsStringColumnBase, manyTypes.FindProperty("EnumU32AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32AsStringArrayColumnBase, manyTypes.FindProperty("EnumU32AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32AsStringCollectionColumnBase, manyTypes.FindProperty("EnumU32AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU32CollectionColumnBase, manyTypes.FindProperty("EnumU32Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64ColumnBase, manyTypes.FindProperty("EnumU64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64ArrayColumnBase, manyTypes.FindProperty("EnumU64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64AsStringColumnBase, manyTypes.FindProperty("EnumU64AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64AsStringArrayColumnBase, manyTypes.FindProperty("EnumU64AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64AsStringCollectionColumnBase, manyTypes.FindProperty("EnumU64AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU64CollectionColumnBase, manyTypes.FindProperty("EnumU64Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8ColumnBase, manyTypes.FindProperty("EnumU8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8ArrayColumnBase, manyTypes.FindProperty("EnumU8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8AsStringColumnBase, manyTypes.FindProperty("EnumU8AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8AsStringArrayColumnBase, manyTypes.FindProperty("EnumU8AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8AsStringCollectionColumnBase, manyTypes.FindProperty("EnumU8AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enumU8CollectionColumnBase, manyTypes.FindProperty("EnumU8Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)floatColumnBase, manyTypes.FindProperty("Float")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)floatArrayColumnBase, manyTypes.FindProperty("FloatArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidColumnBase, manyTypes.FindProperty("Guid")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidArrayColumnBase, manyTypes.FindProperty("GuidArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidToBytesConverterPropertyColumnBase, manyTypes.FindProperty("GuidToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)guidToStringConverterPropertyColumnBase, manyTypes.FindProperty("GuidToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPAddressColumnBase, manyTypes.FindProperty("IPAddress")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPAddressArrayColumnBase, manyTypes.FindProperty("IPAddressArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPAddressToBytesConverterPropertyColumnBase, manyTypes.FindProperty("IPAddressToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)iPAddressToStringConverterPropertyColumnBase, manyTypes.FindProperty("IPAddressToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int16ColumnBase, manyTypes.FindProperty("Int16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int16ArrayColumnBase, manyTypes.FindProperty("Int16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int32ColumnBase, manyTypes.FindProperty("Int32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int32ArrayColumnBase, manyTypes.FindProperty("Int32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int64ColumnBase, manyTypes.FindProperty("Int64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int64ArrayColumnBase, manyTypes.FindProperty("Int64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int8ColumnBase, manyTypes.FindProperty("Int8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)int8ArrayColumnBase, manyTypes.FindProperty("Int8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)intNumberToBytesConverterPropertyColumnBase, manyTypes.FindProperty("IntNumberToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)intNumberToStringConverterPropertyColumnBase, manyTypes.FindProperty("IntNumberToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullIntToNullStringConverterPropertyColumnBase, manyTypes.FindProperty("NullIntToNullStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableBoolColumnBase, manyTypes.FindProperty("NullableBool")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableBoolArrayColumnBase, manyTypes.FindProperty("NullableBoolArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableBytesColumnBase, manyTypes.FindProperty("NullableBytes")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableBytesArrayColumnBase, manyTypes.FindProperty("NullableBytesArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableCharColumnBase, manyTypes.FindProperty("NullableChar")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableCharArrayColumnBase, manyTypes.FindProperty("NullableCharArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDateOnlyColumnBase, manyTypes.FindProperty("NullableDateOnly")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDateOnlyArrayColumnBase, manyTypes.FindProperty("NullableDateOnlyArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDateTimeColumnBase, manyTypes.FindProperty("NullableDateTime")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDateTimeArrayColumnBase, manyTypes.FindProperty("NullableDateTimeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDecimalColumnBase, manyTypes.FindProperty("NullableDecimal")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDecimalArrayColumnBase, manyTypes.FindProperty("NullableDecimalArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDoubleColumnBase, manyTypes.FindProperty("NullableDouble")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableDoubleArrayColumnBase, manyTypes.FindProperty("NullableDoubleArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16ColumnBase, manyTypes.FindProperty("NullableEnum16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16ArrayColumnBase, manyTypes.FindProperty("NullableEnum16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16AsStringColumnBase, manyTypes.FindProperty("NullableEnum16AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnum16AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnum16AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum16CollectionColumnBase, manyTypes.FindProperty("NullableEnum16Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32ColumnBase, manyTypes.FindProperty("NullableEnum32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32ArrayColumnBase, manyTypes.FindProperty("NullableEnum32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32AsStringColumnBase, manyTypes.FindProperty("NullableEnum32AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnum32AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnum32AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum32CollectionColumnBase, manyTypes.FindProperty("NullableEnum32Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64ColumnBase, manyTypes.FindProperty("NullableEnum64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64ArrayColumnBase, manyTypes.FindProperty("NullableEnum64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64AsStringColumnBase, manyTypes.FindProperty("NullableEnum64AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnum64AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnum64AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum64CollectionColumnBase, manyTypes.FindProperty("NullableEnum64Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8ColumnBase, manyTypes.FindProperty("NullableEnum8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8ArrayColumnBase, manyTypes.FindProperty("NullableEnum8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8AsStringColumnBase, manyTypes.FindProperty("NullableEnum8AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnum8AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnum8AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnum8CollectionColumnBase, manyTypes.FindProperty("NullableEnum8Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16ColumnBase, manyTypes.FindProperty("NullableEnumU16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16ArrayColumnBase, manyTypes.FindProperty("NullableEnumU16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16AsStringColumnBase, manyTypes.FindProperty("NullableEnumU16AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnumU16AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnumU16AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU16CollectionColumnBase, manyTypes.FindProperty("NullableEnumU16Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32ColumnBase, manyTypes.FindProperty("NullableEnumU32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32ArrayColumnBase, manyTypes.FindProperty("NullableEnumU32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32AsStringColumnBase, manyTypes.FindProperty("NullableEnumU32AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnumU32AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnumU32AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU32CollectionColumnBase, manyTypes.FindProperty("NullableEnumU32Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64ColumnBase, manyTypes.FindProperty("NullableEnumU64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64ArrayColumnBase, manyTypes.FindProperty("NullableEnumU64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64AsStringColumnBase, manyTypes.FindProperty("NullableEnumU64AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnumU64AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnumU64AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU64CollectionColumnBase, manyTypes.FindProperty("NullableEnumU64Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8ColumnBase, manyTypes.FindProperty("NullableEnumU8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8ArrayColumnBase, manyTypes.FindProperty("NullableEnumU8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8AsStringColumnBase, manyTypes.FindProperty("NullableEnumU8AsString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8AsStringArrayColumnBase, manyTypes.FindProperty("NullableEnumU8AsStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8AsStringCollectionColumnBase, manyTypes.FindProperty("NullableEnumU8AsStringCollection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableEnumU8CollectionColumnBase, manyTypes.FindProperty("NullableEnumU8Collection")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableFloatColumnBase, manyTypes.FindProperty("NullableFloat")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableFloatArrayColumnBase, manyTypes.FindProperty("NullableFloatArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableGuidColumnBase, manyTypes.FindProperty("NullableGuid")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableGuidArrayColumnBase, manyTypes.FindProperty("NullableGuidArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableIPAddressColumnBase, manyTypes.FindProperty("NullableIPAddress")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableIPAddressArrayColumnBase, manyTypes.FindProperty("NullableIPAddressArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt16ColumnBase, manyTypes.FindProperty("NullableInt16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt16ArrayColumnBase, manyTypes.FindProperty("NullableInt16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt32ColumnBase, manyTypes.FindProperty("NullableInt32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt32ArrayColumnBase, manyTypes.FindProperty("NullableInt32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt64ColumnBase, manyTypes.FindProperty("NullableInt64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt64ArrayColumnBase, manyTypes.FindProperty("NullableInt64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt8ColumnBase, manyTypes.FindProperty("NullableInt8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableInt8ArrayColumnBase, manyTypes.FindProperty("NullableInt8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullablePhysicalAddressColumnBase, manyTypes.FindProperty("NullablePhysicalAddress")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullablePhysicalAddressArrayColumnBase, manyTypes.FindProperty("NullablePhysicalAddressArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableStringColumnBase, manyTypes.FindProperty("NullableString")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableStringArrayColumnBase, manyTypes.FindProperty("NullableStringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableTimeOnlyColumnBase, manyTypes.FindProperty("NullableTimeOnly")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableTimeOnlyArrayColumnBase, manyTypes.FindProperty("NullableTimeOnlyArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableTimeSpanColumnBase, manyTypes.FindProperty("NullableTimeSpan")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableTimeSpanArrayColumnBase, manyTypes.FindProperty("NullableTimeSpanArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt16ColumnBase, manyTypes.FindProperty("NullableUInt16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt16ArrayColumnBase, manyTypes.FindProperty("NullableUInt16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt32ColumnBase, manyTypes.FindProperty("NullableUInt32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt32ArrayColumnBase, manyTypes.FindProperty("NullableUInt32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt64ColumnBase, manyTypes.FindProperty("NullableUInt64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt64ArrayColumnBase, manyTypes.FindProperty("NullableUInt64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt8ColumnBase, manyTypes.FindProperty("NullableUInt8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUInt8ArrayColumnBase, manyTypes.FindProperty("NullableUInt8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUriColumnBase, manyTypes.FindProperty("NullableUri")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nullableUriArrayColumnBase, manyTypes.FindProperty("NullableUriArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)physicalAddressColumnBase, manyTypes.FindProperty("PhysicalAddress")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)physicalAddressArrayColumnBase, manyTypes.FindProperty("PhysicalAddressArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)physicalAddressToBytesConverterPropertyColumnBase, manyTypes.FindProperty("PhysicalAddressToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)physicalAddressToStringConverterPropertyColumnBase, manyTypes.FindProperty("PhysicalAddressToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringColumnBase, manyTypes.FindProperty("String")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringArrayColumnBase, manyTypes.FindProperty("StringArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToBoolConverterPropertyColumnBase, manyTypes.FindProperty("StringToBoolConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToBytesConverterPropertyColumnBase, manyTypes.FindProperty("StringToBytesConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToCharConverterPropertyColumnBase, manyTypes.FindProperty("StringToCharConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToDateOnlyConverterPropertyColumnBase, manyTypes.FindProperty("StringToDateOnlyConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToDateTimeConverterPropertyColumnBase, manyTypes.FindProperty("StringToDateTimeConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToDateTimeOffsetConverterPropertyColumnBase, manyTypes.FindProperty("StringToDateTimeOffsetConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToDecimalNumberConverterPropertyColumnBase, manyTypes.FindProperty("StringToDecimalNumberConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToDoubleNumberConverterPropertyColumnBase, manyTypes.FindProperty("StringToDoubleNumberConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToEnumConverterPropertyColumnBase, manyTypes.FindProperty("StringToEnumConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToGuidConverterPropertyColumnBase, manyTypes.FindProperty("StringToGuidConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToIntNumberConverterPropertyColumnBase, manyTypes.FindProperty("StringToIntNumberConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToTimeOnlyConverterPropertyColumnBase, manyTypes.FindProperty("StringToTimeOnlyConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToTimeSpanConverterPropertyColumnBase, manyTypes.FindProperty("StringToTimeSpanConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stringToUriConverterPropertyColumnBase, manyTypes.FindProperty("StringToUriConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeOnlyColumnBase, manyTypes.FindProperty("TimeOnly")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeOnlyArrayColumnBase, manyTypes.FindProperty("TimeOnlyArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeOnlyToStringConverterPropertyColumnBase, manyTypes.FindProperty("TimeOnlyToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeOnlyToTicksConverterPropertyColumnBase, manyTypes.FindProperty("TimeOnlyToTicksConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeSpanColumnBase, manyTypes.FindProperty("TimeSpan")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeSpanArrayColumnBase, manyTypes.FindProperty("TimeSpanArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeSpanToStringConverterPropertyColumnBase, manyTypes.FindProperty("TimeSpanToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)timeSpanToTicksConverterPropertyColumnBase, manyTypes.FindProperty("TimeSpanToTicksConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt16ColumnBase, manyTypes.FindProperty("UInt16")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt16ArrayColumnBase, manyTypes.FindProperty("UInt16Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt32ColumnBase, manyTypes.FindProperty("UInt32")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt32ArrayColumnBase, manyTypes.FindProperty("UInt32Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt64ColumnBase, manyTypes.FindProperty("UInt64")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt64ArrayColumnBase, manyTypes.FindProperty("UInt64Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt8ColumnBase, manyTypes.FindProperty("UInt8")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uInt8ArrayColumnBase, manyTypes.FindProperty("UInt8Array")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uriColumnBase, manyTypes.FindProperty("Uri")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uriArrayColumnBase, manyTypes.FindProperty("UriArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uriToStringConverterPropertyColumnBase, manyTypes.FindProperty("UriToStringConverterProperty")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseManyTypesMappingBase);

            var tableMappings2 = new List<TableMapping>();
            manyTypes.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var manyTypesTable = new Table("ManyTypes", null, relationalModel);
            var idColumn1 = new Column("Id", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Id", idColumn1);
            var boolColumn = new Column("Bool", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Bool", boolColumn);
            var boolArrayColumn = new Column("BoolArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("BoolArray", boolArrayColumn);
            var boolToStringConverterPropertyColumn = new Column("BoolToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("BoolToStringConverterProperty", boolToStringConverterPropertyColumn);
            var boolToTwoValuesConverterPropertyColumn = new Column("BoolToTwoValuesConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("BoolToTwoValuesConverterProperty", boolToTwoValuesConverterPropertyColumn);
            var boolToZeroOneConverterPropertyColumn = new Column("BoolToZeroOneConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("BoolToZeroOneConverterProperty", boolToZeroOneConverterPropertyColumn);
            var bytesColumn = new Column("Bytes", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("Bytes", bytesColumn);
            var bytesArrayColumn = new Column("BytesArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("BytesArray", bytesArrayColumn);
            var bytesToStringConverterPropertyColumn = new Column("BytesToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("BytesToStringConverterProperty", bytesToStringConverterPropertyColumn);
            var castingConverterPropertyColumn = new Column("CastingConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("CastingConverterProperty", castingConverterPropertyColumn);
            var charColumn = new Column("Char", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Char", charColumn);
            var charArrayColumn = new Column("CharArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("CharArray", charArrayColumn);
            var charToStringConverterPropertyColumn = new Column("CharToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("CharToStringConverterProperty", charToStringConverterPropertyColumn);
            var dateOnlyColumn = new Column("DateOnly", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateOnly", dateOnlyColumn);
            var dateOnlyArrayColumn = new Column("DateOnlyArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateOnlyArray", dateOnlyArrayColumn);
            var dateOnlyToStringConverterPropertyColumn = new Column("DateOnlyToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateOnlyToStringConverterProperty", dateOnlyToStringConverterPropertyColumn);
            var dateTimeColumn = new Column("DateTime", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateTime", dateTimeColumn);
            var dateTimeArrayColumn = new Column("DateTimeArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeArray", dateTimeArrayColumn);
            var dateTimeOffsetToBinaryConverterPropertyColumn = new Column("DateTimeOffsetToBinaryConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeOffsetToBinaryConverterProperty", dateTimeOffsetToBinaryConverterPropertyColumn);
            var dateTimeOffsetToBytesConverterPropertyColumn = new Column("DateTimeOffsetToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeOffsetToBytesConverterProperty", dateTimeOffsetToBytesConverterPropertyColumn);
            var dateTimeOffsetToStringConverterPropertyColumn = new Column("DateTimeOffsetToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeOffsetToStringConverterProperty", dateTimeOffsetToStringConverterPropertyColumn);
            var dateTimeToBinaryConverterPropertyColumn = new Column("DateTimeToBinaryConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeToBinaryConverterProperty", dateTimeToBinaryConverterPropertyColumn);
            var dateTimeToStringConverterPropertyColumn = new Column("DateTimeToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeToStringConverterProperty", dateTimeToStringConverterPropertyColumn);
            var dateTimeToTicksConverterPropertyColumn = new Column("DateTimeToTicksConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DateTimeToTicksConverterProperty", dateTimeToTicksConverterPropertyColumn);
            var decimalColumn = new Column("Decimal", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Decimal", decimalColumn);
            var decimalArrayColumn = new Column("DecimalArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DecimalArray", decimalArrayColumn);
            var decimalNumberToBytesConverterPropertyColumn = new Column("DecimalNumberToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("DecimalNumberToBytesConverterProperty", decimalNumberToBytesConverterPropertyColumn);
            var decimalNumberToStringConverterPropertyColumn = new Column("DecimalNumberToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DecimalNumberToStringConverterProperty", decimalNumberToStringConverterPropertyColumn);
            var doubleColumn = new Column("Double", "REAL", manyTypesTable);
            manyTypesTable.Columns.Add("Double", doubleColumn);
            var doubleArrayColumn = new Column("DoubleArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DoubleArray", doubleArrayColumn);
            var doubleNumberToBytesConverterPropertyColumn = new Column("DoubleNumberToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("DoubleNumberToBytesConverterProperty", doubleNumberToBytesConverterPropertyColumn);
            var doubleNumberToStringConverterPropertyColumn = new Column("DoubleNumberToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("DoubleNumberToStringConverterProperty", doubleNumberToStringConverterPropertyColumn);
            var enum16Column = new Column("Enum16", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16", enum16Column);
            var enum16ArrayColumn = new Column("Enum16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16Array", enum16ArrayColumn);
            var enum16AsStringColumn = new Column("Enum16AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16AsString", enum16AsStringColumn);
            var enum16AsStringArrayColumn = new Column("Enum16AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16AsStringArray", enum16AsStringArrayColumn);
            var enum16AsStringCollectionColumn = new Column("Enum16AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16AsStringCollection", enum16AsStringCollectionColumn);
            var enum16CollectionColumn = new Column("Enum16Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum16Collection", enum16CollectionColumn);
            var enum32Column = new Column("Enum32", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32", enum32Column);
            var enum32ArrayColumn = new Column("Enum32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32Array", enum32ArrayColumn);
            var enum32AsStringColumn = new Column("Enum32AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32AsString", enum32AsStringColumn);
            var enum32AsStringArrayColumn = new Column("Enum32AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32AsStringArray", enum32AsStringArrayColumn);
            var enum32AsStringCollectionColumn = new Column("Enum32AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32AsStringCollection", enum32AsStringCollectionColumn);
            var enum32CollectionColumn = new Column("Enum32Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum32Collection", enum32CollectionColumn);
            var enum64Column = new Column("Enum64", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64", enum64Column);
            var enum64ArrayColumn = new Column("Enum64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64Array", enum64ArrayColumn);
            var enum64AsStringColumn = new Column("Enum64AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64AsString", enum64AsStringColumn);
            var enum64AsStringArrayColumn = new Column("Enum64AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64AsStringArray", enum64AsStringArrayColumn);
            var enum64AsStringCollectionColumn = new Column("Enum64AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64AsStringCollection", enum64AsStringCollectionColumn);
            var enum64CollectionColumn = new Column("Enum64Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum64Collection", enum64CollectionColumn);
            var enum8Column = new Column("Enum8", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8", enum8Column);
            var enum8ArrayColumn = new Column("Enum8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8Array", enum8ArrayColumn);
            var enum8AsStringColumn = new Column("Enum8AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8AsString", enum8AsStringColumn);
            var enum8AsStringArrayColumn = new Column("Enum8AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8AsStringArray", enum8AsStringArrayColumn);
            var enum8AsStringCollectionColumn = new Column("Enum8AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8AsStringCollection", enum8AsStringCollectionColumn);
            var enum8CollectionColumn = new Column("Enum8Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Enum8Collection", enum8CollectionColumn);
            var enumToNumberConverterPropertyColumn = new Column("EnumToNumberConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("EnumToNumberConverterProperty", enumToNumberConverterPropertyColumn);
            var enumToStringConverterPropertyColumn = new Column("EnumToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumToStringConverterProperty", enumToStringConverterPropertyColumn);
            var enumU16Column = new Column("EnumU16", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16", enumU16Column);
            var enumU16ArrayColumn = new Column("EnumU16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16Array", enumU16ArrayColumn);
            var enumU16AsStringColumn = new Column("EnumU16AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16AsString", enumU16AsStringColumn);
            var enumU16AsStringArrayColumn = new Column("EnumU16AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16AsStringArray", enumU16AsStringArrayColumn);
            var enumU16AsStringCollectionColumn = new Column("EnumU16AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16AsStringCollection", enumU16AsStringCollectionColumn);
            var enumU16CollectionColumn = new Column("EnumU16Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU16Collection", enumU16CollectionColumn);
            var enumU32Column = new Column("EnumU32", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32", enumU32Column);
            var enumU32ArrayColumn = new Column("EnumU32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32Array", enumU32ArrayColumn);
            var enumU32AsStringColumn = new Column("EnumU32AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32AsString", enumU32AsStringColumn);
            var enumU32AsStringArrayColumn = new Column("EnumU32AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32AsStringArray", enumU32AsStringArrayColumn);
            var enumU32AsStringCollectionColumn = new Column("EnumU32AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32AsStringCollection", enumU32AsStringCollectionColumn);
            var enumU32CollectionColumn = new Column("EnumU32Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU32Collection", enumU32CollectionColumn);
            var enumU64Column = new Column("EnumU64", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64", enumU64Column);
            var enumU64ArrayColumn = new Column("EnumU64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64Array", enumU64ArrayColumn);
            var enumU64AsStringColumn = new Column("EnumU64AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64AsString", enumU64AsStringColumn);
            var enumU64AsStringArrayColumn = new Column("EnumU64AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64AsStringArray", enumU64AsStringArrayColumn);
            var enumU64AsStringCollectionColumn = new Column("EnumU64AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64AsStringCollection", enumU64AsStringCollectionColumn);
            var enumU64CollectionColumn = new Column("EnumU64Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU64Collection", enumU64CollectionColumn);
            var enumU8Column = new Column("EnumU8", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8", enumU8Column);
            var enumU8ArrayColumn = new Column("EnumU8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8Array", enumU8ArrayColumn);
            var enumU8AsStringColumn = new Column("EnumU8AsString", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8AsString", enumU8AsStringColumn);
            var enumU8AsStringArrayColumn = new Column("EnumU8AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8AsStringArray", enumU8AsStringArrayColumn);
            var enumU8AsStringCollectionColumn = new Column("EnumU8AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8AsStringCollection", enumU8AsStringCollectionColumn);
            var enumU8CollectionColumn = new Column("EnumU8Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("EnumU8Collection", enumU8CollectionColumn);
            var floatColumn = new Column("Float", "REAL", manyTypesTable);
            manyTypesTable.Columns.Add("Float", floatColumn);
            var floatArrayColumn = new Column("FloatArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("FloatArray", floatArrayColumn);
            var guidColumn = new Column("Guid", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Guid", guidColumn);
            var guidArrayColumn = new Column("GuidArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("GuidArray", guidArrayColumn);
            var guidToBytesConverterPropertyColumn = new Column("GuidToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("GuidToBytesConverterProperty", guidToBytesConverterPropertyColumn);
            var guidToStringConverterPropertyColumn = new Column("GuidToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("GuidToStringConverterProperty", guidToStringConverterPropertyColumn);
            var iPAddressColumn = new Column("IPAddress", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("IPAddress", iPAddressColumn);
            var iPAddressArrayColumn = new Column("IPAddressArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("IPAddressArray", iPAddressArrayColumn);
            var iPAddressToBytesConverterPropertyColumn = new Column("IPAddressToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("IPAddressToBytesConverterProperty", iPAddressToBytesConverterPropertyColumn);
            var iPAddressToStringConverterPropertyColumn = new Column("IPAddressToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("IPAddressToStringConverterProperty", iPAddressToStringConverterPropertyColumn);
            var int16Column = new Column("Int16", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Int16", int16Column);
            var int16ArrayColumn = new Column("Int16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Int16Array", int16ArrayColumn);
            var int32Column = new Column("Int32", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Int32", int32Column);
            var int32ArrayColumn = new Column("Int32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Int32Array", int32ArrayColumn);
            var int64Column = new Column("Int64", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Int64", int64Column);
            var int64ArrayColumn = new Column("Int64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Int64Array", int64ArrayColumn);
            var int8Column = new Column("Int8", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("Int8", int8Column);
            var int8ArrayColumn = new Column("Int8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Int8Array", int8ArrayColumn);
            var intNumberToBytesConverterPropertyColumn = new Column("IntNumberToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("IntNumberToBytesConverterProperty", intNumberToBytesConverterPropertyColumn);
            var intNumberToStringConverterPropertyColumn = new Column("IntNumberToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("IntNumberToStringConverterProperty", intNumberToStringConverterPropertyColumn);
            var nullIntToNullStringConverterPropertyColumn = new Column("NullIntToNullStringConverterProperty", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullIntToNullStringConverterProperty", nullIntToNullStringConverterPropertyColumn);
            var nullableBoolColumn = new Column("NullableBool", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableBool", nullableBoolColumn);
            var nullableBoolArrayColumn = new Column("NullableBoolArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableBoolArray", nullableBoolArrayColumn);
            var nullableBytesColumn = new Column("NullableBytes", "BLOB", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableBytes", nullableBytesColumn);
            var nullableBytesArrayColumn = new Column("NullableBytesArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableBytesArray", nullableBytesArrayColumn);
            var nullableCharColumn = new Column("NullableChar", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableChar", nullableCharColumn);
            var nullableCharArrayColumn = new Column("NullableCharArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableCharArray", nullableCharArrayColumn);
            var nullableDateOnlyColumn = new Column("NullableDateOnly", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableDateOnly", nullableDateOnlyColumn);
            var nullableDateOnlyArrayColumn = new Column("NullableDateOnlyArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableDateOnlyArray", nullableDateOnlyArrayColumn);
            var nullableDateTimeColumn = new Column("NullableDateTime", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableDateTime", nullableDateTimeColumn);
            var nullableDateTimeArrayColumn = new Column("NullableDateTimeArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableDateTimeArray", nullableDateTimeArrayColumn);
            var nullableDecimalColumn = new Column("NullableDecimal", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableDecimal", nullableDecimalColumn);
            var nullableDecimalArrayColumn = new Column("NullableDecimalArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableDecimalArray", nullableDecimalArrayColumn);
            var nullableDoubleColumn = new Column("NullableDouble", "REAL", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableDouble", nullableDoubleColumn);
            var nullableDoubleArrayColumn = new Column("NullableDoubleArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableDoubleArray", nullableDoubleArrayColumn);
            var nullableEnum16Column = new Column("NullableEnum16", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum16", nullableEnum16Column);
            var nullableEnum16ArrayColumn = new Column("NullableEnum16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum16Array", nullableEnum16ArrayColumn);
            var nullableEnum16AsStringColumn = new Column("NullableEnum16AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum16AsString", nullableEnum16AsStringColumn);
            var nullableEnum16AsStringArrayColumn = new Column("NullableEnum16AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum16AsStringArray", nullableEnum16AsStringArrayColumn);
            var nullableEnum16AsStringCollectionColumn = new Column("NullableEnum16AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum16AsStringCollection", nullableEnum16AsStringCollectionColumn);
            var nullableEnum16CollectionColumn = new Column("NullableEnum16Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum16Collection", nullableEnum16CollectionColumn);
            var nullableEnum32Column = new Column("NullableEnum32", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum32", nullableEnum32Column);
            var nullableEnum32ArrayColumn = new Column("NullableEnum32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum32Array", nullableEnum32ArrayColumn);
            var nullableEnum32AsStringColumn = new Column("NullableEnum32AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum32AsString", nullableEnum32AsStringColumn);
            var nullableEnum32AsStringArrayColumn = new Column("NullableEnum32AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum32AsStringArray", nullableEnum32AsStringArrayColumn);
            var nullableEnum32AsStringCollectionColumn = new Column("NullableEnum32AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum32AsStringCollection", nullableEnum32AsStringCollectionColumn);
            var nullableEnum32CollectionColumn = new Column("NullableEnum32Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum32Collection", nullableEnum32CollectionColumn);
            var nullableEnum64Column = new Column("NullableEnum64", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum64", nullableEnum64Column);
            var nullableEnum64ArrayColumn = new Column("NullableEnum64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum64Array", nullableEnum64ArrayColumn);
            var nullableEnum64AsStringColumn = new Column("NullableEnum64AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum64AsString", nullableEnum64AsStringColumn);
            var nullableEnum64AsStringArrayColumn = new Column("NullableEnum64AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum64AsStringArray", nullableEnum64AsStringArrayColumn);
            var nullableEnum64AsStringCollectionColumn = new Column("NullableEnum64AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum64AsStringCollection", nullableEnum64AsStringCollectionColumn);
            var nullableEnum64CollectionColumn = new Column("NullableEnum64Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum64Collection", nullableEnum64CollectionColumn);
            var nullableEnum8Column = new Column("NullableEnum8", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum8", nullableEnum8Column);
            var nullableEnum8ArrayColumn = new Column("NullableEnum8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum8Array", nullableEnum8ArrayColumn);
            var nullableEnum8AsStringColumn = new Column("NullableEnum8AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnum8AsString", nullableEnum8AsStringColumn);
            var nullableEnum8AsStringArrayColumn = new Column("NullableEnum8AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum8AsStringArray", nullableEnum8AsStringArrayColumn);
            var nullableEnum8AsStringCollectionColumn = new Column("NullableEnum8AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum8AsStringCollection", nullableEnum8AsStringCollectionColumn);
            var nullableEnum8CollectionColumn = new Column("NullableEnum8Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnum8Collection", nullableEnum8CollectionColumn);
            var nullableEnumU16Column = new Column("NullableEnumU16", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU16", nullableEnumU16Column);
            var nullableEnumU16ArrayColumn = new Column("NullableEnumU16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU16Array", nullableEnumU16ArrayColumn);
            var nullableEnumU16AsStringColumn = new Column("NullableEnumU16AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU16AsString", nullableEnumU16AsStringColumn);
            var nullableEnumU16AsStringArrayColumn = new Column("NullableEnumU16AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU16AsStringArray", nullableEnumU16AsStringArrayColumn);
            var nullableEnumU16AsStringCollectionColumn = new Column("NullableEnumU16AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU16AsStringCollection", nullableEnumU16AsStringCollectionColumn);
            var nullableEnumU16CollectionColumn = new Column("NullableEnumU16Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU16Collection", nullableEnumU16CollectionColumn);
            var nullableEnumU32Column = new Column("NullableEnumU32", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU32", nullableEnumU32Column);
            var nullableEnumU32ArrayColumn = new Column("NullableEnumU32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU32Array", nullableEnumU32ArrayColumn);
            var nullableEnumU32AsStringColumn = new Column("NullableEnumU32AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU32AsString", nullableEnumU32AsStringColumn);
            var nullableEnumU32AsStringArrayColumn = new Column("NullableEnumU32AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU32AsStringArray", nullableEnumU32AsStringArrayColumn);
            var nullableEnumU32AsStringCollectionColumn = new Column("NullableEnumU32AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU32AsStringCollection", nullableEnumU32AsStringCollectionColumn);
            var nullableEnumU32CollectionColumn = new Column("NullableEnumU32Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU32Collection", nullableEnumU32CollectionColumn);
            var nullableEnumU64Column = new Column("NullableEnumU64", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU64", nullableEnumU64Column);
            var nullableEnumU64ArrayColumn = new Column("NullableEnumU64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU64Array", nullableEnumU64ArrayColumn);
            var nullableEnumU64AsStringColumn = new Column("NullableEnumU64AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU64AsString", nullableEnumU64AsStringColumn);
            var nullableEnumU64AsStringArrayColumn = new Column("NullableEnumU64AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU64AsStringArray", nullableEnumU64AsStringArrayColumn);
            var nullableEnumU64AsStringCollectionColumn = new Column("NullableEnumU64AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU64AsStringCollection", nullableEnumU64AsStringCollectionColumn);
            var nullableEnumU64CollectionColumn = new Column("NullableEnumU64Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU64Collection", nullableEnumU64CollectionColumn);
            var nullableEnumU8Column = new Column("NullableEnumU8", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU8", nullableEnumU8Column);
            var nullableEnumU8ArrayColumn = new Column("NullableEnumU8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU8Array", nullableEnumU8ArrayColumn);
            var nullableEnumU8AsStringColumn = new Column("NullableEnumU8AsString", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableEnumU8AsString", nullableEnumU8AsStringColumn);
            var nullableEnumU8AsStringArrayColumn = new Column("NullableEnumU8AsStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU8AsStringArray", nullableEnumU8AsStringArrayColumn);
            var nullableEnumU8AsStringCollectionColumn = new Column("NullableEnumU8AsStringCollection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU8AsStringCollection", nullableEnumU8AsStringCollectionColumn);
            var nullableEnumU8CollectionColumn = new Column("NullableEnumU8Collection", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableEnumU8Collection", nullableEnumU8CollectionColumn);
            var nullableFloatColumn = new Column("NullableFloat", "REAL", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableFloat", nullableFloatColumn);
            var nullableFloatArrayColumn = new Column("NullableFloatArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableFloatArray", nullableFloatArrayColumn);
            var nullableGuidColumn = new Column("NullableGuid", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableGuid", nullableGuidColumn);
            var nullableGuidArrayColumn = new Column("NullableGuidArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableGuidArray", nullableGuidArrayColumn);
            var nullableIPAddressColumn = new Column("NullableIPAddress", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableIPAddress", nullableIPAddressColumn);
            var nullableIPAddressArrayColumn = new Column("NullableIPAddressArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableIPAddressArray", nullableIPAddressArrayColumn);
            var nullableInt16Column = new Column("NullableInt16", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableInt16", nullableInt16Column);
            var nullableInt16ArrayColumn = new Column("NullableInt16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableInt16Array", nullableInt16ArrayColumn);
            var nullableInt32Column = new Column("NullableInt32", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableInt32", nullableInt32Column);
            var nullableInt32ArrayColumn = new Column("NullableInt32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableInt32Array", nullableInt32ArrayColumn);
            var nullableInt64Column = new Column("NullableInt64", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableInt64", nullableInt64Column);
            var nullableInt64ArrayColumn = new Column("NullableInt64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableInt64Array", nullableInt64ArrayColumn);
            var nullableInt8Column = new Column("NullableInt8", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableInt8", nullableInt8Column);
            var nullableInt8ArrayColumn = new Column("NullableInt8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableInt8Array", nullableInt8ArrayColumn);
            var nullablePhysicalAddressColumn = new Column("NullablePhysicalAddress", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullablePhysicalAddress", nullablePhysicalAddressColumn);
            var nullablePhysicalAddressArrayColumn = new Column("NullablePhysicalAddressArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullablePhysicalAddressArray", nullablePhysicalAddressArrayColumn);
            var nullableStringColumn = new Column("NullableString", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableString", nullableStringColumn);
            var nullableStringArrayColumn = new Column("NullableStringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableStringArray", nullableStringArrayColumn);
            var nullableTimeOnlyColumn = new Column("NullableTimeOnly", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableTimeOnly", nullableTimeOnlyColumn);
            var nullableTimeOnlyArrayColumn = new Column("NullableTimeOnlyArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableTimeOnlyArray", nullableTimeOnlyArrayColumn);
            var nullableTimeSpanColumn = new Column("NullableTimeSpan", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableTimeSpan", nullableTimeSpanColumn);
            var nullableTimeSpanArrayColumn = new Column("NullableTimeSpanArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableTimeSpanArray", nullableTimeSpanArrayColumn);
            var nullableUInt16Column = new Column("NullableUInt16", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableUInt16", nullableUInt16Column);
            var nullableUInt16ArrayColumn = new Column("NullableUInt16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableUInt16Array", nullableUInt16ArrayColumn);
            var nullableUInt32Column = new Column("NullableUInt32", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableUInt32", nullableUInt32Column);
            var nullableUInt32ArrayColumn = new Column("NullableUInt32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableUInt32Array", nullableUInt32ArrayColumn);
            var nullableUInt64Column = new Column("NullableUInt64", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableUInt64", nullableUInt64Column);
            var nullableUInt64ArrayColumn = new Column("NullableUInt64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableUInt64Array", nullableUInt64ArrayColumn);
            var nullableUInt8Column = new Column("NullableUInt8", "INTEGER", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableUInt8", nullableUInt8Column);
            var nullableUInt8ArrayColumn = new Column("NullableUInt8Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableUInt8Array", nullableUInt8ArrayColumn);
            var nullableUriColumn = new Column("NullableUri", "TEXT", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("NullableUri", nullableUriColumn);
            var nullableUriArrayColumn = new Column("NullableUriArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("NullableUriArray", nullableUriArrayColumn);
            var physicalAddressColumn = new Column("PhysicalAddress", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("PhysicalAddress", physicalAddressColumn);
            var physicalAddressArrayColumn = new Column("PhysicalAddressArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("PhysicalAddressArray", physicalAddressArrayColumn);
            var physicalAddressToBytesConverterPropertyColumn = new Column("PhysicalAddressToBytesConverterProperty", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("PhysicalAddressToBytesConverterProperty", physicalAddressToBytesConverterPropertyColumn);
            var physicalAddressToStringConverterPropertyColumn = new Column("PhysicalAddressToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("PhysicalAddressToStringConverterProperty", physicalAddressToStringConverterPropertyColumn);
            var stringColumn = new Column("String", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("String", stringColumn);
            var stringArrayColumn = new Column("StringArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringArray", stringArrayColumn);
            var stringToBoolConverterPropertyColumn = new Column("StringToBoolConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("StringToBoolConverterProperty", stringToBoolConverterPropertyColumn);
            var stringToBytesConverterPropertyColumn = new Column("StringToBytesConverterProperty", "BLOB", manyTypesTable)
            {
                IsNullable = true
            };
            manyTypesTable.Columns.Add("StringToBytesConverterProperty", stringToBytesConverterPropertyColumn);
            var stringToCharConverterPropertyColumn = new Column("StringToCharConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToCharConverterProperty", stringToCharConverterPropertyColumn);
            var stringToDateOnlyConverterPropertyColumn = new Column("StringToDateOnlyConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToDateOnlyConverterProperty", stringToDateOnlyConverterPropertyColumn);
            var stringToDateTimeConverterPropertyColumn = new Column("StringToDateTimeConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToDateTimeConverterProperty", stringToDateTimeConverterPropertyColumn);
            var stringToDateTimeOffsetConverterPropertyColumn = new Column("StringToDateTimeOffsetConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToDateTimeOffsetConverterProperty", stringToDateTimeOffsetConverterPropertyColumn);
            var stringToDecimalNumberConverterPropertyColumn = new Column("StringToDecimalNumberConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToDecimalNumberConverterProperty", stringToDecimalNumberConverterPropertyColumn);
            var stringToDoubleNumberConverterPropertyColumn = new Column("StringToDoubleNumberConverterProperty", "REAL", manyTypesTable);
            manyTypesTable.Columns.Add("StringToDoubleNumberConverterProperty", stringToDoubleNumberConverterPropertyColumn);
            var stringToEnumConverterPropertyColumn = new Column("StringToEnumConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("StringToEnumConverterProperty", stringToEnumConverterPropertyColumn);
            var stringToGuidConverterPropertyColumn = new Column("StringToGuidConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToGuidConverterProperty", stringToGuidConverterPropertyColumn);
            var stringToIntNumberConverterPropertyColumn = new Column("StringToIntNumberConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("StringToIntNumberConverterProperty", stringToIntNumberConverterPropertyColumn);
            var stringToTimeOnlyConverterPropertyColumn = new Column("StringToTimeOnlyConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToTimeOnlyConverterProperty", stringToTimeOnlyConverterPropertyColumn);
            var stringToTimeSpanConverterPropertyColumn = new Column("StringToTimeSpanConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToTimeSpanConverterProperty", stringToTimeSpanConverterPropertyColumn);
            var stringToUriConverterPropertyColumn = new Column("StringToUriConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("StringToUriConverterProperty", stringToUriConverterPropertyColumn);
            var timeOnlyColumn = new Column("TimeOnly", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeOnly", timeOnlyColumn);
            var timeOnlyArrayColumn = new Column("TimeOnlyArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeOnlyArray", timeOnlyArrayColumn);
            var timeOnlyToStringConverterPropertyColumn = new Column("TimeOnlyToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeOnlyToStringConverterProperty", timeOnlyToStringConverterPropertyColumn);
            var timeOnlyToTicksConverterPropertyColumn = new Column("TimeOnlyToTicksConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("TimeOnlyToTicksConverterProperty", timeOnlyToTicksConverterPropertyColumn);
            var timeSpanColumn = new Column("TimeSpan", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeSpan", timeSpanColumn);
            var timeSpanArrayColumn = new Column("TimeSpanArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeSpanArray", timeSpanArrayColumn);
            var timeSpanToStringConverterPropertyColumn = new Column("TimeSpanToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("TimeSpanToStringConverterProperty", timeSpanToStringConverterPropertyColumn);
            var timeSpanToTicksConverterPropertyColumn = new Column("TimeSpanToTicksConverterProperty", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("TimeSpanToTicksConverterProperty", timeSpanToTicksConverterPropertyColumn);
            var uInt16Column = new Column("UInt16", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("UInt16", uInt16Column);
            var uInt16ArrayColumn = new Column("UInt16Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("UInt16Array", uInt16ArrayColumn);
            var uInt32Column = new Column("UInt32", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("UInt32", uInt32Column);
            var uInt32ArrayColumn = new Column("UInt32Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("UInt32Array", uInt32ArrayColumn);
            var uInt64Column = new Column("UInt64", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("UInt64", uInt64Column);
            var uInt64ArrayColumn = new Column("UInt64Array", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("UInt64Array", uInt64ArrayColumn);
            var uInt8Column = new Column("UInt8", "INTEGER", manyTypesTable);
            manyTypesTable.Columns.Add("UInt8", uInt8Column);
            var uInt8ArrayColumn = new Column("UInt8Array", "BLOB", manyTypesTable);
            manyTypesTable.Columns.Add("UInt8Array", uInt8ArrayColumn);
            var uriColumn = new Column("Uri", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("Uri", uriColumn);
            var uriArrayColumn = new Column("UriArray", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("UriArray", uriArrayColumn);
            var uriToStringConverterPropertyColumn = new Column("UriToStringConverterProperty", "TEXT", manyTypesTable);
            manyTypesTable.Columns.Add("UriToStringConverterProperty", uriToStringConverterPropertyColumn);
            var pK_ManyTypes = new UniqueConstraint("PK_ManyTypes", manyTypesTable, new[] { idColumn1 });
            manyTypesTable.PrimaryKey = pK_ManyTypes;
            var pK_ManyTypesUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+ManyTypes",
                new[] { "Id" });
            pK_ManyTypes.MappedKeys.Add(pK_ManyTypesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ManyTypesUc).Add(pK_ManyTypes);
            manyTypesTable.UniqueConstraints.Add("PK_ManyTypes", pK_ManyTypes);
            relationalModel.Tables.Add(("ManyTypes", null), manyTypesTable);
            var manyTypesTableMapping = new TableMapping(manyTypes, manyTypesTable, true);
            manyTypesTable.AddTypeMapping(manyTypesTableMapping, false);
            tableMappings2.Add(manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, manyTypes.FindProperty("Id")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(boolColumn, manyTypes.FindProperty("Bool")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(boolArrayColumn, manyTypes.FindProperty("BoolArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(boolToStringConverterPropertyColumn, manyTypes.FindProperty("BoolToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(boolToTwoValuesConverterPropertyColumn, manyTypes.FindProperty("BoolToTwoValuesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(boolToZeroOneConverterPropertyColumn, manyTypes.FindProperty("BoolToZeroOneConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(bytesColumn, manyTypes.FindProperty("Bytes")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(bytesArrayColumn, manyTypes.FindProperty("BytesArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(bytesToStringConverterPropertyColumn, manyTypes.FindProperty("BytesToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(castingConverterPropertyColumn, manyTypes.FindProperty("CastingConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(charColumn, manyTypes.FindProperty("Char")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(charArrayColumn, manyTypes.FindProperty("CharArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(charToStringConverterPropertyColumn, manyTypes.FindProperty("CharToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateOnlyColumn, manyTypes.FindProperty("DateOnly")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateOnlyArrayColumn, manyTypes.FindProperty("DateOnlyArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateOnlyToStringConverterPropertyColumn, manyTypes.FindProperty("DateOnlyToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeColumn, manyTypes.FindProperty("DateTime")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeArrayColumn, manyTypes.FindProperty("DateTimeArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeOffsetToBinaryConverterPropertyColumn, manyTypes.FindProperty("DateTimeOffsetToBinaryConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeOffsetToBytesConverterPropertyColumn, manyTypes.FindProperty("DateTimeOffsetToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeOffsetToStringConverterPropertyColumn, manyTypes.FindProperty("DateTimeOffsetToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeToBinaryConverterPropertyColumn, manyTypes.FindProperty("DateTimeToBinaryConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeToStringConverterPropertyColumn, manyTypes.FindProperty("DateTimeToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(dateTimeToTicksConverterPropertyColumn, manyTypes.FindProperty("DateTimeToTicksConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(decimalColumn, manyTypes.FindProperty("Decimal")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(decimalArrayColumn, manyTypes.FindProperty("DecimalArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(decimalNumberToBytesConverterPropertyColumn, manyTypes.FindProperty("DecimalNumberToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(decimalNumberToStringConverterPropertyColumn, manyTypes.FindProperty("DecimalNumberToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(doubleColumn, manyTypes.FindProperty("Double")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(doubleArrayColumn, manyTypes.FindProperty("DoubleArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(doubleNumberToBytesConverterPropertyColumn, manyTypes.FindProperty("DoubleNumberToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(doubleNumberToStringConverterPropertyColumn, manyTypes.FindProperty("DoubleNumberToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16Column, manyTypes.FindProperty("Enum16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16ArrayColumn, manyTypes.FindProperty("Enum16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16AsStringColumn, manyTypes.FindProperty("Enum16AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16AsStringArrayColumn, manyTypes.FindProperty("Enum16AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16AsStringCollectionColumn, manyTypes.FindProperty("Enum16AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum16CollectionColumn, manyTypes.FindProperty("Enum16Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32Column, manyTypes.FindProperty("Enum32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32ArrayColumn, manyTypes.FindProperty("Enum32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32AsStringColumn, manyTypes.FindProperty("Enum32AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32AsStringArrayColumn, manyTypes.FindProperty("Enum32AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32AsStringCollectionColumn, manyTypes.FindProperty("Enum32AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum32CollectionColumn, manyTypes.FindProperty("Enum32Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64Column, manyTypes.FindProperty("Enum64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64ArrayColumn, manyTypes.FindProperty("Enum64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64AsStringColumn, manyTypes.FindProperty("Enum64AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64AsStringArrayColumn, manyTypes.FindProperty("Enum64AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64AsStringCollectionColumn, manyTypes.FindProperty("Enum64AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum64CollectionColumn, manyTypes.FindProperty("Enum64Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8Column, manyTypes.FindProperty("Enum8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8ArrayColumn, manyTypes.FindProperty("Enum8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8AsStringColumn, manyTypes.FindProperty("Enum8AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8AsStringArrayColumn, manyTypes.FindProperty("Enum8AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8AsStringCollectionColumn, manyTypes.FindProperty("Enum8AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enum8CollectionColumn, manyTypes.FindProperty("Enum8Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumToNumberConverterPropertyColumn, manyTypes.FindProperty("EnumToNumberConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumToStringConverterPropertyColumn, manyTypes.FindProperty("EnumToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16Column, manyTypes.FindProperty("EnumU16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16ArrayColumn, manyTypes.FindProperty("EnumU16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16AsStringColumn, manyTypes.FindProperty("EnumU16AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16AsStringArrayColumn, manyTypes.FindProperty("EnumU16AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16AsStringCollectionColumn, manyTypes.FindProperty("EnumU16AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU16CollectionColumn, manyTypes.FindProperty("EnumU16Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32Column, manyTypes.FindProperty("EnumU32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32ArrayColumn, manyTypes.FindProperty("EnumU32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32AsStringColumn, manyTypes.FindProperty("EnumU32AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32AsStringArrayColumn, manyTypes.FindProperty("EnumU32AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32AsStringCollectionColumn, manyTypes.FindProperty("EnumU32AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU32CollectionColumn, manyTypes.FindProperty("EnumU32Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64Column, manyTypes.FindProperty("EnumU64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64ArrayColumn, manyTypes.FindProperty("EnumU64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64AsStringColumn, manyTypes.FindProperty("EnumU64AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64AsStringArrayColumn, manyTypes.FindProperty("EnumU64AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64AsStringCollectionColumn, manyTypes.FindProperty("EnumU64AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU64CollectionColumn, manyTypes.FindProperty("EnumU64Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8Column, manyTypes.FindProperty("EnumU8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8ArrayColumn, manyTypes.FindProperty("EnumU8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8AsStringColumn, manyTypes.FindProperty("EnumU8AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8AsStringArrayColumn, manyTypes.FindProperty("EnumU8AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8AsStringCollectionColumn, manyTypes.FindProperty("EnumU8AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(enumU8CollectionColumn, manyTypes.FindProperty("EnumU8Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(floatColumn, manyTypes.FindProperty("Float")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(floatArrayColumn, manyTypes.FindProperty("FloatArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(guidColumn, manyTypes.FindProperty("Guid")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(guidArrayColumn, manyTypes.FindProperty("GuidArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(guidToBytesConverterPropertyColumn, manyTypes.FindProperty("GuidToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(guidToStringConverterPropertyColumn, manyTypes.FindProperty("GuidToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(iPAddressColumn, manyTypes.FindProperty("IPAddress")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(iPAddressArrayColumn, manyTypes.FindProperty("IPAddressArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(iPAddressToBytesConverterPropertyColumn, manyTypes.FindProperty("IPAddressToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(iPAddressToStringConverterPropertyColumn, manyTypes.FindProperty("IPAddressToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int16Column, manyTypes.FindProperty("Int16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int16ArrayColumn, manyTypes.FindProperty("Int16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int32Column, manyTypes.FindProperty("Int32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int32ArrayColumn, manyTypes.FindProperty("Int32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int64Column, manyTypes.FindProperty("Int64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int64ArrayColumn, manyTypes.FindProperty("Int64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int8Column, manyTypes.FindProperty("Int8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(int8ArrayColumn, manyTypes.FindProperty("Int8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(intNumberToBytesConverterPropertyColumn, manyTypes.FindProperty("IntNumberToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(intNumberToStringConverterPropertyColumn, manyTypes.FindProperty("IntNumberToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullIntToNullStringConverterPropertyColumn, manyTypes.FindProperty("NullIntToNullStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableBoolColumn, manyTypes.FindProperty("NullableBool")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableBoolArrayColumn, manyTypes.FindProperty("NullableBoolArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableBytesColumn, manyTypes.FindProperty("NullableBytes")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableBytesArrayColumn, manyTypes.FindProperty("NullableBytesArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableCharColumn, manyTypes.FindProperty("NullableChar")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableCharArrayColumn, manyTypes.FindProperty("NullableCharArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDateOnlyColumn, manyTypes.FindProperty("NullableDateOnly")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDateOnlyArrayColumn, manyTypes.FindProperty("NullableDateOnlyArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDateTimeColumn, manyTypes.FindProperty("NullableDateTime")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDateTimeArrayColumn, manyTypes.FindProperty("NullableDateTimeArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDecimalColumn, manyTypes.FindProperty("NullableDecimal")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDecimalArrayColumn, manyTypes.FindProperty("NullableDecimalArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDoubleColumn, manyTypes.FindProperty("NullableDouble")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableDoubleArrayColumn, manyTypes.FindProperty("NullableDoubleArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16Column, manyTypes.FindProperty("NullableEnum16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16ArrayColumn, manyTypes.FindProperty("NullableEnum16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16AsStringColumn, manyTypes.FindProperty("NullableEnum16AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16AsStringArrayColumn, manyTypes.FindProperty("NullableEnum16AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16AsStringCollectionColumn, manyTypes.FindProperty("NullableEnum16AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum16CollectionColumn, manyTypes.FindProperty("NullableEnum16Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32Column, manyTypes.FindProperty("NullableEnum32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32ArrayColumn, manyTypes.FindProperty("NullableEnum32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32AsStringColumn, manyTypes.FindProperty("NullableEnum32AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32AsStringArrayColumn, manyTypes.FindProperty("NullableEnum32AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32AsStringCollectionColumn, manyTypes.FindProperty("NullableEnum32AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum32CollectionColumn, manyTypes.FindProperty("NullableEnum32Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64Column, manyTypes.FindProperty("NullableEnum64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64ArrayColumn, manyTypes.FindProperty("NullableEnum64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64AsStringColumn, manyTypes.FindProperty("NullableEnum64AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64AsStringArrayColumn, manyTypes.FindProperty("NullableEnum64AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64AsStringCollectionColumn, manyTypes.FindProperty("NullableEnum64AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum64CollectionColumn, manyTypes.FindProperty("NullableEnum64Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8Column, manyTypes.FindProperty("NullableEnum8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8ArrayColumn, manyTypes.FindProperty("NullableEnum8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8AsStringColumn, manyTypes.FindProperty("NullableEnum8AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8AsStringArrayColumn, manyTypes.FindProperty("NullableEnum8AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8AsStringCollectionColumn, manyTypes.FindProperty("NullableEnum8AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnum8CollectionColumn, manyTypes.FindProperty("NullableEnum8Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16Column, manyTypes.FindProperty("NullableEnumU16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16ArrayColumn, manyTypes.FindProperty("NullableEnumU16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16AsStringColumn, manyTypes.FindProperty("NullableEnumU16AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16AsStringArrayColumn, manyTypes.FindProperty("NullableEnumU16AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16AsStringCollectionColumn, manyTypes.FindProperty("NullableEnumU16AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU16CollectionColumn, manyTypes.FindProperty("NullableEnumU16Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32Column, manyTypes.FindProperty("NullableEnumU32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32ArrayColumn, manyTypes.FindProperty("NullableEnumU32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32AsStringColumn, manyTypes.FindProperty("NullableEnumU32AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32AsStringArrayColumn, manyTypes.FindProperty("NullableEnumU32AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32AsStringCollectionColumn, manyTypes.FindProperty("NullableEnumU32AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU32CollectionColumn, manyTypes.FindProperty("NullableEnumU32Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64Column, manyTypes.FindProperty("NullableEnumU64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64ArrayColumn, manyTypes.FindProperty("NullableEnumU64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64AsStringColumn, manyTypes.FindProperty("NullableEnumU64AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64AsStringArrayColumn, manyTypes.FindProperty("NullableEnumU64AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64AsStringCollectionColumn, manyTypes.FindProperty("NullableEnumU64AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU64CollectionColumn, manyTypes.FindProperty("NullableEnumU64Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8Column, manyTypes.FindProperty("NullableEnumU8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8ArrayColumn, manyTypes.FindProperty("NullableEnumU8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8AsStringColumn, manyTypes.FindProperty("NullableEnumU8AsString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8AsStringArrayColumn, manyTypes.FindProperty("NullableEnumU8AsStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8AsStringCollectionColumn, manyTypes.FindProperty("NullableEnumU8AsStringCollection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableEnumU8CollectionColumn, manyTypes.FindProperty("NullableEnumU8Collection")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableFloatColumn, manyTypes.FindProperty("NullableFloat")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableFloatArrayColumn, manyTypes.FindProperty("NullableFloatArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableGuidColumn, manyTypes.FindProperty("NullableGuid")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableGuidArrayColumn, manyTypes.FindProperty("NullableGuidArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableIPAddressColumn, manyTypes.FindProperty("NullableIPAddress")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableIPAddressArrayColumn, manyTypes.FindProperty("NullableIPAddressArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt16Column, manyTypes.FindProperty("NullableInt16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt16ArrayColumn, manyTypes.FindProperty("NullableInt16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt32Column, manyTypes.FindProperty("NullableInt32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt32ArrayColumn, manyTypes.FindProperty("NullableInt32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt64Column, manyTypes.FindProperty("NullableInt64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt64ArrayColumn, manyTypes.FindProperty("NullableInt64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt8Column, manyTypes.FindProperty("NullableInt8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableInt8ArrayColumn, manyTypes.FindProperty("NullableInt8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullablePhysicalAddressColumn, manyTypes.FindProperty("NullablePhysicalAddress")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullablePhysicalAddressArrayColumn, manyTypes.FindProperty("NullablePhysicalAddressArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableStringColumn, manyTypes.FindProperty("NullableString")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableStringArrayColumn, manyTypes.FindProperty("NullableStringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableTimeOnlyColumn, manyTypes.FindProperty("NullableTimeOnly")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableTimeOnlyArrayColumn, manyTypes.FindProperty("NullableTimeOnlyArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableTimeSpanColumn, manyTypes.FindProperty("NullableTimeSpan")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableTimeSpanArrayColumn, manyTypes.FindProperty("NullableTimeSpanArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt16Column, manyTypes.FindProperty("NullableUInt16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt16ArrayColumn, manyTypes.FindProperty("NullableUInt16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt32Column, manyTypes.FindProperty("NullableUInt32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt32ArrayColumn, manyTypes.FindProperty("NullableUInt32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt64Column, manyTypes.FindProperty("NullableUInt64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt64ArrayColumn, manyTypes.FindProperty("NullableUInt64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt8Column, manyTypes.FindProperty("NullableUInt8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUInt8ArrayColumn, manyTypes.FindProperty("NullableUInt8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUriColumn, manyTypes.FindProperty("NullableUri")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(nullableUriArrayColumn, manyTypes.FindProperty("NullableUriArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(physicalAddressColumn, manyTypes.FindProperty("PhysicalAddress")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(physicalAddressArrayColumn, manyTypes.FindProperty("PhysicalAddressArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(physicalAddressToBytesConverterPropertyColumn, manyTypes.FindProperty("PhysicalAddressToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(physicalAddressToStringConverterPropertyColumn, manyTypes.FindProperty("PhysicalAddressToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringColumn, manyTypes.FindProperty("String")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringArrayColumn, manyTypes.FindProperty("StringArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToBoolConverterPropertyColumn, manyTypes.FindProperty("StringToBoolConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToBytesConverterPropertyColumn, manyTypes.FindProperty("StringToBytesConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToCharConverterPropertyColumn, manyTypes.FindProperty("StringToCharConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToDateOnlyConverterPropertyColumn, manyTypes.FindProperty("StringToDateOnlyConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToDateTimeConverterPropertyColumn, manyTypes.FindProperty("StringToDateTimeConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToDateTimeOffsetConverterPropertyColumn, manyTypes.FindProperty("StringToDateTimeOffsetConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToDecimalNumberConverterPropertyColumn, manyTypes.FindProperty("StringToDecimalNumberConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToDoubleNumberConverterPropertyColumn, manyTypes.FindProperty("StringToDoubleNumberConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToEnumConverterPropertyColumn, manyTypes.FindProperty("StringToEnumConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToGuidConverterPropertyColumn, manyTypes.FindProperty("StringToGuidConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToIntNumberConverterPropertyColumn, manyTypes.FindProperty("StringToIntNumberConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToTimeOnlyConverterPropertyColumn, manyTypes.FindProperty("StringToTimeOnlyConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToTimeSpanConverterPropertyColumn, manyTypes.FindProperty("StringToTimeSpanConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(stringToUriConverterPropertyColumn, manyTypes.FindProperty("StringToUriConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeOnlyColumn, manyTypes.FindProperty("TimeOnly")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeOnlyArrayColumn, manyTypes.FindProperty("TimeOnlyArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeOnlyToStringConverterPropertyColumn, manyTypes.FindProperty("TimeOnlyToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeOnlyToTicksConverterPropertyColumn, manyTypes.FindProperty("TimeOnlyToTicksConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeSpanColumn, manyTypes.FindProperty("TimeSpan")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeSpanArrayColumn, manyTypes.FindProperty("TimeSpanArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeSpanToStringConverterPropertyColumn, manyTypes.FindProperty("TimeSpanToStringConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(timeSpanToTicksConverterPropertyColumn, manyTypes.FindProperty("TimeSpanToTicksConverterProperty")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt16Column, manyTypes.FindProperty("UInt16")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt16ArrayColumn, manyTypes.FindProperty("UInt16Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt32Column, manyTypes.FindProperty("UInt32")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt32ArrayColumn, manyTypes.FindProperty("UInt32Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt64Column, manyTypes.FindProperty("UInt64")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt64ArrayColumn, manyTypes.FindProperty("UInt64Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt8Column, manyTypes.FindProperty("UInt8")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uInt8ArrayColumn, manyTypes.FindProperty("UInt8Array")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uriColumn, manyTypes.FindProperty("Uri")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uriArrayColumn, manyTypes.FindProperty("UriArray")!, manyTypesTableMapping);
            RelationalModel.CreateColumnMapping(uriToStringConverterPropertyColumn, manyTypes.FindProperty("UriToStringConverterProperty")!, manyTypesTableMapping);

            var principalBase = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            principalBase.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase", null, relationalModel);
            var alternateIdColumnBase = new ColumnBase<ColumnMappingBase>("AlternateId", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("AlternateId", alternateIdColumnBase);
            var discriminatorColumnBase = new ColumnBase<ColumnMappingBase>("Discriminator", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("Discriminator", discriminatorColumnBase);
            var enum1ColumnBase = new ColumnBase<ColumnMappingBase>("Enum1", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("Enum1", enum1ColumnBase);
            var enum2ColumnBase = new ColumnBase<ColumnMappingBase>("Enum2", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("Enum2", enum2ColumnBase);
            var flagsEnum1ColumnBase = new ColumnBase<ColumnMappingBase>("FlagsEnum1", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("FlagsEnum1", flagsEnum1ColumnBase);
            var flagsEnum2ColumnBase = new ColumnBase<ColumnMappingBase>("FlagsEnum2", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("FlagsEnum2", flagsEnum2ColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("Id", idColumnBase2);
            var pointColumnBase0 = new ColumnBase<ColumnMappingBase>("Point", "geometry", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("Point", pointColumnBase0);
            var refTypeArrayColumnBase = new ColumnBase<ColumnMappingBase>("RefTypeArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("RefTypeArray", refTypeArrayColumnBase);
            var refTypeEnumerableColumnBase = new ColumnBase<ColumnMappingBase>("RefTypeEnumerable", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumnBase);
            var refTypeIListColumnBase = new ColumnBase<ColumnMappingBase>("RefTypeIList", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("RefTypeIList", refTypeIListColumnBase);
            var refTypeListColumnBase = new ColumnBase<ColumnMappingBase>("RefTypeList", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("RefTypeList", refTypeListColumnBase);
            var valueTypeArrayColumnBase = new ColumnBase<ColumnMappingBase>("ValueTypeArray", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("ValueTypeArray", valueTypeArrayColumnBase);
            var valueTypeEnumerableColumnBase = new ColumnBase<ColumnMappingBase>("ValueTypeEnumerable", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumnBase);
            var valueTypeIListColumnBase = new ColumnBase<ColumnMappingBase>("ValueTypeIList", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("ValueTypeIList", valueTypeIListColumnBase);
            var valueTypeListColumnBase = new ColumnBase<ColumnMappingBase>("ValueTypeList", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.Columns.Add("ValueTypeList", valueTypeListColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase = new TableMappingBase<ColumnMappingBase>(principalBase, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase, false);
            defaultTableMappings3.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)alternateIdColumnBase, principalBase.FindProperty("AlternateId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, principalBase.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discriminatorColumnBase, principalBase.FindProperty("Discriminator")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum1ColumnBase, principalBase.FindProperty("Enum1")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum2ColumnBase, principalBase.FindProperty("Enum2")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagsEnum1ColumnBase, principalBase.FindProperty("FlagsEnum1")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagsEnum2ColumnBase, principalBase.FindProperty("FlagsEnum2")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pointColumnBase0, principalBase.FindProperty("Point")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeArrayColumnBase, principalBase.FindProperty("RefTypeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeEnumerableColumnBase, principalBase.FindProperty("RefTypeEnumerable")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeIListColumnBase, principalBase.FindProperty("RefTypeIList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeListColumnBase, principalBase.FindProperty("RefTypeList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeArrayColumnBase, principalBase.FindProperty("ValueTypeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeEnumerableColumnBase, principalBase.FindProperty("ValueTypeEnumerable")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeIListColumnBase, principalBase.FindProperty("ValueTypeIList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeListColumnBase, principalBase.FindProperty("ValueTypeList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase);

            var tableMappings3 = new List<TableMapping>();
            principalBase.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var principalBaseTable = new Table("PrincipalBase", null, relationalModel);
            var idColumn2 = new Column("Id", "INTEGER", principalBaseTable);
            principalBaseTable.Columns.Add("Id", idColumn2);
            var alternateIdColumn = new Column("AlternateId", "TEXT", principalBaseTable);
            principalBaseTable.Columns.Add("AlternateId", alternateIdColumn);
            var discriminatorColumn = new Column("Discriminator", "TEXT", principalBaseTable);
            principalBaseTable.Columns.Add("Discriminator", discriminatorColumn);
            var enum1Column = new Column("Enum1", "INTEGER", principalBaseTable);
            principalBaseTable.Columns.Add("Enum1", enum1Column);
            var enum2Column = new Column("Enum2", "INTEGER", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("Enum2", enum2Column);
            var flagsEnum1Column = new Column("FlagsEnum1", "INTEGER", principalBaseTable);
            principalBaseTable.Columns.Add("FlagsEnum1", flagsEnum1Column);
            var flagsEnum2Column = new Column("FlagsEnum2", "INTEGER", principalBaseTable);
            principalBaseTable.Columns.Add("FlagsEnum2", flagsEnum2Column);
            var manyOwnedColumn = new JsonColumn("ManyOwned", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("ManyOwned", manyOwnedColumn);
            var ownedColumn = new JsonColumn("Owned", "TEXT", principalBaseTable);
            principalBaseTable.Columns.Add("Owned", ownedColumn);
            var pointColumn0 = new Column("Point", "geometry", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("Point", pointColumn0);
            var refTypeArrayColumn = new Column("RefTypeArray", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("RefTypeArray", refTypeArrayColumn);
            var refTypeEnumerableColumn = new Column("RefTypeEnumerable", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("RefTypeEnumerable", refTypeEnumerableColumn);
            var refTypeIListColumn = new Column("RefTypeIList", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("RefTypeIList", refTypeIListColumn);
            var refTypeListColumn = new Column("RefTypeList", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("RefTypeList", refTypeListColumn);
            var valueTypeArrayColumn = new Column("ValueTypeArray", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("ValueTypeArray", valueTypeArrayColumn);
            var valueTypeEnumerableColumn = new Column("ValueTypeEnumerable", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("ValueTypeEnumerable", valueTypeEnumerableColumn);
            var valueTypeIListColumn = new Column("ValueTypeIList", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("ValueTypeIList", valueTypeIListColumn);
            var valueTypeListColumn = new Column("ValueTypeList", "TEXT", principalBaseTable)
            {
                IsNullable = true
            };
            principalBaseTable.Columns.Add("ValueTypeList", valueTypeListColumn);
            var aK_PrincipalBase_Id = new UniqueConstraint("AK_PrincipalBase_Id", principalBaseTable, new[] { idColumn2 });
            var aK_PrincipalBase_IdUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "Id" });
            aK_PrincipalBase_Id.MappedKeys.Add(aK_PrincipalBase_IdUc);
            RelationalModel.GetOrCreateUniqueConstraints(aK_PrincipalBase_IdUc).Add(aK_PrincipalBase_Id);
            principalBaseTable.UniqueConstraints.Add("AK_PrincipalBase_Id", aK_PrincipalBase_Id);
            var pK = new UniqueConstraint("PK", principalBaseTable, new[] { idColumn2, alternateIdColumn });
            principalBaseTable.PrimaryKey = pK;
            var pKUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "Id", "AlternateId" });
            pK.MappedKeys.Add(pKUc);
            RelationalModel.GetOrCreateUniqueConstraints(pKUc).Add(pK);
            principalBaseTable.UniqueConstraints.Add("PK", pK);
            var iX_PrincipalBase_AlternateId_Id = new TableIndex(
            "IX_PrincipalBase_AlternateId_Id", principalBaseTable, new[] { alternateIdColumn, idColumn2 }, false);
            var iX_PrincipalBase_AlternateId_IdIx = RelationalModel.GetIndex(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "AlternateId", "Id" });
            iX_PrincipalBase_AlternateId_Id.MappedIndexes.Add(iX_PrincipalBase_AlternateId_IdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBase_AlternateId_IdIx).Add(iX_PrincipalBase_AlternateId_Id);
            principalBaseTable.Indexes.Add("IX_PrincipalBase_AlternateId_Id", iX_PrincipalBase_AlternateId_Id);
            relationalModel.Tables.Add(("PrincipalBase", null), principalBaseTable);
            var principalBaseTableMapping = new TableMapping(principalBase, principalBaseTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            principalBaseTable.AddTypeMapping(principalBaseTableMapping, false);
            tableMappings3.Add(principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalBase.FindProperty("AlternateId")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, principalBase.FindProperty("Id")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalBase.FindProperty("Discriminator")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(enum1Column, principalBase.FindProperty("Enum1")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(enum2Column, principalBase.FindProperty("Enum2")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalBase.FindProperty("FlagsEnum1")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalBase.FindProperty("FlagsEnum2")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(pointColumn0, principalBase.FindProperty("Point")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalBase.FindProperty("RefTypeArray")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalBase.FindProperty("RefTypeEnumerable")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalBase.FindProperty("RefTypeIList")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalBase.FindProperty("RefTypeList")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalBase.FindProperty("ValueTypeArray")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalBase.FindProperty("ValueTypeEnumerable")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalBase.FindProperty("ValueTypeIList")!, principalBaseTableMapping);
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalBase.FindProperty("ValueTypeList")!, principalBaseTableMapping);

            var ownedType = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            ownedType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType", null, relationalModel);
            var ownedColumnBase = new JsonColumnBase("Owned", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase.Columns.Add("Owned", ownedColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeMappingBase = new TableMappingBase<ColumnMappingBase>(ownedType, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeMappingBase, false);
            defaultTableMappings4.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseOwnedOwnedTypeMappingBase);

            var tableMappings4 = new List<TableMapping>();
            ownedType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var principalBaseTableMapping0 = new TableMapping(ownedType, principalBaseTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            principalBaseTable.AddTypeMapping(principalBaseTableMapping0, false);
            tableMappings4.Add(principalBaseTableMapping0);
            principalBaseTable.AddRowInternalForeignKey(ownedType, RelationalModel.GetForeignKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType",
                new[] { "PrincipalBaseId", "PrincipalBaseAlternateId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "Id", "AlternateId" }));

            var principalDerived = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            principalDerived.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0 = new TableMappingBase<ColumnMappingBase>(principalDerived, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0, false);
            defaultTableMappings5.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)alternateIdColumnBase, principalDerived.FindProperty("AlternateId")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, principalDerived.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)discriminatorColumnBase, principalDerived.FindProperty("Discriminator")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum1ColumnBase, principalDerived.FindProperty("Enum1")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enum2ColumnBase, principalDerived.FindProperty("Enum2")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagsEnum1ColumnBase, principalDerived.FindProperty("FlagsEnum1")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)flagsEnum2ColumnBase, principalDerived.FindProperty("FlagsEnum2")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pointColumnBase0, principalDerived.FindProperty("Point")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeArrayColumnBase, principalDerived.FindProperty("RefTypeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeEnumerableColumnBase, principalDerived.FindProperty("RefTypeEnumerable")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeIListColumnBase, principalDerived.FindProperty("RefTypeIList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)refTypeListColumnBase, principalDerived.FindProperty("RefTypeList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeArrayColumnBase, principalDerived.FindProperty("ValueTypeArray")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeEnumerableColumnBase, principalDerived.FindProperty("ValueTypeEnumerable")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeIListColumnBase, principalDerived.FindProperty("ValueTypeIList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueTypeListColumnBase, principalDerived.FindProperty("ValueTypeList")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalBaseMappingBase0);

            var tableMappings5 = new List<TableMapping>();
            principalDerived.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var principalBaseTableMapping1 = new TableMapping(principalDerived, principalBaseTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            principalBaseTable.AddTypeMapping(principalBaseTableMapping1, false);
            tableMappings5.Add(principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(alternateIdColumn, principalDerived.FindProperty("AlternateId")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(idColumn2, principalDerived.FindProperty("Id")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(discriminatorColumn, principalDerived.FindProperty("Discriminator")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(enum1Column, principalDerived.FindProperty("Enum1")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(enum2Column, principalDerived.FindProperty("Enum2")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(flagsEnum1Column, principalDerived.FindProperty("FlagsEnum1")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(flagsEnum2Column, principalDerived.FindProperty("FlagsEnum2")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(pointColumn0, principalDerived.FindProperty("Point")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(refTypeArrayColumn, principalDerived.FindProperty("RefTypeArray")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(refTypeEnumerableColumn, principalDerived.FindProperty("RefTypeEnumerable")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(refTypeIListColumn, principalDerived.FindProperty("RefTypeIList")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(refTypeListColumn, principalDerived.FindProperty("RefTypeList")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(valueTypeArrayColumn, principalDerived.FindProperty("ValueTypeArray")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(valueTypeEnumerableColumn, principalDerived.FindProperty("ValueTypeEnumerable")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(valueTypeIListColumn, principalDerived.FindProperty("ValueTypeIList")!, principalBaseTableMapping1);
            RelationalModel.CreateColumnMapping(valueTypeListColumn, principalDerived.FindProperty("ValueTypeList")!, principalBaseTableMapping1);

            var ownedType0 = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>.ManyOwned#OwnedType")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            ownedType0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>.ManyOwned#OwnedType", null, relationalModel);
            var manyOwnedColumnBase = new JsonColumnBase("ManyOwned", "TEXT", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase.Columns.Add("ManyOwned", manyOwnedColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>.ManyOwned#OwnedType", microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeMappingBase = new TableMappingBase<ColumnMappingBase>(ownedType0, microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase, true);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeMappingBase, false);
            defaultTableMappings6.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelTestBasePrincipalDerivedMicrosoftEntityFrameworkCoreScaffoldingCompiledModelTestBaseDependentBasebyteManyOwnedOwnedTypeMappingBase);

            var tableMappings6 = new List<TableMapping>();
            ownedType0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var principalBaseTableMapping2 = new TableMapping(ownedType0, principalBaseTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            principalBaseTable.AddTypeMapping(principalBaseTableMapping2, true);
            tableMappings6.Add(principalBaseTableMapping2);
            principalBaseTable.AddRowInternalForeignKey(ownedType0, RelationalModel.GetForeignKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>.ManyOwned#OwnedType",
                new[] { "PrincipalDerivedId", "PrincipalDerivedAlternateId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>",
                new[] { "Id", "AlternateId" }));

            var principalBasePrincipalDerivedDependentBasebyte = FindEntityType("PrincipalBasePrincipalDerived<DependentBase<byte?>>")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var principalBasePrincipalDerivedDependentBasebyteTableBase = new TableBase("PrincipalBasePrincipalDerived<DependentBase<byte?>>", null, relationalModel);
            var derivedsAlternateIdColumnBase = new ColumnBase<ColumnMappingBase>("DerivedsAlternateId", "TEXT", principalBasePrincipalDerivedDependentBasebyteTableBase);
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumnBase);
            var derivedsIdColumnBase = new ColumnBase<ColumnMappingBase>("DerivedsId", "INTEGER", principalBasePrincipalDerivedDependentBasebyteTableBase);
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("DerivedsId", derivedsIdColumnBase);
            var principalsAlternateIdColumnBase = new ColumnBase<ColumnMappingBase>("PrincipalsAlternateId", "TEXT", principalBasePrincipalDerivedDependentBasebyteTableBase);
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumnBase);
            var principalsIdColumnBase = new ColumnBase<ColumnMappingBase>("PrincipalsId", "INTEGER", principalBasePrincipalDerivedDependentBasebyteTableBase);
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("PrincipalsId", principalsIdColumnBase);
            var rowidColumnBase = new ColumnBase<ColumnMappingBase>("rowid", "BLOB", principalBasePrincipalDerivedDependentBasebyteTableBase)
            {
                IsNullable = true
            };
            principalBasePrincipalDerivedDependentBasebyteTableBase.Columns.Add("rowid", rowidColumnBase);
            relationalModel.DefaultTables.Add("PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTableBase);
            var principalBasePrincipalDerivedDependentBasebyteMappingBase = new TableMappingBase<ColumnMappingBase>(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTableBase, true);
            principalBasePrincipalDerivedDependentBasebyteTableBase.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteMappingBase, false);
            defaultTableMappings7.Add(principalBasePrincipalDerivedDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)derivedsAlternateIdColumnBase, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId")!, principalBasePrincipalDerivedDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)derivedsIdColumnBase, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId")!, principalBasePrincipalDerivedDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalsAlternateIdColumnBase, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId")!, principalBasePrincipalDerivedDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)principalsIdColumnBase, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId")!, principalBasePrincipalDerivedDependentBasebyteMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)rowidColumnBase, principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid")!, principalBasePrincipalDerivedDependentBasebyteMappingBase);

            var tableMappings7 = new List<TableMapping>();
            principalBasePrincipalDerivedDependentBasebyte.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var principalBasePrincipalDerivedDependentBasebyteTable = new Table("PrincipalBasePrincipalDerived<DependentBase<byte?>>", null, relationalModel);
            var derivedsIdColumn = new Column("DerivedsId", "INTEGER", principalBasePrincipalDerivedDependentBasebyteTable);
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsId", derivedsIdColumn);
            var derivedsAlternateIdColumn = new Column("DerivedsAlternateId", "TEXT", principalBasePrincipalDerivedDependentBasebyteTable);
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("DerivedsAlternateId", derivedsAlternateIdColumn);
            var principalsIdColumn = new Column("PrincipalsId", "INTEGER", principalBasePrincipalDerivedDependentBasebyteTable);
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsId", principalsIdColumn);
            var principalsAlternateIdColumn = new Column("PrincipalsAlternateId", "TEXT", principalBasePrincipalDerivedDependentBasebyteTable);
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("PrincipalsAlternateId", principalsAlternateIdColumn);
            var rowidColumn = new Column("rowid", "BLOB", principalBasePrincipalDerivedDependentBasebyteTable)
            {
                IsNullable = true
            };
            principalBasePrincipalDerivedDependentBasebyteTable.Columns.Add("rowid", rowidColumn);
            var pK_PrincipalBasePrincipalDerivedDependentBasebyte = new UniqueConstraint("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", principalBasePrincipalDerivedDependentBasebyteTable, new[] { derivedsIdColumn, derivedsAlternateIdColumn, principalsIdColumn, principalsAlternateIdColumn });
            principalBasePrincipalDerivedDependentBasebyteTable.PrimaryKey = pK_PrincipalBasePrincipalDerivedDependentBasebyte;
            var pK_PrincipalBasePrincipalDerivedDependentBasebyteUc = RelationalModel.GetKey(this,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                new[] { "DerivedsId", "DerivedsAlternateId", "PrincipalsId", "PrincipalsAlternateId" });
            pK_PrincipalBasePrincipalDerivedDependentBasebyte.MappedKeys.Add(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PrincipalBasePrincipalDerivedDependentBasebyteUc).Add(pK_PrincipalBasePrincipalDerivedDependentBasebyte);
            principalBasePrincipalDerivedDependentBasebyteTable.UniqueConstraints.Add("PK_PrincipalBasePrincipalDerived<DependentBase<byte?>>", pK_PrincipalBasePrincipalDerivedDependentBasebyte);
            var iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId = new TableIndex(
            "IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, new[] { principalsIdColumn, principalsAlternateIdColumn }, false);
            var iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx = RelationalModel.GetIndex(this,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                new[] { "PrincipalsId", "PrincipalsAlternateId" });
            iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId.MappedIndexes.Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateIdIx).Add(iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId);
            principalBasePrincipalDerivedDependentBasebyteTable.Indexes.Add("IX_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalsId_PrincipalsAlternateId", iX_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalsId_PrincipalsAlternateId);
            relationalModel.Tables.Add(("PrincipalBasePrincipalDerived<DependentBase<byte?>>", null), principalBasePrincipalDerivedDependentBasebyteTable);
            var principalBasePrincipalDerivedDependentBasebyteTableMapping = new TableMapping(principalBasePrincipalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyteTable, true);
            principalBasePrincipalDerivedDependentBasebyteTable.AddTypeMapping(principalBasePrincipalDerivedDependentBasebyteTableMapping, false);
            tableMappings7.Add(principalBasePrincipalDerivedDependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(derivedsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsAlternateId")!, principalBasePrincipalDerivedDependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(derivedsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("DerivedsId")!, principalBasePrincipalDerivedDependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(principalsAlternateIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsAlternateId")!, principalBasePrincipalDerivedDependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(principalsIdColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("PrincipalsId")!, principalBasePrincipalDerivedDependentBasebyteTableMapping);
            RelationalModel.CreateColumnMapping(rowidColumn, principalBasePrincipalDerivedDependentBasebyte.FindProperty("rowid")!, principalBasePrincipalDerivedDependentBasebyteTableMapping);
            var fK_DependentBasebyte_PrincipalBase_PrincipalId = new ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalBase_PrincipalId", dependentBasebyteTable, principalBaseTable,
                new[] { principalIdColumn },
                principalBaseTable.FindUniqueConstraint("AK_PrincipalBase_Id")!, ReferentialAction.Cascade);
            var fK_DependentBasebyte_PrincipalBase_PrincipalIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>",
                new[] { "PrincipalId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "Id" });
            fK_DependentBasebyte_PrincipalBase_PrincipalId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalBase_PrincipalIdFk).Add(fK_DependentBasebyte_PrincipalBase_PrincipalId);
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId);
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId);
            var fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId = new ForeignKeyConstraint(
                "FK_DependentBase<byte?>_PrincipalBase_PrincipalId_PrincipalAlternateId", dependentBasebyteTable, principalBaseTable,
                new[] { principalIdColumn, principalAlternateIdColumn },
                principalBaseTable.FindUniqueConstraint("PK")!, ReferentialAction.NoAction);
            var fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>",
                new[] { "PrincipalId", "PrincipalAlternateId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>",
                new[] { "Id", "AlternateId" });
            fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId.MappedForeignKeys.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateIdFk).Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId);
            dependentBasebyteTable.ForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId);
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_DependentBasebyte_PrincipalBase_PrincipalId_PrincipalAlternateId);
            var fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId = new ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalBase_DerivedsId_DerivedsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalBaseTable,
                new[] { derivedsIdColumn, derivedsAlternateIdColumn },
                principalBaseTable.FindUniqueConstraint("PK")!, ReferentialAction.Cascade);
            var fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk = RelationalModel.GetForeignKey(this,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                new[] { "DerivedsId", "DerivedsAlternateId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>",
                new[] { "Id", "AlternateId" });
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId);
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId);
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_DerivedsId_DerivedsAlternateId);
            var fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId = new ForeignKeyConstraint(
                "FK_PrincipalBasePrincipalDerived<DependentBase<byte?>>_PrincipalBase_PrincipalsId_PrincipalsAlternateId", principalBasePrincipalDerivedDependentBasebyteTable, principalBaseTable,
                new[] { principalsIdColumn, principalsAlternateIdColumn },
                principalBaseTable.FindUniqueConstraint("PK")!, ReferentialAction.Cascade);
            var fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk = RelationalModel.GetForeignKey(this,
                "PrincipalBasePrincipalDerived<DependentBase<byte?>>",
                new[] { "PrincipalsId", "PrincipalsAlternateId" },
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                new[] { "Id", "AlternateId" });
            fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId.MappedForeignKeys.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateIdFk).Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId);
            principalBasePrincipalDerivedDependentBasebyteTable.ForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId);
            principalBaseTable.ReferencingForeignKeyConstraints.Add(fK_PrincipalBasePrincipalDerivedDependentBasebyte_PrincipalBase_PrincipalsId_PrincipalsAlternateId);
            return relationalModel.MakeReadOnly();
        }
    }
}
