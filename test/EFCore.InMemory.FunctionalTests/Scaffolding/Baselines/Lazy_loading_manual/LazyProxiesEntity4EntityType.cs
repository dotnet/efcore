// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class LazyProxiesEntity4EntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelInMemoryTest+LazyProxiesEntity4",
                typeof(CompiledModelInMemoryTest.LazyProxiesEntity4),
                baseEntityType,
                propertyCount: 4,
                navigationCount: 1,
                servicePropertyCount: 1,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                int (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Id(entity),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Id(entity) == 0,
                int (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Id(instance),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Id(instance) == 0);
            id.SetSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, int value) => LazyProxiesEntity4UnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, int value) => LazyProxiesEntity4UnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                int (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Id(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                int (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Id(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var content = runtimeEntityType.AddProperty(
                "Content",
                typeof(string),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetProperty("Content", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetField("<Content>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            content.SetGetter(
                string (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Content(entity),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Content(entity) == null,
                string (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Content(instance),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Content(instance) == null);
            content.SetSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, string value) => LazyProxiesEntity4UnsafeAccessors.Content(entity) = value);
            content.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, string value) => LazyProxiesEntity4UnsafeAccessors.Content(entity) = value);
            content.SetAccessors(
                string (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Content(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                string (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Content(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(content, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(content),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            content.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            content.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var referenceNavigationId = runtimeEntityType.AddProperty(
                "ReferenceNavigationId",
                typeof(int),
                sentinel: 0);
            referenceNavigationId.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(2) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(2) && entry.ReadShadowValue<int>(0) == 0 ? entry.ReadTemporaryValue<int>(0) : entry.ReadShadowValue<int>(0))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(0),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(referenceNavigationId, 2),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(referenceNavigationId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            referenceNavigationId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: 0,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            referenceNavigationId.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            referenceNavigationId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(referenceNavigationId));

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            title.SetGetter(
                string (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Title(entity),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors.Title(entity) == null,
                string (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Title(instance),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors.Title(instance) == null);
            title.SetSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, string value) => LazyProxiesEntity4UnsafeAccessors.Title(entity) = value);
            title.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, string value) => LazyProxiesEntity4UnsafeAccessors.Title(entity) = value);
            title.SetAccessors(
                string (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Title(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                string (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors.Title(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(title, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(title),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            title.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            title.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(Action<object, string>));
            lazyLoader.SetPropertyIndexes(
                index: -1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ReferenceNavigationId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var referenceNavigation = declaringEntityType.AddNavigation("ReferenceNavigation",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompiledModelInMemoryTest.LazyProxiesEntity3),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetProperty("ReferenceNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity4).GetField("_referenceNavigation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            referenceNavigation.SetGetter(
                CompiledModelInMemoryTest.LazyProxiesEntity3 (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(entity),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 entity) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(entity) == null,
                CompiledModelInMemoryTest.LazyProxiesEntity3 (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(instance),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity4 instance) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(instance) == null);
            referenceNavigation.SetSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, CompiledModelInMemoryTest.LazyProxiesEntity3 value) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(entity) = value);
            referenceNavigation.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity4 entity, CompiledModelInMemoryTest.LazyProxiesEntity3 value) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(entity) = value);
            referenceNavigation.SetAccessors(
                CompiledModelInMemoryTest.LazyProxiesEntity3 (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                CompiledModelInMemoryTest.LazyProxiesEntity3 (InternalEntityEntry entry) => LazyProxiesEntity4UnsafeAccessors._referenceNavigation(((CompiledModelInMemoryTest.LazyProxiesEntity4)(entry.Entity))),
                null,
                CompiledModelInMemoryTest.LazyProxiesEntity3 (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelInMemoryTest.LazyProxiesEntity3>(referenceNavigation),
                null);
            referenceNavigation.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            var collectionNavigation = principalEntityType.AddNavigation("CollectionNavigation",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity3).GetProperty("CollectionNavigation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyProxiesEntity3).GetField("_collectionNavigation", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            collectionNavigation.SetGetter(
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (CompiledModelInMemoryTest.LazyProxiesEntity3 entity) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity3 entity) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity) == null,
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (CompiledModelInMemoryTest.LazyProxiesEntity3 instance) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(instance),
                bool (CompiledModelInMemoryTest.LazyProxiesEntity3 instance) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(instance) == null);
            collectionNavigation.SetSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity3 entity, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> value) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity) = value);
            collectionNavigation.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyProxiesEntity3 entity, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> value) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity) = value);
            collectionNavigation.SetAccessors(
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (InternalEntityEntry entry) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(((CompiledModelInMemoryTest.LazyProxiesEntity3)(entry.Entity))),
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (InternalEntityEntry entry) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(((CompiledModelInMemoryTest.LazyProxiesEntity3)(entry.Entity))),
                null,
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>>(collectionNavigation),
                null);
            collectionNavigation.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            collectionNavigation.SetCollectionAccessor<CompiledModelInMemoryTest.LazyProxiesEntity3, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>, CompiledModelInMemoryTest.LazyProxiesEntity4>(
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (CompiledModelInMemoryTest.LazyProxiesEntity3 entity) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity),
                (CompiledModelInMemoryTest.LazyProxiesEntity3 entity, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> collection) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity) = ((ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>)(collection)),
                (CompiledModelInMemoryTest.LazyProxiesEntity3 entity, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> collection) => LazyProxiesEntity3UnsafeAccessors._collectionNavigation(entity) = ((ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>)(collection)),
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> (CompiledModelInMemoryTest.LazyProxiesEntity3 entity, Action<CompiledModelInMemoryTest.LazyProxiesEntity3, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<CompiledModelInMemoryTest.LazyProxiesEntity3, ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>, CompiledModelInMemoryTest.LazyProxiesEntity4>(entity, setter),
                ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4> () => ((ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>)(((ICollection<CompiledModelInMemoryTest.LazyProxiesEntity4>)(new HashSet<CompiledModelInMemoryTest.LazyProxiesEntity4>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var content = runtimeEntityType.FindProperty("Content")!;
            var referenceNavigationId = runtimeEntityType.FindProperty("ReferenceNavigationId")!;
            var title = runtimeEntityType.FindProperty("Title")!;
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            var referenceNavigation = runtimeEntityType.FindNavigation("ReferenceNavigation")!;
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CompiledModelInMemoryTest.LazyProxiesEntity4)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string, int, string>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(content) == null ? null : ((ValueComparer<string>)(((IProperty)content).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(content))), ((ValueComparer<int>)(((IProperty)referenceNavigationId).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(referenceNavigationId)), (source.GetCurrentValue<string>(title) == null ? null : ((ValueComparer<string>)(((IProperty)title).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(title))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int>(((ValueComparer<int>)(((IProperty)referenceNavigationId).GetValueComparer())).Snapshot(default(int))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int>(default(int)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<int>((source.ContainsKey("ReferenceNavigationId") ? ((int)(source["ReferenceNavigationId"])) : 0)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int>(default(int)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CompiledModelInMemoryTest.LazyProxiesEntity4)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, object>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)(((IProperty)referenceNavigationId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(referenceNavigationId)), LazyProxiesEntity4UnsafeAccessors._referenceNavigation(entity))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 1,
                relationshipCount: 3,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
