// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity;
using Microsoft.EntityFrameworkCore.ValueGeneration;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Scaffolding
{
    internal partial class IdentityUserEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.TestModels.AspNetIdentity.IdentityUser",
                typeof(IdentityUser),
                baseEntityType,
                discriminatorProperty: "Discriminator",
                discriminatorValue: "IdentityUser",
                derivedTypesCount: 1,
                propertyCount: 16,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                (IdentityUser entity) => ReadId(entity),
                (IdentityUser entity) => ReadId(entity) == null,
                (IdentityUser instance) => ReadId(instance),
                (IdentityUser instance) => ReadId(instance) == null);
            id.SetSetter(
                (IdentityUser entity, string value) => WriteId(entity, value));
            id.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteId(entity, value));
            id.SetAccessors(
                (InternalEntityEntry entry) => ReadId((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadId((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(id));

            var accessFailedCount = runtimeEntityType.AddProperty(
                "AccessFailedCount",
                typeof(int),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("AccessFailedCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<AccessFailedCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            accessFailedCount.SetGetter(
                (IdentityUser entity) => ReadAccessFailedCount(entity),
                (IdentityUser entity) => ReadAccessFailedCount(entity) == 0,
                (IdentityUser instance) => ReadAccessFailedCount(instance),
                (IdentityUser instance) => ReadAccessFailedCount(instance) == 0);
            accessFailedCount.SetSetter(
                (IdentityUser entity, int value) => WriteAccessFailedCount(entity, value));
            accessFailedCount.SetMaterializationSetter(
                (IdentityUser entity, int value) => WriteAccessFailedCount(entity, value));
            accessFailedCount.SetAccessors(
                (InternalEntityEntry entry) => ReadAccessFailedCount((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadAccessFailedCount((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(accessFailedCount, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(accessFailedCount),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            accessFailedCount.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            accessFailedCount.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);

            var concurrencyStamp = runtimeEntityType.AddProperty(
                "ConcurrencyStamp",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("ConcurrencyStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<ConcurrencyStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            concurrencyStamp.SetGetter(
                (IdentityUser entity) => ReadConcurrencyStamp(entity),
                (IdentityUser entity) => ReadConcurrencyStamp(entity) == null,
                (IdentityUser instance) => ReadConcurrencyStamp(instance),
                (IdentityUser instance) => ReadConcurrencyStamp(instance) == null);
            concurrencyStamp.SetSetter(
                (IdentityUser entity, string value) => WriteConcurrencyStamp(entity, value));
            concurrencyStamp.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteConcurrencyStamp(entity, value));
            concurrencyStamp.SetAccessors(
                (InternalEntityEntry entry) => ReadConcurrencyStamp((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadConcurrencyStamp((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(concurrencyStamp, 2),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(concurrencyStamp),
                (ValueBuffer valueBuffer) => valueBuffer[2]);
            concurrencyStamp.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            concurrencyStamp.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var discriminator = runtimeEntityType.AddProperty(
                "Discriminator",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create);
            discriminator.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: 0,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            discriminator.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var email = runtimeEntityType.AddProperty(
                "Email",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("Email", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<Email>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            email.SetGetter(
                (IdentityUser entity) => ReadEmail(entity),
                (IdentityUser entity) => ReadEmail(entity) == null,
                (IdentityUser instance) => ReadEmail(instance),
                (IdentityUser instance) => ReadEmail(instance) == null);
            email.SetSetter(
                (IdentityUser entity, string value) => WriteEmail(entity, value));
            email.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteEmail(entity, value));
            email.SetAccessors(
                (InternalEntityEntry entry) => ReadEmail((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadEmail((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(email, 4),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(email),
                (ValueBuffer valueBuffer) => valueBuffer[4]);
            email.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            email.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var emailConfirmed = runtimeEntityType.AddProperty(
                "EmailConfirmed",
                typeof(bool),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("EmailConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<EmailConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            emailConfirmed.SetGetter(
                (IdentityUser entity) => ReadEmailConfirmed(entity),
                (IdentityUser entity) => ReadEmailConfirmed(entity) == false,
                (IdentityUser instance) => ReadEmailConfirmed(instance),
                (IdentityUser instance) => ReadEmailConfirmed(instance) == false);
            emailConfirmed.SetSetter(
                (IdentityUser entity, bool value) => WriteEmailConfirmed(entity, value));
            emailConfirmed.SetMaterializationSetter(
                (IdentityUser entity, bool value) => WriteEmailConfirmed(entity, value));
            emailConfirmed.SetAccessors(
                (InternalEntityEntry entry) => ReadEmailConfirmed((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadEmailConfirmed((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(emailConfirmed, 5),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(emailConfirmed),
                (ValueBuffer valueBuffer) => valueBuffer[5]);
            emailConfirmed.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            emailConfirmed.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                clrType: typeof(bool),
                jsonValueReaderWriter: JsonBoolReaderWriter.Instance);

            var lockoutEnabled = runtimeEntityType.AddProperty(
                "LockoutEnabled",
                typeof(bool),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("LockoutEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<LockoutEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            lockoutEnabled.SetGetter(
                (IdentityUser entity) => ReadLockoutEnabled(entity),
                (IdentityUser entity) => ReadLockoutEnabled(entity) == false,
                (IdentityUser instance) => ReadLockoutEnabled(instance),
                (IdentityUser instance) => ReadLockoutEnabled(instance) == false);
            lockoutEnabled.SetSetter(
                (IdentityUser entity, bool value) => WriteLockoutEnabled(entity, value));
            lockoutEnabled.SetMaterializationSetter(
                (IdentityUser entity, bool value) => WriteLockoutEnabled(entity, value));
            lockoutEnabled.SetAccessors(
                (InternalEntityEntry entry) => ReadLockoutEnabled((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadLockoutEnabled((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(lockoutEnabled, 6),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(lockoutEnabled),
                (ValueBuffer valueBuffer) => valueBuffer[6]);
            lockoutEnabled.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lockoutEnabled.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                clrType: typeof(bool),
                jsonValueReaderWriter: JsonBoolReaderWriter.Instance);

            var lockoutEnd = runtimeEntityType.AddProperty(
                "LockoutEnd",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("LockoutEnd", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<LockoutEnd>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lockoutEnd.SetGetter(
                (IdentityUser entity) => ReadLockoutEnd(entity),
                (IdentityUser entity) => !ReadLockoutEnd(entity).HasValue,
                (IdentityUser instance) => ReadLockoutEnd(instance),
                (IdentityUser instance) => !ReadLockoutEnd(instance).HasValue);
            lockoutEnd.SetSetter(
                (IdentityUser entity, Nullable<DateTimeOffset> value) => WriteLockoutEnd(entity, value));
            lockoutEnd.SetMaterializationSetter(
                (IdentityUser entity, Nullable<DateTimeOffset> value) => WriteLockoutEnd(entity, value));
            lockoutEnd.SetAccessors(
                (InternalEntityEntry entry) => ReadLockoutEnd((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadLockoutEnd((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<DateTimeOffset>>(lockoutEnd, 7),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<DateTimeOffset>>(lockoutEnd),
                (ValueBuffer valueBuffer) => valueBuffer[7]);
            lockoutEnd.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            lockoutEnd.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset?>(
                    (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
                keyComparer: new ValueComparer<DateTimeOffset?>(
                    (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
                providerValueComparer: new ValueComparer<DateTimeOffset?>(
                    (Nullable<DateTimeOffset> v1, Nullable<DateTimeOffset> v2) => v1.HasValue && v2.HasValue && ((DateTimeOffset)v1).EqualsExact((DateTimeOffset)v2) || !v1.HasValue && !v2.HasValue,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? ((DateTimeOffset)v).GetHashCode() : 0,
                    (Nullable<DateTimeOffset> v) => v.HasValue ? (Nullable<DateTimeOffset>)(DateTimeOffset)v : default(Nullable<DateTimeOffset>)),
                clrType: typeof(DateTimeOffset),
                jsonValueReaderWriter: JsonDateTimeOffsetReaderWriter.Instance);

            var normalizedEmail = runtimeEntityType.AddProperty(
                "NormalizedEmail",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("NormalizedEmail", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<NormalizedEmail>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            normalizedEmail.SetGetter(
                (IdentityUser entity) => ReadNormalizedEmail(entity),
                (IdentityUser entity) => ReadNormalizedEmail(entity) == null,
                (IdentityUser instance) => ReadNormalizedEmail(instance),
                (IdentityUser instance) => ReadNormalizedEmail(instance) == null);
            normalizedEmail.SetSetter(
                (IdentityUser entity, string value) => WriteNormalizedEmail(entity, value));
            normalizedEmail.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteNormalizedEmail(entity, value));
            normalizedEmail.SetAccessors(
                (InternalEntityEntry entry) => ReadNormalizedEmail((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadNormalizedEmail((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(normalizedEmail, 8),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(normalizedEmail),
                (ValueBuffer valueBuffer) => valueBuffer[8]);
            normalizedEmail.SetPropertyIndexes(
                index: 8,
                originalValueIndex: 8,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            normalizedEmail.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var normalizedUserName = runtimeEntityType.AddProperty(
                "NormalizedUserName",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("NormalizedUserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<NormalizedUserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            normalizedUserName.SetGetter(
                (IdentityUser entity) => ReadNormalizedUserName(entity),
                (IdentityUser entity) => ReadNormalizedUserName(entity) == null,
                (IdentityUser instance) => ReadNormalizedUserName(instance),
                (IdentityUser instance) => ReadNormalizedUserName(instance) == null);
            normalizedUserName.SetSetter(
                (IdentityUser entity, string value) => WriteNormalizedUserName(entity, value));
            normalizedUserName.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteNormalizedUserName(entity, value));
            normalizedUserName.SetAccessors(
                (InternalEntityEntry entry) => ReadNormalizedUserName((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadNormalizedUserName((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(normalizedUserName, 9),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(normalizedUserName),
                (ValueBuffer valueBuffer) => valueBuffer[9]);
            normalizedUserName.SetPropertyIndexes(
                index: 9,
                originalValueIndex: 9,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            normalizedUserName.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var passwordHash = runtimeEntityType.AddProperty(
                "PasswordHash",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("PasswordHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<PasswordHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            passwordHash.SetGetter(
                (IdentityUser entity) => ReadPasswordHash(entity),
                (IdentityUser entity) => ReadPasswordHash(entity) == null,
                (IdentityUser instance) => ReadPasswordHash(instance),
                (IdentityUser instance) => ReadPasswordHash(instance) == null);
            passwordHash.SetSetter(
                (IdentityUser entity, string value) => WritePasswordHash(entity, value));
            passwordHash.SetMaterializationSetter(
                (IdentityUser entity, string value) => WritePasswordHash(entity, value));
            passwordHash.SetAccessors(
                (InternalEntityEntry entry) => ReadPasswordHash((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadPasswordHash((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(passwordHash, 10),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(passwordHash),
                (ValueBuffer valueBuffer) => valueBuffer[10]);
            passwordHash.SetPropertyIndexes(
                index: 10,
                originalValueIndex: 10,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            passwordHash.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var phoneNumber = runtimeEntityType.AddProperty(
                "PhoneNumber",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("PhoneNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<PhoneNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            phoneNumber.SetGetter(
                (IdentityUser entity) => ReadPhoneNumber(entity),
                (IdentityUser entity) => ReadPhoneNumber(entity) == null,
                (IdentityUser instance) => ReadPhoneNumber(instance),
                (IdentityUser instance) => ReadPhoneNumber(instance) == null);
            phoneNumber.SetSetter(
                (IdentityUser entity, string value) => WritePhoneNumber(entity, value));
            phoneNumber.SetMaterializationSetter(
                (IdentityUser entity, string value) => WritePhoneNumber(entity, value));
            phoneNumber.SetAccessors(
                (InternalEntityEntry entry) => ReadPhoneNumber((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadPhoneNumber((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(phoneNumber, 11),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(phoneNumber),
                (ValueBuffer valueBuffer) => valueBuffer[11]);
            phoneNumber.SetPropertyIndexes(
                index: 11,
                originalValueIndex: 11,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            phoneNumber.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var phoneNumberConfirmed = runtimeEntityType.AddProperty(
                "PhoneNumberConfirmed",
                typeof(bool),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("PhoneNumberConfirmed", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<PhoneNumberConfirmed>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            phoneNumberConfirmed.SetGetter(
                (IdentityUser entity) => ReadPhoneNumberConfirmed(entity),
                (IdentityUser entity) => ReadPhoneNumberConfirmed(entity) == false,
                (IdentityUser instance) => ReadPhoneNumberConfirmed(instance),
                (IdentityUser instance) => ReadPhoneNumberConfirmed(instance) == false);
            phoneNumberConfirmed.SetSetter(
                (IdentityUser entity, bool value) => WritePhoneNumberConfirmed(entity, value));
            phoneNumberConfirmed.SetMaterializationSetter(
                (IdentityUser entity, bool value) => WritePhoneNumberConfirmed(entity, value));
            phoneNumberConfirmed.SetAccessors(
                (InternalEntityEntry entry) => ReadPhoneNumberConfirmed((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadPhoneNumberConfirmed((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(phoneNumberConfirmed, 12),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(phoneNumberConfirmed),
                (ValueBuffer valueBuffer) => valueBuffer[12]);
            phoneNumberConfirmed.SetPropertyIndexes(
                index: 12,
                originalValueIndex: 12,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            phoneNumberConfirmed.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                clrType: typeof(bool),
                jsonValueReaderWriter: JsonBoolReaderWriter.Instance);

            var securityStamp = runtimeEntityType.AddProperty(
                "SecurityStamp",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("SecurityStamp", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<SecurityStamp>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            securityStamp.SetGetter(
                (IdentityUser entity) => ReadSecurityStamp(entity),
                (IdentityUser entity) => ReadSecurityStamp(entity) == null,
                (IdentityUser instance) => ReadSecurityStamp(instance),
                (IdentityUser instance) => ReadSecurityStamp(instance) == null);
            securityStamp.SetSetter(
                (IdentityUser entity, string value) => WriteSecurityStamp(entity, value));
            securityStamp.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteSecurityStamp(entity, value));
            securityStamp.SetAccessors(
                (InternalEntityEntry entry) => ReadSecurityStamp((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadSecurityStamp((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(securityStamp, 13),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(securityStamp),
                (ValueBuffer valueBuffer) => valueBuffer[13]);
            securityStamp.SetPropertyIndexes(
                index: 13,
                originalValueIndex: 13,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            securityStamp.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var twoFactorEnabled = runtimeEntityType.AddProperty(
                "TwoFactorEnabled",
                typeof(bool),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("TwoFactorEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<TwoFactorEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            twoFactorEnabled.SetGetter(
                (IdentityUser entity) => ReadTwoFactorEnabled(entity),
                (IdentityUser entity) => ReadTwoFactorEnabled(entity) == false,
                (IdentityUser instance) => ReadTwoFactorEnabled(instance),
                (IdentityUser instance) => ReadTwoFactorEnabled(instance) == false);
            twoFactorEnabled.SetSetter(
                (IdentityUser entity, bool value) => WriteTwoFactorEnabled(entity, value));
            twoFactorEnabled.SetMaterializationSetter(
                (IdentityUser entity, bool value) => WriteTwoFactorEnabled(entity, value));
            twoFactorEnabled.SetAccessors(
                (InternalEntityEntry entry) => ReadTwoFactorEnabled((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadTwoFactorEnabled((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(twoFactorEnabled, 14),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(twoFactorEnabled),
                (ValueBuffer valueBuffer) => valueBuffer[14]);
            twoFactorEnabled.SetPropertyIndexes(
                index: 14,
                originalValueIndex: 14,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            twoFactorEnabled.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                clrType: typeof(bool),
                jsonValueReaderWriter: JsonBoolReaderWriter.Instance);

            var userName = runtimeEntityType.AddProperty(
                "UserName",
                typeof(string),
                propertyInfo: typeof(IdentityUser<string>).GetProperty("UserName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(IdentityUser<string>).GetField("<UserName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            userName.SetGetter(
                (IdentityUser entity) => ReadUserName(entity),
                (IdentityUser entity) => ReadUserName(entity) == null,
                (IdentityUser instance) => ReadUserName(instance),
                (IdentityUser instance) => ReadUserName(instance) == null);
            userName.SetSetter(
                (IdentityUser entity, string value) => WriteUserName(entity, value));
            userName.SetMaterializationSetter(
                (IdentityUser entity, string value) => WriteUserName(entity, value));
            userName.SetAccessors(
                (InternalEntityEntry entry) => ReadUserName((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => ReadUserName((IdentityUser)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(userName, 15),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(userName),
                (ValueBuffer valueBuffer) => valueBuffer[15]);
            userName.SetPropertyIndexes(
                index: 15,
                originalValueIndex: 15,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            userName.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var accessFailedCount = runtimeEntityType.FindProperty("AccessFailedCount")!;
            var concurrencyStamp = runtimeEntityType.FindProperty("ConcurrencyStamp")!;
            var discriminator = runtimeEntityType.FindProperty("Discriminator")!;
            var email = runtimeEntityType.FindProperty("Email")!;
            var emailConfirmed = runtimeEntityType.FindProperty("EmailConfirmed")!;
            var lockoutEnabled = runtimeEntityType.FindProperty("LockoutEnabled")!;
            var lockoutEnd = runtimeEntityType.FindProperty("LockoutEnd")!;
            var normalizedEmail = runtimeEntityType.FindProperty("NormalizedEmail")!;
            var normalizedUserName = runtimeEntityType.FindProperty("NormalizedUserName")!;
            var passwordHash = runtimeEntityType.FindProperty("PasswordHash")!;
            var phoneNumber = runtimeEntityType.FindProperty("PhoneNumber")!;
            var phoneNumberConfirmed = runtimeEntityType.FindProperty("PhoneNumberConfirmed")!;
            var securityStamp = runtimeEntityType.FindProperty("SecurityStamp")!;
            var twoFactorEnabled = runtimeEntityType.FindProperty("TwoFactorEnabled")!;
            var userName = runtimeEntityType.FindProperty("UserName")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (IdentityUser)source.Entity;
                    return (ISnapshot)new Snapshot<string, int, string, string, string, bool, bool, Nullable<DateTimeOffset>, string, string, string, string, bool, string, bool, string>(source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(id)), ((ValueComparer<int>)accessFailedCount.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(accessFailedCount)), source.GetCurrentValue<string>(concurrencyStamp) == null ? null : ((ValueComparer<string>)concurrencyStamp.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(concurrencyStamp)), source.GetCurrentValue<string>(discriminator) == null ? null : ((ValueComparer<string>)discriminator.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(discriminator)), source.GetCurrentValue<string>(email) == null ? null : ((ValueComparer<string>)email.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(email)), ((ValueComparer<bool>)emailConfirmed.GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(emailConfirmed)), ((ValueComparer<bool>)lockoutEnabled.GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(lockoutEnabled)), source.GetCurrentValue<Nullable<DateTimeOffset>>(lockoutEnd) == null ? null : ((ValueComparer<Nullable<DateTimeOffset>>)lockoutEnd.GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<DateTimeOffset>>(lockoutEnd)), source.GetCurrentValue<string>(normalizedEmail) == null ? null : ((ValueComparer<string>)normalizedEmail.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(normalizedEmail)), source.GetCurrentValue<string>(normalizedUserName) == null ? null : ((ValueComparer<string>)normalizedUserName.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(normalizedUserName)), source.GetCurrentValue<string>(passwordHash) == null ? null : ((ValueComparer<string>)passwordHash.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(passwordHash)), source.GetCurrentValue<string>(phoneNumber) == null ? null : ((ValueComparer<string>)phoneNumber.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(phoneNumber)), ((ValueComparer<bool>)phoneNumberConfirmed.GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(phoneNumberConfirmed)), source.GetCurrentValue<string>(securityStamp) == null ? null : ((ValueComparer<string>)securityStamp.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(securityStamp)), ((ValueComparer<bool>)twoFactorEnabled.GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(twoFactorEnabled)), source.GetCurrentValue<string>(userName) == null ? null : ((ValueComparer<string>)userName.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(userName)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => (ISnapshot)new Snapshot<string>(source.ContainsKey("Discriminator") ? (string)source["Discriminator"] : null));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => (ISnapshot)new Snapshot<string>(default(string)));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (IdentityUser)source.Entity;
                    return (ISnapshot)new Snapshot<string>(source.GetCurrentValue<string>(id) == null ? null : ((ValueComparer<string>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<string>(id)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 16,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 16,
                shadowCount: 1,
                relationshipCount: 1,
                storeGeneratedCount: 0);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        extern static ref string GetId(IdentityUser @this);

        public static string ReadId(IdentityUser @this)
            => GetId(@this);

        public static void WriteId(IdentityUser @this, string value)
            => GetId(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<AccessFailedCount>k__BackingField")]
        extern static ref int GetAccessFailedCount(IdentityUser @this);

        public static int ReadAccessFailedCount(IdentityUser @this)
            => GetAccessFailedCount(@this);

        public static void WriteAccessFailedCount(IdentityUser @this, int value)
            => GetAccessFailedCount(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<ConcurrencyStamp>k__BackingField")]
        extern static ref string GetConcurrencyStamp(IdentityUser @this);

        public static string ReadConcurrencyStamp(IdentityUser @this)
            => GetConcurrencyStamp(@this);

        public static void WriteConcurrencyStamp(IdentityUser @this, string value)
            => GetConcurrencyStamp(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Email>k__BackingField")]
        extern static ref string GetEmail(IdentityUser @this);

        public static string ReadEmail(IdentityUser @this)
            => GetEmail(@this);

        public static void WriteEmail(IdentityUser @this, string value)
            => GetEmail(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EmailConfirmed>k__BackingField")]
        extern static ref bool GetEmailConfirmed(IdentityUser @this);

        public static bool ReadEmailConfirmed(IdentityUser @this)
            => GetEmailConfirmed(@this);

        public static void WriteEmailConfirmed(IdentityUser @this, bool value)
            => GetEmailConfirmed(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<LockoutEnabled>k__BackingField")]
        extern static ref bool GetLockoutEnabled(IdentityUser @this);

        public static bool ReadLockoutEnabled(IdentityUser @this)
            => GetLockoutEnabled(@this);

        public static void WriteLockoutEnabled(IdentityUser @this, bool value)
            => GetLockoutEnabled(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<LockoutEnd>k__BackingField")]
        extern static ref DateTimeOffset? GetLockoutEnd(IdentityUser @this);

        public static DateTimeOffset? ReadLockoutEnd(IdentityUser @this)
            => GetLockoutEnd(@this);

        public static void WriteLockoutEnd(IdentityUser @this, DateTimeOffset? value)
            => GetLockoutEnd(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NormalizedEmail>k__BackingField")]
        extern static ref string GetNormalizedEmail(IdentityUser @this);

        public static string ReadNormalizedEmail(IdentityUser @this)
            => GetNormalizedEmail(@this);

        public static void WriteNormalizedEmail(IdentityUser @this, string value)
            => GetNormalizedEmail(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NormalizedUserName>k__BackingField")]
        extern static ref string GetNormalizedUserName(IdentityUser @this);

        public static string ReadNormalizedUserName(IdentityUser @this)
            => GetNormalizedUserName(@this);

        public static void WriteNormalizedUserName(IdentityUser @this, string value)
            => GetNormalizedUserName(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PasswordHash>k__BackingField")]
        extern static ref string GetPasswordHash(IdentityUser @this);

        public static string ReadPasswordHash(IdentityUser @this)
            => GetPasswordHash(@this);

        public static void WritePasswordHash(IdentityUser @this, string value)
            => GetPasswordHash(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhoneNumber>k__BackingField")]
        extern static ref string GetPhoneNumber(IdentityUser @this);

        public static string ReadPhoneNumber(IdentityUser @this)
            => GetPhoneNumber(@this);

        public static void WritePhoneNumber(IdentityUser @this, string value)
            => GetPhoneNumber(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhoneNumberConfirmed>k__BackingField")]
        extern static ref bool GetPhoneNumberConfirmed(IdentityUser @this);

        public static bool ReadPhoneNumberConfirmed(IdentityUser @this)
            => GetPhoneNumberConfirmed(@this);

        public static void WritePhoneNumberConfirmed(IdentityUser @this, bool value)
            => GetPhoneNumberConfirmed(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<SecurityStamp>k__BackingField")]
        extern static ref string GetSecurityStamp(IdentityUser @this);

        public static string ReadSecurityStamp(IdentityUser @this)
            => GetSecurityStamp(@this);

        public static void WriteSecurityStamp(IdentityUser @this, string value)
            => GetSecurityStamp(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TwoFactorEnabled>k__BackingField")]
        extern static ref bool GetTwoFactorEnabled(IdentityUser @this);

        public static bool ReadTwoFactorEnabled(IdentityUser @this)
            => GetTwoFactorEnabled(@this);

        public static void WriteTwoFactorEnabled(IdentityUser @this, bool value)
            => GetTwoFactorEnabled(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UserName>k__BackingField")]
        extern static ref string GetUserName(IdentityUser @this);

        public static string ReadUserName(IdentityUser @this)
            => GetUserName(@this);

        public static void WriteUserName(IdentityUser @this, string value)
            => GetUserName(@this) = value;
    }
}
