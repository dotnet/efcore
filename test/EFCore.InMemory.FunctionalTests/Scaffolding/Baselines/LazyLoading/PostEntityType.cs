// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Proxies.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class PostEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Post",
                typeof(CompiledModelTestBase.Post),
                baseEntityType,
                propertyCount: 4,
                navigationCount: 1,
                servicePropertyCount: 1,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.Post).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Post).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(entity),
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(entity) == 0,
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(instance),
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(instance) == 0);
            id.SetSetter(
                (CompiledModelTestBase.Post entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(entity) = value);
            id.SetMaterializationSetter(
                (CompiledModelTestBase.Post entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(entity) = value);
            id.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var blogId = runtimeEntityType.AddProperty(
                "BlogId",
                typeof(int),
                sentinel: 0);
            blogId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 0,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            blogId.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            blogId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(blogId));

            var content = runtimeEntityType.AddProperty(
                "Content",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.Post).GetProperty("Content", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Post).GetField("<Content>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            content.SetGetter(
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(entity),
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(entity) == null,
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(instance),
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(instance) == null);
            content.SetSetter(
                (CompiledModelTestBase.Post entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(entity) = value);
            content.SetMaterializationSetter(
                (CompiledModelTestBase.Post entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(entity) = value);
            content.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(content, 2),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(content),
                (ValueBuffer valueBuffer) => valueBuffer[2]);
            content.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            content.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.Post).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Post).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            title.SetGetter(
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(entity),
                (CompiledModelTestBase.Post entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(entity) == null,
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(instance),
                (CompiledModelTestBase.Post instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(instance) == null);
            title.SetSetter(
                (CompiledModelTestBase.Post entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(entity) = value);
            title.SetMaterializationSetter(
                (CompiledModelTestBase.Post entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(entity) = value);
            title.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(title, 3),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(title),
                (ValueBuffer valueBuffer) => valueBuffer[3]);
            title.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            title.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(IProxyLazyLoader).GetProperty("LazyLoader", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));
            lazyLoader.SetPropertyIndexes(
                index: -1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { blogId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("BlogId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var blog = declaringEntityType.AddNavigation("Blog",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompiledModelTestBase.Blog),
                propertyInfo: typeof(CompiledModelTestBase.Post).GetProperty("Blog", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Post).GetField("<Blog>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            blog.SetGetter(
                (CompiledModelTestBase.Post entity) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(entity),
                (CompiledModelTestBase.Post entity) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(entity) == null,
                (CompiledModelTestBase.Post instance) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(instance),
                (CompiledModelTestBase.Post instance) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(instance) == null);
            blog.SetSetter(
                (CompiledModelTestBase.Post entity, CompiledModelTestBase.Blog value) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(entity) = value);
            blog.SetMaterializationSetter(
                (CompiledModelTestBase.Post entity, CompiledModelTestBase.Blog value) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(entity) = value);
            blog.SetAccessors(
                (InternalEntityEntry entry) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog((CompiledModelTestBase.Post)entry.Entity),
                (InternalEntityEntry entry) => PostEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog((CompiledModelTestBase.Post)entry.Entity),
                null,
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Blog>(blog),
                null);
            blog.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            var posts = principalEntityType.AddNavigation("Posts",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CompiledModelTestBase.Post>),
                propertyInfo: typeof(CompiledModelTestBase.Blog).GetProperty("Posts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Blog).GetField("_posts", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            posts.SetGetter(
                (CompiledModelTestBase.Blog entity) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity),
                (CompiledModelTestBase.Blog entity) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity) == null,
                (CompiledModelTestBase.Blog instance) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(instance),
                (CompiledModelTestBase.Blog instance) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(instance) == null);
            posts.SetSetter(
                (CompiledModelTestBase.Blog entity, ICollection<CompiledModelTestBase.Post> value) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity) = value);
            posts.SetMaterializationSetter(
                (CompiledModelTestBase.Blog entity, ICollection<CompiledModelTestBase.Post> value) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity) = value);
            posts.SetAccessors(
                (InternalEntityEntry entry) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts((CompiledModelTestBase.Blog)entry.Entity),
                (InternalEntityEntry entry) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts((CompiledModelTestBase.Blog)entry.Entity),
                null,
                (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<CompiledModelTestBase.Post>>(posts),
                null);
            posts.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            posts.SetCollectionAccessor<CompiledModelTestBase.Blog, ICollection<CompiledModelTestBase.Post>, CompiledModelTestBase.Post>(
                (CompiledModelTestBase.Blog entity) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity),
                (CompiledModelTestBase.Blog entity, ICollection<CompiledModelTestBase.Post> collection) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity) = (ICollection<CompiledModelTestBase.Post>)collection,
                (CompiledModelTestBase.Blog entity, ICollection<CompiledModelTestBase.Post> collection) => BlogEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity) = (ICollection<CompiledModelTestBase.Post>)collection,
                (CompiledModelTestBase.Blog entity, Action<CompiledModelTestBase.Blog, ICollection<CompiledModelTestBase.Post>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<CompiledModelTestBase.Blog, ICollection<CompiledModelTestBase.Post>, CompiledModelTestBase.Post>(entity, setter),
                () => (ICollection<CompiledModelTestBase.Post>)(ICollection<CompiledModelTestBase.Post>)new HashSet<CompiledModelTestBase.Post>(ReferenceEqualityComparer.Instance));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var blogId = runtimeEntityType.FindProperty("BlogId")!;
            var content = runtimeEntityType.FindProperty("Content")!;
            var title = runtimeEntityType.FindProperty("Title")!;
            var blog = runtimeEntityType.FindNavigation("Blog")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.Post)source.Entity;
                    return (ISnapshot)new Snapshot<int, int, string, string>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)blogId.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(blogId)), source.GetCurrentValue<string>(content) == null ? null : ((ValueComparer<string>)content.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(content)), source.GetCurrentValue<string>(title) == null ? null : ((ValueComparer<string>)title.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(title)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<int>(((ValueComparer<int>)blogId.GetValueComparer()).Snapshot(default(int))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<int>(default(int)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => (ISnapshot)new Snapshot<int>(source.ContainsKey("BlogId") ? (int)source["BlogId"] : 0));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => (ISnapshot)new Snapshot<int>(default(int)));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.Post)source.Entity;
                    return (ISnapshot)new Snapshot<int, int, object>(((ValueComparer<int>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)blogId.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(blogId)), UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(entity));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 1,
                relationshipCount: 3,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Id(CompiledModelTestBase.Post @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Content>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Content(CompiledModelTestBase.Post @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Title>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Title(CompiledModelTestBase.Post @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Blog>k__BackingField")]
        public static extern ref CompiledModelTestBase.Blog UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Post_Blog(CompiledModelTestBase.Post @this);
    }
}
