// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class BlogEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+Blog",
                typeof(CompiledModelTestBase.Blog),
                baseEntityType,
                propertyCount: 2,
                navigationCount: 1,
                servicePropertyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.Blog).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Blog).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                (CompiledModelTestBase.Blog entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(entity),
                (CompiledModelTestBase.Blog entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(entity) == 0,
                (CompiledModelTestBase.Blog instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(instance),
                (CompiledModelTestBase.Blog instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(instance) == 0);
            id.SetSetter(
                (CompiledModelTestBase.Blog entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(entity) = value);
            id.SetMaterializationSetter(
                (CompiledModelTestBase.Blog entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(entity) = value);
            id.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id((CompiledModelTestBase.Blog)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id((CompiledModelTestBase.Blog)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.Blog).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.Blog).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            name.SetGetter(
                (CompiledModelTestBase.Blog entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(entity),
                (CompiledModelTestBase.Blog entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(entity) == null,
                (CompiledModelTestBase.Blog instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(instance),
                (CompiledModelTestBase.Blog instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(instance) == null);
            name.SetSetter(
                (CompiledModelTestBase.Blog entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(entity) = value);
            name.SetMaterializationSetter(
                (CompiledModelTestBase.Blog entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(entity) = value);
            name.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name((CompiledModelTestBase.Blog)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name((CompiledModelTestBase.Blog)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(name, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(name),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            name.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            name.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(CompiledModelTestBase.Blog).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));
            lazyLoader.SetPropertyIndexes(
                index: -1,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var name = runtimeEntityType.FindProperty("Name")!;
            var posts = runtimeEntityType.FindNavigation("Posts")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.Blog)source.Entity;
                    return (ISnapshot)new Snapshot<int, string>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), source.GetCurrentValue<string>(name) == null ? null : ((ValueComparer<string>)name.GetValueComparer()).Snapshot(source.GetCurrentValue<string>(name)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.Blog)source.Entity;
                    return (ISnapshot)new Snapshot<int, object>(((ValueComparer<int>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), SnapshotFactoryFactory.SnapshotCollection(UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(entity)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 0,
                relationshipCount: 2,
                storeGeneratedCount: 0);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Id(CompiledModelTestBase.Blog @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Name>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog_Name(CompiledModelTestBase.Blog @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "_posts")]
        public static extern ref ICollection<CompiledModelTestBase.Post> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_Blog__posts(CompiledModelTestBase.Blog @this);
    }
}
