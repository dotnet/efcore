// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    internal partial class LazyPropertyDelegateEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelInMemoryTest+LazyPropertyDelegateEntity",
                typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity),
                baseEntityType,
                propertyCount: 2,
                navigationCount: 1,
                servicePropertyCount: 2,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetGetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => ReadId(entity),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => ReadId(entity) == 0,
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => ReadId(instance),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => ReadId(instance) == 0);
            id.SetSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, int value) => WriteId(entity, value));
            id.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, int value) => WriteId(entity, value));
            id.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : entry.FlaggedAsTemporary(0) && ReadId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity) == 0 ? entry.ReadTemporaryValue<int>(0) : ReadId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                (InternalEntityEntry entry) => ReadId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var lazyConstructorEntityId = runtimeEntityType.AddProperty(
                "LazyConstructorEntityId",
                typeof(int),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetProperty("LazyConstructorEntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetField("<LazyConstructorEntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            lazyConstructorEntityId.SetGetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => ReadLazyConstructorEntityId(entity),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => ReadLazyConstructorEntityId(entity) == 0,
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => ReadLazyConstructorEntityId(instance),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => ReadLazyConstructorEntityId(instance) == 0);
            lazyConstructorEntityId.SetSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, int value) => WriteLazyConstructorEntityId(entity, value));
            lazyConstructorEntityId.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, int value) => WriteLazyConstructorEntityId(entity, value));
            lazyConstructorEntityId.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<int>(1) : entry.FlaggedAsTemporary(1) && ReadLazyConstructorEntityId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity) == 0 ? entry.ReadTemporaryValue<int>(1) : ReadLazyConstructorEntityId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                (InternalEntityEntry entry) => ReadLazyConstructorEntityId((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(lazyConstructorEntityId, 1),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(lazyConstructorEntityId, 1),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            lazyConstructorEntityId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            lazyConstructorEntityId.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                clrType: typeof(int),
                jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);
            lazyConstructorEntityId.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(lazyConstructorEntityId));

            var lazyLoader = runtimeEntityType.AddServiceProperty(
                "LazyLoader",
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetProperty("LazyLoader", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(Action<object, string>));

            var loaderState = runtimeEntityType.AddServiceProperty(
                "LoaderState",
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetProperty("LoaderState", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                serviceType: typeof(ILazyLoader));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { lazyConstructorEntityId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("LazyConstructorEntityId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true);

            var lazyConstructorEntity = declaringEntityType.AddNavigation("LazyConstructorEntity",
                runtimeForeignKey,
                onDependent: true,
                typeof(CompiledModelInMemoryTest.LazyConstructorEntity),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetProperty("LazyConstructorEntity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity).GetField("<LazyConstructorEntity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            lazyConstructorEntity.SetGetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity(entity),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity(entity) == null,
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity(instance),
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity instance) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity(instance) == null);
            lazyConstructorEntity.SetSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, CompiledModelInMemoryTest.LazyConstructorEntity value) => LazyPropertyDelegateEntityEntityType.WriteLazyConstructorEntity(entity, value));
            lazyConstructorEntity.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyPropertyDelegateEntity entity, CompiledModelInMemoryTest.LazyConstructorEntity value) => LazyPropertyDelegateEntityEntityType.WriteLazyConstructorEntity(entity, value));
            lazyConstructorEntity.SetAccessors(
                (InternalEntityEntry entry) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                (InternalEntityEntry entry) => LazyPropertyDelegateEntityEntityType.ReadLazyConstructorEntity((CompiledModelInMemoryTest.LazyPropertyDelegateEntity)entry.Entity),
                null,
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelInMemoryTest.LazyConstructorEntity>(lazyConstructorEntity),
                null);
            lazyConstructorEntity.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            var lazyPropertyDelegateEntity = principalEntityType.AddNavigation("LazyPropertyDelegateEntity",
                runtimeForeignKey,
                onDependent: false,
                typeof(CompiledModelInMemoryTest.LazyPropertyDelegateEntity),
                propertyInfo: typeof(CompiledModelInMemoryTest.LazyConstructorEntity).GetProperty("LazyPropertyDelegateEntity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.LazyConstructorEntity).GetField("<LazyPropertyDelegateEntity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field);

            lazyPropertyDelegateEntity.SetGetter(
                (CompiledModelInMemoryTest.LazyConstructorEntity entity) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity(entity),
                (CompiledModelInMemoryTest.LazyConstructorEntity entity) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity(entity) == null,
                (CompiledModelInMemoryTest.LazyConstructorEntity instance) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity(instance),
                (CompiledModelInMemoryTest.LazyConstructorEntity instance) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity(instance) == null);
            lazyPropertyDelegateEntity.SetSetter(
                (CompiledModelInMemoryTest.LazyConstructorEntity entity, CompiledModelInMemoryTest.LazyPropertyDelegateEntity value) => LazyConstructorEntityEntityType.WriteLazyPropertyDelegateEntity(entity, value));
            lazyPropertyDelegateEntity.SetMaterializationSetter(
                (CompiledModelInMemoryTest.LazyConstructorEntity entity, CompiledModelInMemoryTest.LazyPropertyDelegateEntity value) => LazyConstructorEntityEntityType.WriteLazyPropertyDelegateEntity(entity, value));
            lazyPropertyDelegateEntity.SetAccessors(
                (InternalEntityEntry entry) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity((CompiledModelInMemoryTest.LazyConstructorEntity)entry.Entity),
                (InternalEntityEntry entry) => LazyConstructorEntityEntityType.ReadLazyPropertyDelegateEntity((CompiledModelInMemoryTest.LazyConstructorEntity)entry.Entity),
                null,
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelInMemoryTest.LazyPropertyDelegateEntity>(lazyPropertyDelegateEntity),
                null);
            lazyPropertyDelegateEntity.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var lazyConstructorEntityId = runtimeEntityType.FindProperty("LazyConstructorEntityId")!;
            var lazyConstructorEntity = runtimeEntityType.FindNavigation("LazyConstructorEntity")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelInMemoryTest.LazyPropertyDelegateEntity)source.Entity;
                    return (ISnapshot)new Snapshot<int, int>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)lazyConstructorEntityId.GetValueComparer()).Snapshot(source.GetCurrentValue<int>(lazyConstructorEntityId)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<int, int>(((ValueComparer<int>)id.GetValueComparer()).Snapshot(default(int)), ((ValueComparer<int>)lazyConstructorEntityId.GetValueComparer()).Snapshot(default(int))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<int, int>(default(int), default(int)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelInMemoryTest.LazyPropertyDelegateEntity)source.Entity;
                    return (ISnapshot)new Snapshot<int, int, object>(((ValueComparer<int>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)lazyConstructorEntityId.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<int>(lazyConstructorEntityId)), ReadLazyConstructorEntity(entity));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 1,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 2);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        extern static ref int GetId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this);

        public static int ReadId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this)
            => GetId(@this);

        public static void WriteId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this, int value)
            => GetId(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<LazyConstructorEntityId>k__BackingField")]
        extern static ref int GetLazyConstructorEntityId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this);

        public static int ReadLazyConstructorEntityId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this)
            => GetLazyConstructorEntityId(@this);

        public static void WriteLazyConstructorEntityId(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this, int value)
            => GetLazyConstructorEntityId(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<LazyConstructorEntity>k__BackingField")]
        extern static ref CompiledModelInMemoryTest.LazyConstructorEntity GetLazyConstructorEntity(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this);

        public static CompiledModelInMemoryTest.LazyConstructorEntity ReadLazyConstructorEntity(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this)
            => GetLazyConstructorEntity(@this);

        public static void WriteLazyConstructorEntity(CompiledModelInMemoryTest.LazyPropertyDelegateEntity @this, CompiledModelInMemoryTest.LazyConstructorEntity value)
            => GetLazyConstructorEntity(@this) = value;
    }
}
