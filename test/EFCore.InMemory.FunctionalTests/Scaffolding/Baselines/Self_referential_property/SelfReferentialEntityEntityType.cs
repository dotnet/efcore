// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    internal partial class SelfReferentialEntityEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelInMemoryTest+SelfReferentialEntity",
                typeof(CompiledModelInMemoryTest.SelfReferentialEntity),
                baseEntityType,
                propertyCount: 2,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long),
                propertyInfo: typeof(CompiledModelInMemoryTest.SelfReferentialEntity).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.SelfReferentialEntity).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0L);
            id.SetGetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity) => ReadId(entity),
                (CompiledModelInMemoryTest.SelfReferentialEntity entity) => ReadId(entity) == 0L,
                (CompiledModelInMemoryTest.SelfReferentialEntity instance) => ReadId(instance),
                (CompiledModelInMemoryTest.SelfReferentialEntity instance) => ReadId(instance) == 0L);
            id.SetSetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity, long value) => WriteId(entity, value));
            id.SetMaterializationSetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity, long value) => WriteId(entity, value));
            id.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<long>(0) : entry.FlaggedAsTemporary(0) && ReadId((CompiledModelInMemoryTest.SelfReferentialEntity)entry.Entity) == 0L ? entry.ReadTemporaryValue<long>(0) : ReadId((CompiledModelInMemoryTest.SelfReferentialEntity)entry.Entity),
                (InternalEntityEntry entry) => ReadId((CompiledModelInMemoryTest.SelfReferentialEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<long>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                clrType: typeof(long),
                jsonValueReaderWriter: JsonInt64ReaderWriter.Instance);
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<long>(id));

            var collection = runtimeEntityType.AddProperty(
                "Collection",
                typeof(CompiledModelInMemoryTest.SelfReferentialProperty),
                propertyInfo: typeof(CompiledModelInMemoryTest.SelfReferentialEntity).GetProperty("Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelInMemoryTest.SelfReferentialEntity).GetField("<Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new CompiledModelInMemoryTest.SelfReferentialPropertyValueConverter());
            collection.SetGetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity) => ReadCollection(entity),
                (CompiledModelInMemoryTest.SelfReferentialEntity entity) => ReadCollection(entity) == null,
                (CompiledModelInMemoryTest.SelfReferentialEntity instance) => ReadCollection(instance),
                (CompiledModelInMemoryTest.SelfReferentialEntity instance) => ReadCollection(instance) == null);
            collection.SetSetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity, CompiledModelInMemoryTest.SelfReferentialProperty value) => WriteCollection(entity, value));
            collection.SetMaterializationSetter(
                (CompiledModelInMemoryTest.SelfReferentialEntity entity, CompiledModelInMemoryTest.SelfReferentialProperty value) => WriteCollection(entity, value));
            collection.SetAccessors(
                (InternalEntityEntry entry) => ReadCollection((CompiledModelInMemoryTest.SelfReferentialEntity)entry.Entity),
                (InternalEntityEntry entry) => ReadCollection((CompiledModelInMemoryTest.SelfReferentialEntity)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelInMemoryTest.SelfReferentialProperty>(collection, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelInMemoryTest.SelfReferentialProperty>(collection),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            collection.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            collection.TypeMapping = InMemoryTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelInMemoryTest.SelfReferentialProperty>(
                    (CompiledModelInMemoryTest.SelfReferentialProperty v1, CompiledModelInMemoryTest.SelfReferentialProperty v2) => object.Equals(v1, v2),
                    (CompiledModelInMemoryTest.SelfReferentialProperty v) => v.GetHashCode(),
                    (CompiledModelInMemoryTest.SelfReferentialProperty v) => v),
                keyComparer: new ValueComparer<CompiledModelInMemoryTest.SelfReferentialProperty>(
                    (CompiledModelInMemoryTest.SelfReferentialProperty v1, CompiledModelInMemoryTest.SelfReferentialProperty v2) => object.Equals(v1, v2),
                    (CompiledModelInMemoryTest.SelfReferentialProperty v) => v.GetHashCode(),
                    (CompiledModelInMemoryTest.SelfReferentialProperty v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<CompiledModelInMemoryTest.SelfReferentialProperty, string>(
                    (CompiledModelInMemoryTest.SelfReferentialProperty v) => null,
                    (string v) => null),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelInMemoryTest.SelfReferentialProperty, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelInMemoryTest.SelfReferentialProperty, string>(
                        (CompiledModelInMemoryTest.SelfReferentialProperty v) => null,
                        (string v) => null)));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var collection = runtimeEntityType.FindProperty("Collection")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelInMemoryTest.SelfReferentialEntity)source.Entity;
                    return (ISnapshot)new Snapshot<long, CompiledModelInMemoryTest.SelfReferentialProperty>(((ValueComparer<long>)id.GetValueComparer()).Snapshot(source.GetCurrentValue<long>(id)), source.GetCurrentValue<CompiledModelInMemoryTest.SelfReferentialProperty>(collection) == null ? null : ((ValueComparer<CompiledModelInMemoryTest.SelfReferentialProperty>)collection.GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelInMemoryTest.SelfReferentialProperty>(collection)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<long>(((ValueComparer<long>)id.GetValueComparer()).Snapshot(default(long))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<long>(default(long)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelInMemoryTest.SelfReferentialEntity)source.Entity;
                    return (ISnapshot)new Snapshot<long>(((ValueComparer<long>)id.GetKeyValueComparer()).Snapshot(source.GetCurrentValue<long>(id)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 2,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 2,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        extern static ref long GetId(CompiledModelInMemoryTest.SelfReferentialEntity @this);

        public static long ReadId(CompiledModelInMemoryTest.SelfReferentialEntity @this)
            => GetId(@this);

        public static void WriteId(CompiledModelInMemoryTest.SelfReferentialEntity @this, long value)
            => GetId(@this) = value;

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Collection>k__BackingField")]
        extern static ref CompiledModelInMemoryTest.SelfReferentialProperty GetCollection(CompiledModelInMemoryTest.SelfReferentialEntity @this);

        public static CompiledModelInMemoryTest.SelfReferentialProperty ReadCollection(CompiledModelInMemoryTest.SelfReferentialEntity @this)
            => GetCollection(@this);

        public static void WriteCollection(CompiledModelInMemoryTest.SelfReferentialEntity @this, CompiledModelInMemoryTest.SelfReferentialProperty value)
            => GetCollection(@this) = value;
    }
}
