// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class PrincipalDerivedEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+DependentBase<byte?>>",
                typeof(CompiledModelTestBase.PrincipalDerived<CompiledModelTestBase.DependentBase<byte?>>),
                baseEntityType,
                discriminatorValue: "PrincipalDerived<DependentBase<byte?>>",
                propertyCount: 0,
                navigationCount: 2);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var enum1 = runtimeEntityType.FindProperty("Enum1")!;
            var enum2 = runtimeEntityType.FindProperty("Enum2")!;
            var flagsEnum1 = runtimeEntityType.FindProperty("FlagsEnum1")!;
            var flagsEnum2 = runtimeEntityType.FindProperty("FlagsEnum2")!;
            var principalBaseId = runtimeEntityType.FindProperty("PrincipalBaseId")!;
            var principalDerivedId = runtimeEntityType.FindProperty("PrincipalDerivedId")!;
            var refTypeArray = runtimeEntityType.FindProperty("RefTypeArray")!;
            var refTypeEnumerable = runtimeEntityType.FindProperty("RefTypeEnumerable")!;
            var refTypeIList = runtimeEntityType.FindProperty("RefTypeIList")!;
            var refTypeList = runtimeEntityType.FindProperty("RefTypeList")!;
            var valueTypeArray = runtimeEntityType.FindProperty("ValueTypeArray")!;
            var valueTypeEnumerable = runtimeEntityType.FindProperty("ValueTypeEnumerable")!;
            var valueTypeIList = runtimeEntityType.FindProperty("ValueTypeIList")!;
            var valueTypeList = runtimeEntityType.FindProperty("ValueTypeList")!;
            var deriveds = runtimeEntityType.FindNavigation("Deriveds")!;
            var dependent = runtimeEntityType.FindNavigation("Dependent")!;
            var principals = runtimeEntityType.FindNavigation("Principals")!;
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.PrincipalDerived<CompiledModelTestBase.DependentBase<Nullable<byte>>>)source.Entity;
                    return (ISnapshot)new Snapshot<Nullable<long>, CompiledModelTestBase.AnEnum, Nullable<CompiledModelTestBase.AnEnum>, CompiledModelTestBase.AFlagsEnum, CompiledModelTestBase.AFlagsEnum, Nullable<long>, Nullable<long>, IPAddress[], IEnumerable<string>, IList<string>, List<IPAddress>, DateTime[], IEnumerable<byte>, IList<byte>, List<short>>(source.GetCurrentValue<Nullable<long>>(id) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)id).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(id)), ((ValueComparer<CompiledModelTestBase.AnEnum>)((IProperty)enum1).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AnEnum>(enum1)), source.GetCurrentValue<Nullable<CompiledModelTestBase.AnEnum>>(enum2) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.AnEnum>>)((IProperty)enum2).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.AnEnum>>(enum2)), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)((IProperty)flagsEnum1).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1)), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)((IProperty)flagsEnum2).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2)), source.GetCurrentValue<Nullable<long>>(principalBaseId) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalBaseId).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(principalBaseId)), source.GetCurrentValue<Nullable<long>>(principalDerivedId) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalDerivedId).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(principalDerivedId)), (object)source.GetCurrentValue<IPAddress[]>(refTypeArray) == null ? null : (IPAddress[])((ValueComparer<object>)((IProperty)refTypeArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IPAddress[]>(refTypeArray)), (object)source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable) == null ? null : (IEnumerable<string>)((ValueComparer<object>)((IProperty)refTypeEnumerable).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable)), (object)source.GetCurrentValue<IList<string>>(refTypeIList) == null ? null : (IList<string>)((ValueComparer<object>)((IProperty)refTypeIList).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IList<string>>(refTypeIList)), (object)source.GetCurrentValue<List<IPAddress>>(refTypeList) == null ? null : (List<IPAddress>)((ValueComparer<object>)((IProperty)refTypeList).GetValueComparer()).Snapshot((object)source.GetCurrentValue<List<IPAddress>>(refTypeList)), (IEnumerable<DateTime>)source.GetCurrentValue<DateTime[]>(valueTypeArray) == null ? null : (DateTime[])((ValueComparer<IEnumerable<DateTime>>)((IProperty)valueTypeArray).GetValueComparer()).Snapshot((IEnumerable<DateTime>)source.GetCurrentValue<DateTime[]>(valueTypeArray)), source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable) == null ? null : ((ValueComparer<IEnumerable<byte>>)((IProperty)valueTypeEnumerable).GetValueComparer()).Snapshot(source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable)), (IEnumerable<byte>)source.GetCurrentValue<IList<byte>>(valueTypeIList) == null ? null : (IList<byte>)((ValueComparer<IEnumerable<byte>>)((IProperty)valueTypeIList).GetValueComparer()).Snapshot((IEnumerable<byte>)source.GetCurrentValue<IList<byte>>(valueTypeIList)), (IEnumerable<short>)source.GetCurrentValue<List<short>>(valueTypeList) == null ? null : (List<short>)((ValueComparer<IEnumerable<short>>)((IProperty)valueTypeList).GetValueComparer()).Snapshot((IEnumerable<short>)source.GetCurrentValue<List<short>>(valueTypeList)));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<CompiledModelTestBase.AnEnum, Nullable<long>, Nullable<long>>(((ValueComparer<CompiledModelTestBase.AnEnum>)((IProperty)enum1).GetValueComparer()).Snapshot(default(CompiledModelTestBase.AnEnum)), default(Nullable<long>) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalBaseId).GetValueComparer()).Snapshot(default(Nullable<long>)), default(Nullable<long>) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalDerivedId).GetValueComparer()).Snapshot(default(Nullable<long>))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<CompiledModelTestBase.AnEnum, Nullable<long>, Nullable<long>>(default(CompiledModelTestBase.AnEnum), default(Nullable<long>), default(Nullable<long>)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => (ISnapshot)new Snapshot<Nullable<long>, Nullable<long>>(source.ContainsKey("PrincipalBaseId") ? (Nullable<long>)source["PrincipalBaseId"] : null, source.ContainsKey("PrincipalDerivedId") ? (Nullable<long>)source["PrincipalDerivedId"] : null));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => (ISnapshot)new Snapshot<Nullable<long>, Nullable<long>>(default(Nullable<long>), default(Nullable<long>)));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.PrincipalDerived<CompiledModelTestBase.DependentBase<Nullable<byte>>>)source.Entity;
                    return (ISnapshot)new Snapshot<Nullable<long>, Nullable<long>, Nullable<long>, object, object, object>(source.GetCurrentValue<Nullable<long>>(id) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)id).GetKeyValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(id)), source.GetCurrentValue<Nullable<long>>(principalBaseId) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalBaseId).GetKeyValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(principalBaseId)), source.GetCurrentValue<Nullable<long>>(principalDerivedId) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)principalDerivedId).GetKeyValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(principalDerivedId)), SnapshotFactoryFactory.SnapshotCollection(PrincipalBaseEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_PrincipalBase_Deriveds(entity)), UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_PrincipalDerived1_Dependent(entity), SnapshotFactoryFactory.SnapshotCollection(UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_PrincipalDerived1_Principals(entity)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 15,
                navigationCount: 3,
                complexPropertyCount: 0,
                originalValueCount: 15,
                shadowCount: 2,
                relationshipCount: 6,
                storeGeneratedCount: 3);
            var insertSproc = new RuntimeStoredProcedure(
                runtimeEntityType,
                "Derived_Insert",
                "TPC",
                false);

            var id0 = insertSproc.AddParameter(
                "Id", System.Data.ParameterDirection.Input, false, "Id", false);
            var principalBaseId0 = insertSproc.AddParameter(
                "PrincipalBaseId", System.Data.ParameterDirection.Input, false, "PrincipalBaseId", false);
            var principalDerivedId0 = insertSproc.AddParameter(
                "PrincipalDerivedId", System.Data.ParameterDirection.Input, false, "PrincipalDerivedId", false);
            var enum20 = insertSproc.AddParameter(
                "Enum2", System.Data.ParameterDirection.Input, false, "Enum2", false);
            var flagsEnum10 = insertSproc.AddParameter(
                "FlagsEnum1", System.Data.ParameterDirection.Input, false, "FlagsEnum1", false);
            var flagsEnum20 = insertSproc.AddParameter(
                "FlagsEnum2", System.Data.ParameterDirection.Input, false, "FlagsEnum2", false);
            var valueTypeList0 = insertSproc.AddParameter(
                "ValueTypeList", System.Data.ParameterDirection.Input, false, "ValueTypeList", false);
            var valueTypeIList0 = insertSproc.AddParameter(
                "ValueTypeIList", System.Data.ParameterDirection.Input, false, "ValueTypeIList", false);
            var valueTypeArray0 = insertSproc.AddParameter(
                "ValueTypeArray", System.Data.ParameterDirection.Input, false, "ValueTypeArray", false);
            var valueTypeEnumerable0 = insertSproc.AddParameter(
                "ValueTypeEnumerable", System.Data.ParameterDirection.Input, false, "ValueTypeEnumerable", false);
            var refTypeList0 = insertSproc.AddParameter(
                "RefTypeList", System.Data.ParameterDirection.Input, false, "RefTypeList", false);
            var refTypeIList0 = insertSproc.AddParameter(
                "RefTypeIList", System.Data.ParameterDirection.Input, false, "RefTypeIList", false);
            var refTypeArray0 = insertSproc.AddParameter(
                "RefTypeArray", System.Data.ParameterDirection.Input, false, "RefTypeArray", false);
            var refTypeEnumerable0 = insertSproc.AddParameter(
                "RefTypeEnumerable", System.Data.ParameterDirection.Input, false, "RefTypeEnumerable", false);
            var derivedEnum = insertSproc.AddResultColumn(
                "DerivedEnum", false, "Enum1");
            derivedEnum.AddAnnotation("foo", "bar3");
            runtimeEntityType.AddAnnotation("Relational:InsertStoredProcedure", insertSproc);

            var deleteSproc = new RuntimeStoredProcedure(
                runtimeEntityType,
                "Derived_Delete",
                "TPC",
                false);

            var id1 = deleteSproc.AddParameter(
                "Id_Original", System.Data.ParameterDirection.Input, false, "Id", true);
            runtimeEntityType.AddAnnotation("Relational:DeleteStoredProcedure", deleteSproc);

            var updateSproc = new RuntimeStoredProcedure(
                runtimeEntityType,
                "Derived_Update",
                "Derived",
                false);

            var principalBaseId1 = updateSproc.AddParameter(
                "PrincipalBaseId", System.Data.ParameterDirection.Input, false, "PrincipalBaseId", false);
            var principalDerivedId1 = updateSproc.AddParameter(
                "PrincipalDerivedId", System.Data.ParameterDirection.Input, false, "PrincipalDerivedId", false);
            var enum10 = updateSproc.AddParameter(
                "Enum1", System.Data.ParameterDirection.Input, false, "Enum1", false);
            var enum21 = updateSproc.AddParameter(
                "Enum2", System.Data.ParameterDirection.Input, false, "Enum2", false);
            var flagsEnum11 = updateSproc.AddParameter(
                "FlagsEnum1", System.Data.ParameterDirection.Input, false, "FlagsEnum1", false);
            var flagsEnum21 = updateSproc.AddParameter(
                "FlagsEnum2", System.Data.ParameterDirection.Input, false, "FlagsEnum2", false);
            var valueTypeList1 = updateSproc.AddParameter(
                "ValueTypeList", System.Data.ParameterDirection.Input, false, "ValueTypeList", false);
            var valueTypeIList1 = updateSproc.AddParameter(
                "ValueTypeIList", System.Data.ParameterDirection.Input, false, "ValueTypeIList", false);
            var valueTypeArray1 = updateSproc.AddParameter(
                "ValueTypeArray", System.Data.ParameterDirection.Input, false, "ValueTypeArray", false);
            var valueTypeEnumerable1 = updateSproc.AddParameter(
                "ValueTypeEnumerable", System.Data.ParameterDirection.Input, false, "ValueTypeEnumerable", false);
            var refTypeList1 = updateSproc.AddParameter(
                "RefTypeList", System.Data.ParameterDirection.Input, false, "RefTypeList", false);
            var refTypeIList1 = updateSproc.AddParameter(
                "RefTypeIList", System.Data.ParameterDirection.Input, false, "RefTypeIList", false);
            var refTypeArray1 = updateSproc.AddParameter(
                "RefTypeArray", System.Data.ParameterDirection.Input, false, "RefTypeArray", false);
            var refTypeEnumerable1 = updateSproc.AddParameter(
                "RefTypeEnumerable", System.Data.ParameterDirection.Input, false, "RefTypeEnumerable", false);
            var id2 = updateSproc.AddParameter(
                "Id_Original", System.Data.ParameterDirection.Input, false, "Id", true);
            runtimeEntityType.AddAnnotation("Relational:UpdateStoredProcedure", updateSproc);

            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "TPC");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "PrincipalDerived");
            runtimeEntityType.AddAnnotation("Relational:ViewDefinitionSql", null);
            runtimeEntityType.AddAnnotation("Relational:ViewName", "PrincipalDerivedView");
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", "TPC");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Dependent>k__BackingField")]
        public static extern ref CompiledModelTestBase.DependentBase<byte?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_PrincipalDerived1_Dependent(CompiledModelTestBase.PrincipalDerived<CompiledModelTestBase.DependentBase<byte?>> @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Principals>k__BackingField")]
        public static extern ref ICollection<CompiledModelTestBase.PrincipalBase> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_PrincipalDerived1_Principals(CompiledModelTestBase.PrincipalDerived<CompiledModelTestBase.DependentBase<byte?>> @this);
    }
}
