// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    public partial class DbContextModel
    {
        private DbContextModel()
            : base(skipDetectChanges: false, modelId: new Guid("00000000-0000-0000-0000-000000000000"), entityTypeCount: 1)
        {
        }

        partial void Initialize()
        {
            var spatialTypes = SpatialTypesEntityType.Create(this);

            SpatialTypesEntityType.CreateAnnotations(spatialTypes);

            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var spatialTypes = FindEntityType("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelRelationalTestBase+SpatialTypes")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            spatialTypes.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase = new TableBase("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelRelationalTestBase+SpatialTypes", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase.Columns.Add("Id", idColumnBase);
            var pointColumnBase = new ColumnBase<ColumnMappingBase>("Point", "geometry", microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase)
            {
                IsNullable = true
            };
            microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase.Columns.Add("Point", pointColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelRelationalTestBase+SpatialTypes", microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase);
            var microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesMappingBase = new TableMappingBase<ColumnMappingBase>(spatialTypes, microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase, null);
            microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesTableBase.AddTypeMapping(microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesMappingBase, false);
            defaultTableMappings.Add(microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, spatialTypes.FindProperty("Id")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pointColumnBase, spatialTypes.FindProperty("Point")!, microsoftEntityFrameworkCoreScaffoldingCompiledModelRelationalTestBaseSpatialTypesMappingBase);

            var tableMappings = new List<TableMapping>();
            spatialTypes.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var spatialTypesTable = new Table("SpatialTypes", null, relationalModel);
            var idColumn = new Column("Id", "int", spatialTypesTable);
            spatialTypesTable.Columns.Add("Id", idColumn);
            var pointColumn = new Column("Point", "geometry", spatialTypesTable)
            {
                IsNullable = true
            };
            spatialTypesTable.Columns.Add("Point", pointColumn);
            var pK_SpatialTypes = new UniqueConstraint("PK_SpatialTypes", spatialTypesTable, new[] { idColumn });
            spatialTypesTable.PrimaryKey = pK_SpatialTypes;
            var pK_SpatialTypesUc = RelationalModel.GetKey(this,
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelRelationalTestBase+SpatialTypes",
                new[] { "Id" });
            pK_SpatialTypes.MappedKeys.Add(pK_SpatialTypesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpatialTypesUc).Add(pK_SpatialTypes);
            spatialTypesTable.UniqueConstraints.Add("PK_SpatialTypes", pK_SpatialTypes);
            relationalModel.Tables.Add(("SpatialTypes", null), spatialTypesTable);
            var spatialTypesTableMapping = new TableMapping(spatialTypes, spatialTypesTable, null);
            spatialTypesTable.AddTypeMapping(spatialTypesTableMapping, false);
            tableMappings.Add(spatialTypesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, spatialTypes.FindProperty("Id")!, spatialTypesTableMapping);
            RelationalModel.CreateColumnMapping(pointColumn, spatialTypes.FindProperty("Point")!, spatialTypesTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
