// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class ManyTypesEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+ManyTypes",
                typeof(CompiledModelTestBase.ManyTypes),
                baseEntityType,
                propertyCount: 258,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(CompiledModelTestBase.ManyTypesId),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new CompiledModelTestBase.ManyTypesIdConverter());
            id.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(entity).Equals(default(CompiledModelTestBase.ManyTypesId)),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(instance).Equals(default(CompiledModelTestBase.ManyTypesId)));
            id.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.ManyTypesId value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(entity) = value);
            id.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.ManyTypesId value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(entity) = value);
            id.SetAccessors(
                (InternalEntityEntry entry) => entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<CompiledModelTestBase.ManyTypesId>(0) : entry.FlaggedAsTemporary(0) && UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id((CompiledModelTestBase.ManyTypes)entry.Entity).Equals(default(CompiledModelTestBase.ManyTypesId)) ? entry.ReadTemporaryValue<CompiledModelTestBase.ManyTypesId>(0) : UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.ManyTypesId>(id, 0),
                (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<CompiledModelTestBase.ManyTypesId>(id, 0),
                (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.ManyTypesId>(
                    (CompiledModelTestBase.ManyTypesId v1, CompiledModelTestBase.ManyTypesId v2) => v1.Equals(v2),
                    (CompiledModelTestBase.ManyTypesId v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.ManyTypesId v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.ManyTypesId>(
                    (CompiledModelTestBase.ManyTypesId v1, CompiledModelTestBase.ManyTypesId v2) => v1.Equals(v2),
                    (CompiledModelTestBase.ManyTypesId v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.ManyTypesId v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.ManyTypesId, int>(
                    (CompiledModelTestBase.ManyTypesId v) => v.Id,
                    (int v) => new CompiledModelTestBase.ManyTypesId(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.ManyTypesId, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.ManyTypesId, int>(
                        (CompiledModelTestBase.ManyTypesId v) => v.Id,
                        (int v) => new CompiledModelTestBase.ManyTypesId(v))));
            id.SetCurrentValueComparer(new CurrentProviderValueComparer<CompiledModelTestBase.ManyTypesId, int>(id));
            id.SetSentinelFromProviderValue(0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            id.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id", "TestNamespace") });

            var @bool = runtimeEntityType.AddProperty(
                "Bool",
                typeof(bool),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Bool", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Bool>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            @bool.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(entity) == false,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(instance) == false);
            @bool.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(entity) = value);
            @bool.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(entity) = value);
            @bool.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(@bool, 1),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(@bool),
                (ValueBuffer valueBuffer) => valueBuffer[1]);
            @bool.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @bool.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v));
            @bool.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @bool.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool", "TestNamespace") });

            var boolArray = runtimeEntityType.AddProperty(
                "BoolArray",
                typeof(bool[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BoolArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BoolArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            boolArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(instance) == null);
            boolArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(entity) = value);
            boolArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(entity) = value);
            boolArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool[]>(boolArray, 2),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool[]>(boolArray),
                (ValueBuffer valueBuffer) => valueBuffer[2]);
            boolArray.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            boolArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v)),
                keyComparer: new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<bool>(new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                    JsonBoolReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                    JsonBoolReaderWriter.Instance),
                elementMapping: SqlServerBoolTypeMapping.Default.Clone(
                    comparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v),
                    keyComparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v),
                    providerValueComparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v)));
            boolArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            boolArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray", "TestNamespace") });

            var boolNestedCollection = runtimeEntityType.AddProperty(
                "BoolNestedCollection",
                typeof(bool[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BoolNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BoolNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            boolNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(instance) == null);
            boolNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(entity) = value);
            boolNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(entity) = value);
            boolNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool[][]>(boolNestedCollection, 3),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool[][]>(boolNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[3]);
            boolNestedCollection.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            boolNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<bool[][], bool[]>(new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<bool[][], bool[]>(new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<bool[]>(new JsonCollectionOfReferencesReaderWriter<bool[][], bool[]>(
                    new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                        JsonBoolReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<bool[][], bool[]>(
                    new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                        JsonBoolReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v)),
                    keyComparer: new ListOfValueTypesComparer<bool[], bool>(new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<bool>(new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                        JsonBoolReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<bool[], bool>(
                        JsonBoolReaderWriter.Instance),
                    elementMapping: SqlServerBoolTypeMapping.Default.Clone(
                        comparer: new ValueComparer<bool>(
                            (bool v1, bool v2) => v1 == v2,
                            (bool v) => ((object)v).GetHashCode(),
                            (bool v) => v),
                        keyComparer: new ValueComparer<bool>(
                            (bool v1, bool v2) => v1 == v2,
                            (bool v) => ((object)v).GetHashCode(),
                            (bool v) => v),
                        providerValueComparer: new ValueComparer<bool>(
                            (bool v1, bool v2) => v1 == v2,
                            (bool v) => ((object)v).GetHashCode(),
                            (bool v) => v))));
            boolNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            boolNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection", "TestNamespace") });

            var boolToStringConverterProperty = runtimeEntityType.AddProperty(
                "BoolToStringConverterProperty",
                typeof(bool),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BoolToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BoolToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            boolToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(entity) == false,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(instance) == false);
            boolToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(entity) = value);
            boolToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(entity) = value);
            boolToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(boolToStringConverterProperty, 4),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(boolToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[4]);
            boolToStringConverterProperty.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            boolToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(1)",
                    size: 1,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<bool, string>(
                    (bool v) => (string)(v ? "B" : "A"),
                    (string v) => !string.IsNullOrEmpty(v) && (int)v.ToUpperInvariant()[0] == (int)"B".ToUpperInvariant()[0]),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<bool, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<bool, string>(
                        (bool v) => (string)(v ? "B" : "A"),
                        (string v) => !string.IsNullOrEmpty(v) && (int)v.ToUpperInvariant()[0] == (int)"B".ToUpperInvariant()[0])));
            boolToStringConverterProperty.SetSentinelFromProviderValue("A");
            boolToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            boolToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty", "TestNamespace") });

            var boolToTwoValuesConverterProperty = runtimeEntityType.AddProperty(
                "BoolToTwoValuesConverterProperty",
                typeof(bool),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BoolToTwoValuesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BoolToTwoValuesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            boolToTwoValuesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(entity) == false,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(instance) == false);
            boolToTwoValuesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(entity) = value);
            boolToTwoValuesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(entity) = value);
            boolToTwoValuesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(boolToTwoValuesConverterProperty, 5),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(boolToTwoValuesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[5]);
            boolToTwoValuesConverterProperty.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            boolToTwoValuesConverterProperty.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                converter: new ValueConverter<bool, byte>(
                    (bool v) => (byte)(v ? 1 : 0),
                    (byte v) => v == 1),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<bool, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<bool, byte>(
                        (bool v) => (byte)(v ? 1 : 0),
                        (byte v) => v == 1)));
            boolToTwoValuesConverterProperty.SetSentinelFromProviderValue((byte)0);
            boolToTwoValuesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            boolToTwoValuesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty", "TestNamespace") });

            var boolToZeroOneConverterProperty = runtimeEntityType.AddProperty(
                "BoolToZeroOneConverterProperty",
                typeof(bool),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BoolToZeroOneConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BoolToZeroOneConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new BoolToZeroOneConverter<short>());
            boolToZeroOneConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(entity) == false,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(instance) == false);
            boolToZeroOneConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(entity) = value);
            boolToZeroOneConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, bool value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(entity) = value);
            boolToZeroOneConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(boolToZeroOneConverterProperty, 6),
                (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(boolToZeroOneConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[6]);
            boolToZeroOneConverterProperty.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            boolToZeroOneConverterProperty.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<bool, short>(
                    (bool v) => (short)(v ? 1 : 0),
                    (short v) => v == 1),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<bool, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<bool, short>(
                        (bool v) => (short)(v ? 1 : 0),
                        (short v) => v == 1)));
            boolToZeroOneConverterProperty.SetSentinelFromProviderValue((short)0);
            boolToZeroOneConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            boolToZeroOneConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty", "TestNamespace") });

            var bytes = runtimeEntityType.AddProperty(
                "Bytes",
                typeof(byte[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Bytes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Bytes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            bytes.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(instance) == null);
            bytes.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(entity) = value);
            bytes.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(entity) = value);
            bytes.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[]>(bytes, 7),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[]>(bytes),
                (ValueBuffer valueBuffer) => valueBuffer[7]);
            bytes.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            bytes.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                storeTypePostfix: StoreTypePostfix.None);
            bytes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            bytes.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes", "TestNamespace") });

            var bytesArray = runtimeEntityType.AddProperty(
                "BytesArray",
                typeof(byte[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BytesArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BytesArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            bytesArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(instance) == null);
            bytesArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(entity) = value);
            bytesArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(entity) = value);
            bytesArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[][]>(bytesArray, 8),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[][]>(bytesArray),
                (ValueBuffer valueBuffer) => valueBuffer[8]);
            bytesArray.SetPropertyIndexes(
                index: 8,
                originalValueIndex: 8,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            bytesArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte[]>(new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                    JsonByteArrayReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                    JsonByteArrayReaderWriter.Instance),
                elementMapping: SqlServerByteArrayTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v),
                    keyComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    providerValueComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "varbinary(max)"),
                    storeTypePostfix: StoreTypePostfix.None));
            bytesArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            bytesArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray", "TestNamespace") });

            var bytesNestedCollection = runtimeEntityType.AddProperty(
                "BytesNestedCollection",
                typeof(byte[][][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BytesNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BytesNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            bytesNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(instance) == null);
            bytesNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(entity) = value);
            bytesNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(entity) = value);
            bytesNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[][][]>(bytesNestedCollection, 9),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[][][]>(bytesNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[9]);
            bytesNestedCollection.SetPropertyIndexes(
                index: 9,
                originalValueIndex: 9,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            bytesNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<byte[][][], byte[][]>(new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<byte[][][], byte[][]>(new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte[][]>(new JsonCollectionOfReferencesReaderWriter<byte[][][], byte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][][], byte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v)),
                    keyComparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<byte[]>(new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance),
                    elementMapping: SqlServerByteArrayTypeMapping.Default.Clone(
                        comparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => ((object)v).GetHashCode(),
                            (byte[] v) => v),
                        keyComparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                            (byte[] source) => source.ToArray()),
                        providerValueComparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                            (byte[] source) => source.ToArray()),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "varbinary(max)"),
                        storeTypePostfix: StoreTypePostfix.None)));
            bytesNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            bytesNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection", "TestNamespace") });

            var bytesToStringConverterProperty = runtimeEntityType.AddProperty(
                "BytesToStringConverterProperty",
                typeof(byte[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("BytesToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<BytesToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new BytesToStringConverter(),
                valueComparer: new ArrayStructuralComparer<byte>());
            bytesToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(instance) == null);
            bytesToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(entity) = value);
            bytesToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(entity) = value);
            bytesToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[]>(bytesToStringConverterProperty, 10),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[]>(bytesToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[10]);
            bytesToStringConverterProperty.SetPropertyIndexes(
                index: 10,
                originalValueIndex: 10,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            bytesToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<byte[], string>(
                    (byte[] v) => Convert.ToBase64String(v),
                    (string v) => Convert.FromBase64String(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<byte[], string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<byte[], string>(
                        (byte[] v) => Convert.ToBase64String(v),
                        (string v) => Convert.FromBase64String(v))));
            bytesToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            bytesToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty", "TestNamespace") });

            var castingConverterProperty = runtimeEntityType.AddProperty(
                "CastingConverterProperty",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("CastingConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<CastingConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new CastingConverter<int, decimal>());
            castingConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(instance) == 0);
            castingConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(entity) = value);
            castingConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(entity) = value);
            castingConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(castingConverterProperty, 11),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(castingConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[11]);
            castingConverterProperty.SetPropertyIndexes(
                index: 11,
                originalValueIndex: 11,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            castingConverterProperty.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                converter: new ValueConverter<int, decimal>(
                    (int v) => (decimal)v,
                    (decimal v) => (int)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<int, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<int, decimal>(
                        (int v) => (decimal)v,
                        (decimal v) => (int)v)));
            castingConverterProperty.SetSentinelFromProviderValue(0m);
            castingConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            castingConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty", "TestNamespace") });

            var @char = runtimeEntityType.AddProperty(
                "Char",
                typeof(char),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Char", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Char>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            @char.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(entity) == '\0',
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(instance) == '\0');
            @char.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, char value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(entity) = value);
            @char.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, char value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(entity) = value);
            @char.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<char>(@char, 12),
                (InternalEntityEntry entry) => entry.GetCurrentValue<char>(@char),
                (ValueBuffer valueBuffer) => valueBuffer[12]);
            @char.SetPropertyIndexes(
                index: 12,
                originalValueIndex: 12,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @char.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                keyComparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(1)",
                    size: 1,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<char, string>(
                    (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => v.Length < 1 ? '\0' : v[0]),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<char, string>(
                        (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => v.Length < 1 ? '\0' : v[0])));
            @char.SetSentinelFromProviderValue("\0");
            @char.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @char.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char", "TestNamespace") });

            var charArray = runtimeEntityType.AddProperty(
                "CharArray",
                typeof(char[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("CharArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<CharArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            charArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(instance) == null);
            charArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, char[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(entity) = value);
            charArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, char[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(entity) = value);
            charArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<char[]>(charArray, 13),
                (InternalEntityEntry entry) => entry.GetCurrentValue<char[]>(charArray),
                (ValueBuffer valueBuffer) => valueBuffer[13]);
            charArray.SetPropertyIndexes(
                index: 13,
                originalValueIndex: 13,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            charArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v)),
                keyComparer: new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<char>(new JsonCollectionOfStructsReaderWriter<char[], char>(
                    new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0])))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<char[], char>(
                    new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0]))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v),
                    keyComparer: new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(1)",
                        size: 1,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<char, string>(
                        (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => v.Length < 1 ? '\0' : v[0]),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0]))));
            charArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            charArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray", "TestNamespace") });

            var charNestedCollection = runtimeEntityType.AddProperty(
                "CharNestedCollection",
                typeof(char[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("CharNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<CharNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            charNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(instance) == null);
            charNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, char[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(entity) = value);
            charNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, char[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(entity) = value);
            charNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<char[][]>(charNestedCollection, 14),
                (InternalEntityEntry entry) => entry.GetCurrentValue<char[][]>(charNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[14]);
            charNestedCollection.SetPropertyIndexes(
                index: 14,
                originalValueIndex: 14,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            charNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<char[][], char[]>(new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<char[][], char[]>(new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<char[]>(new JsonCollectionOfReferencesReaderWriter<char[][], char[]>(
                    new JsonCollectionOfStructsReaderWriter<char[], char>(
                        new JsonConvertedValueReaderWriter<char, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<char, string>(
                                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                                (string v) => v.Length < 1 ? '\0' : v[0]))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<char[][], char[]>(
                    new JsonCollectionOfStructsReaderWriter<char[], char>(
                        new JsonConvertedValueReaderWriter<char, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<char, string>(
                                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                                (string v) => v.Length < 1 ? '\0' : v[0])))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v)),
                    keyComparer: new ListOfValueTypesComparer<char[], char>(new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<char>(new JsonCollectionOfStructsReaderWriter<char[], char>(
                        new JsonConvertedValueReaderWriter<char, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<char, string>(
                                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                                (string v) => v.Length < 1 ? '\0' : v[0])))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<char[], char>(
                        new JsonConvertedValueReaderWriter<char, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<char, string>(
                                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                                (string v) => v.Length < 1 ? '\0' : v[0]))),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ValueComparer<char>(
                            (char v1, char v2) => v1 == v2,
                            (char v) => (int)v,
                            (char v) => v),
                        keyComparer: new ValueComparer<char>(
                            (char v1, char v2) => v1 == v2,
                            (char v) => (int)v,
                            (char v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(1)",
                            size: 1,
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0]),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<char, string>(
                                (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                                (string v) => v.Length < 1 ? '\0' : v[0])))));
            charNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            charNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection", "TestNamespace") });

            var charToStringConverterProperty = runtimeEntityType.AddProperty(
                "CharToStringConverterProperty",
                typeof(char),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("CharToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<CharToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new CharToStringConverter());
            charToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(entity) == '\0',
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(instance) == '\0');
            charToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, char value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(entity) = value);
            charToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, char value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(entity) = value);
            charToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<char>(charToStringConverterProperty, 15),
                (InternalEntityEntry entry) => entry.GetCurrentValue<char>(charToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[15]);
            charToStringConverterProperty.SetPropertyIndexes(
                index: 15,
                originalValueIndex: 15,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            charToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                keyComparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nchar(1)",
                    size: 1,
                    unicode: true,
                    fixedLength: true,
                    dbType: System.Data.DbType.StringFixedLength),
                converter: new ValueConverter<char, string>(
                    (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => v.Length < 1 ? '\0' : v[0]),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<char, string>(
                        (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => v.Length < 1 ? '\0' : v[0])));
            charToStringConverterProperty.SetSentinelFromProviderValue("\0");
            charToStringConverterProperty.AddAnnotation("Relational:IsFixedLength", true);
            charToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            charToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty", "TestNamespace") });

            var dateOnly = runtimeEntityType.AddProperty(
                "DateOnly",
                typeof(DateOnly),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateOnly(1, 1, 1));
            dateOnly.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(entity) == default(DateOnly),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(instance) == default(DateOnly));
            dateOnly.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(entity) = value);
            dateOnly.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(entity) = value);
            dateOnly.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateOnly>(dateOnly, 16),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateOnly>(dateOnly),
                (ValueBuffer valueBuffer) => valueBuffer[16]);
            dateOnly.SetPropertyIndexes(
                index: 16,
                originalValueIndex: 16,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateOnly.TypeMapping = SqlServerDateOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                keyComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                providerValueComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v));
            dateOnly.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateOnly.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly", "TestNamespace") });

            var dateOnlyArray = runtimeEntityType.AddProperty(
                "DateOnlyArray",
                typeof(DateOnly[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateOnlyArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateOnlyArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dateOnlyArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(instance) == null);
            dateOnlyArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(entity) = value);
            dateOnlyArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(entity) = value);
            dateOnlyArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateOnly[]>(dateOnlyArray, 17),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateOnly[]>(dateOnlyArray),
                (ValueBuffer valueBuffer) => valueBuffer[17]);
            dateOnlyArray.SetPropertyIndexes(
                index: 17,
                originalValueIndex: 17,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateOnlyArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<DateOnly[], DateOnly>(new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v)),
                keyComparer: new ListOfValueTypesComparer<DateOnly[], DateOnly>(new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<DateOnly>(new JsonCollectionOfStructsReaderWriter<DateOnly[], DateOnly>(
                    JsonDateOnlyReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<DateOnly[], DateOnly>(
                    JsonDateOnlyReaderWriter.Instance),
                elementMapping: SqlServerDateOnlyTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v),
                    keyComparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v),
                    providerValueComparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v)));
            dateOnlyArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateOnlyArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray", "TestNamespace") });

            var dateOnlyToStringConverterProperty = runtimeEntityType.AddProperty(
                "DateOnlyToStringConverterProperty",
                typeof(DateOnly),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateOnlyToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateOnlyToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateOnlyToStringConverter());
            dateOnlyToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(entity) == default(DateOnly),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(instance) == default(DateOnly));
            dateOnlyToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(entity) = value);
            dateOnlyToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(entity) = value);
            dateOnlyToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateOnly>(dateOnlyToStringConverterProperty, 18),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateOnly>(dateOnlyToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[18]);
            dateOnlyToStringConverterProperty.SetPropertyIndexes(
                index: 18,
                originalValueIndex: 18,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateOnlyToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                keyComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(10)",
                    size: 10,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<DateOnly, string>(
                    (DateOnly v) => v.ToString("yyyy\\-MM\\-dd"),
                    (string v) => DateOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateOnly, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<DateOnly, string>(
                        (DateOnly v) => v.ToString("yyyy\\-MM\\-dd"),
                        (string v) => DateOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None))));
            dateOnlyToStringConverterProperty.SetSentinelFromProviderValue("0001-01-01");
            dateOnlyToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateOnlyToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty", "TestNamespace") });

            var dateTime = runtimeEntityType.AddProperty(
                "DateTime",
                typeof(DateTime),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            dateTime.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(entity) == default(DateTime),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(instance) == default(DateTime));
            dateTime.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(entity) = value);
            dateTime.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(entity) = value);
            dateTime.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(dateTime, 19),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(dateTime),
                (ValueBuffer valueBuffer) => valueBuffer[19]);
            dateTime.SetPropertyIndexes(
                index: 19,
                originalValueIndex: 19,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTime.TypeMapping = SqlServerDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v));
            dateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTime.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime", "TestNamespace") });

            var dateTimeArray = runtimeEntityType.AddProperty(
                "DateTimeArray",
                typeof(DateTime[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dateTimeArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(instance) == null);
            dateTimeArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(entity) = value);
            dateTimeArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(entity) = value);
            dateTimeArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime[]>(dateTimeArray, 20),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime[]>(dateTimeArray),
                (ValueBuffer valueBuffer) => valueBuffer[20]);
            dateTimeArray.SetPropertyIndexes(
                index: 20,
                originalValueIndex: 20,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<DateTime[], DateTime>(new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v)),
                keyComparer: new ListOfValueTypesComparer<DateTime[], DateTime>(new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<DateTime>(new JsonCollectionOfStructsReaderWriter<DateTime[], DateTime>(
                    JsonDateTimeReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<DateTime[], DateTime>(
                    JsonDateTimeReaderWriter.Instance),
                elementMapping: SqlServerDateTimeTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v),
                    keyComparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v),
                    providerValueComparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v)));
            dateTimeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray", "TestNamespace") });

            var dateTimeOffsetToBinaryConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeOffsetToBinaryConverterProperty",
                typeof(DateTimeOffset),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeOffsetToBinaryConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeOffsetToBinaryConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToBinaryConverter());
            dateTimeOffsetToBinaryConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(entity).EqualsExact(default(DateTimeOffset)),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(instance).EqualsExact(default(DateTimeOffset)));
            dateTimeOffsetToBinaryConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(entity) = value);
            dateTimeOffsetToBinaryConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(entity) = value);
            dateTimeOffsetToBinaryConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(dateTimeOffsetToBinaryConverterProperty, 21),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToBinaryConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[21]);
            dateTimeOffsetToBinaryConverterProperty.SetPropertyIndexes(
                index: 21,
                originalValueIndex: 21,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeOffsetToBinaryConverterProperty.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<DateTimeOffset, long>(
                    (DateTimeOffset v) => DateTimeOffsetToBinaryConverter.ToLong(v),
                    (long v) => DateTimeOffsetToBinaryConverter.ToDateTimeOffset(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, long>(
                        (DateTimeOffset v) => DateTimeOffsetToBinaryConverter.ToLong(v),
                        (long v) => DateTimeOffsetToBinaryConverter.ToDateTimeOffset(v))));
            dateTimeOffsetToBinaryConverterProperty.SetSentinelFromProviderValue(0L);
            dateTimeOffsetToBinaryConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeOffsetToBinaryConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty", "TestNamespace") });

            var dateTimeOffsetToBytesConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeOffsetToBytesConverterProperty",
                typeof(DateTimeOffset),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeOffsetToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeOffsetToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToBytesConverter());
            dateTimeOffsetToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(entity).EqualsExact(default(DateTimeOffset)),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(instance).EqualsExact(default(DateTimeOffset)));
            dateTimeOffsetToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(entity) = value);
            dateTimeOffsetToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(entity) = value);
            dateTimeOffsetToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(dateTimeOffsetToBytesConverterProperty, 22),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[22]);
            dateTimeOffsetToBytesConverterProperty.SetPropertyIndexes(
                index: 22,
                originalValueIndex: 22,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeOffsetToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(12)",
                    size: 12),
                converter: new ValueConverter<DateTimeOffset, byte[]>(
                    (DateTimeOffset v) => DateTimeOffsetToBytesConverter.ToBytes(v),
                    (byte[] v) => DateTimeOffsetToBytesConverter.FromBytes(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, byte[]>(
                        (DateTimeOffset v) => DateTimeOffsetToBytesConverter.ToBytes(v),
                        (byte[] v) => DateTimeOffsetToBytesConverter.FromBytes(v))));
            dateTimeOffsetToBytesConverterProperty.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            dateTimeOffsetToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeOffsetToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty", "TestNamespace") });

            var dateTimeOffsetToStringConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeOffsetToStringConverterProperty",
                typeof(DateTimeOffset),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeOffsetToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeOffsetToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToStringConverter());
            dateTimeOffsetToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(entity).EqualsExact(default(DateTimeOffset)),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(instance).EqualsExact(default(DateTimeOffset)));
            dateTimeOffsetToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(entity) = value);
            dateTimeOffsetToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTimeOffset value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(entity) = value);
            dateTimeOffsetToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTimeOffset>(dateTimeOffsetToStringConverterProperty, 23),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[23]);
            dateTimeOffsetToStringConverterProperty.SetPropertyIndexes(
                index: 23,
                originalValueIndex: 23,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeOffsetToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(48)",
                    size: 48,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<DateTimeOffset, string>(
                    (DateTimeOffset v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFFzzz"),
                    (string v) => DateTimeOffset.Parse(v, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, string>(
                        (DateTimeOffset v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFFzzz"),
                        (string v) => DateTimeOffset.Parse(v, CultureInfo.InvariantCulture))));
            dateTimeOffsetToStringConverterProperty.SetSentinelFromProviderValue("0001-01-01 00:00:00+00:00");
            dateTimeOffsetToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeOffsetToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty", "TestNamespace") });

            var dateTimeToBinaryConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeToBinaryConverterProperty",
                typeof(DateTime),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeToBinaryConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeToBinaryConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeToBinaryConverter());
            dateTimeToBinaryConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(entity) == default(DateTime),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(instance) == default(DateTime));
            dateTimeToBinaryConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(entity) = value);
            dateTimeToBinaryConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(entity) = value);
            dateTimeToBinaryConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(dateTimeToBinaryConverterProperty, 24),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(dateTimeToBinaryConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[24]);
            dateTimeToBinaryConverterProperty.SetPropertyIndexes(
                index: 24,
                originalValueIndex: 24,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeToBinaryConverterProperty.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<DateTime, long>(
                    (DateTime v) => v.ToBinary(),
                    (long v) => DateTime.FromBinary(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTime, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<DateTime, long>(
                        (DateTime v) => v.ToBinary(),
                        (long v) => DateTime.FromBinary(v))));
            dateTimeToBinaryConverterProperty.SetSentinelFromProviderValue(0L);
            dateTimeToBinaryConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeToBinaryConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty", "TestNamespace") });

            var dateTimeToStringConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeToStringConverterProperty",
                typeof(DateTime),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeToStringConverter());
            dateTimeToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(entity) == default(DateTime),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(instance) == default(DateTime));
            dateTimeToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(entity) = value);
            dateTimeToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(entity) = value);
            dateTimeToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(dateTimeToStringConverterProperty, 25),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(dateTimeToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[25]);
            dateTimeToStringConverterProperty.SetPropertyIndexes(
                index: 25,
                originalValueIndex: 25,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(48)",
                    size: 48,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<DateTime, string>(
                    (DateTime v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFF"),
                    (string v) => DateTime.Parse(v, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTime, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<DateTime, string>(
                        (DateTime v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFF"),
                        (string v) => DateTime.Parse(v, CultureInfo.InvariantCulture))));
            dateTimeToStringConverterProperty.SetSentinelFromProviderValue("0001-01-01 00:00:00");
            dateTimeToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty", "TestNamespace") });

            var dateTimeToTicksConverterProperty = runtimeEntityType.AddProperty(
                "DateTimeToTicksConverterProperty",
                typeof(DateTime),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DateTimeToTicksConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DateTimeToTicksConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            dateTimeToTicksConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(entity) == default(DateTime),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(instance) == default(DateTime));
            dateTimeToTicksConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(entity) = value);
            dateTimeToTicksConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, DateTime value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(entity) = value);
            dateTimeToTicksConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(dateTimeToTicksConverterProperty, 26),
                (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(dateTimeToTicksConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[26]);
            dateTimeToTicksConverterProperty.SetPropertyIndexes(
                index: 26,
                originalValueIndex: 26,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            dateTimeToTicksConverterProperty.TypeMapping = SqlServerDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v));
            dateTimeToTicksConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            dateTimeToTicksConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty", "TestNamespace") });

            var @decimal = runtimeEntityType.AddProperty(
                "Decimal",
                typeof(decimal),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Decimal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Decimal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0m);
            @decimal.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(entity) == 0M,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(instance) == 0M);
            @decimal.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(entity) = value);
            @decimal.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(entity) = value);
            @decimal.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<decimal>(@decimal, 27),
                (InternalEntityEntry entry) => entry.GetCurrentValue<decimal>(@decimal),
                (ValueBuffer valueBuffer) => valueBuffer[27]);
            @decimal.SetPropertyIndexes(
                index: 27,
                originalValueIndex: 27,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @decimal.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v));
            @decimal.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @decimal.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal", "TestNamespace") });

            var decimalArray = runtimeEntityType.AddProperty(
                "DecimalArray",
                typeof(decimal[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DecimalArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DecimalArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            decimalArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(instance) == null);
            decimalArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(entity) = value);
            decimalArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(entity) = value);
            decimalArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<decimal[]>(decimalArray, 28),
                (InternalEntityEntry entry) => entry.GetCurrentValue<decimal[]>(decimalArray),
                (ValueBuffer valueBuffer) => valueBuffer[28]);
            decimalArray.SetPropertyIndexes(
                index: 28,
                originalValueIndex: 28,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            decimalArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<decimal[], decimal>(new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v)),
                keyComparer: new ListOfValueTypesComparer<decimal[], decimal>(new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<decimal>(new JsonCollectionOfStructsReaderWriter<decimal[], decimal>(
                    JsonDecimalReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<decimal[], decimal>(
                    JsonDecimalReaderWriter.Instance),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    keyComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v)));
            decimalArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            decimalArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray", "TestNamespace") });

            var decimalNumberToBytesConverterProperty = runtimeEntityType.AddProperty(
                "DecimalNumberToBytesConverterProperty",
                typeof(decimal),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DecimalNumberToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DecimalNumberToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToBytesConverter<decimal>());
            decimalNumberToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(entity) == 0M,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(instance) == 0M);
            decimalNumberToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(entity) = value);
            decimalNumberToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(entity) = value);
            decimalNumberToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<decimal>(decimalNumberToBytesConverterProperty, 29),
                (InternalEntityEntry entry) => entry.GetCurrentValue<decimal>(decimalNumberToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[29]);
            decimalNumberToBytesConverterProperty.SetPropertyIndexes(
                index: 29,
                originalValueIndex: 29,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            decimalNumberToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<decimal, byte[]>(
                    (decimal v) => NumberToBytesConverter<decimal>.DecimalToBytes(v),
                    (byte[] v) => v == null ? 0M : NumberToBytesConverter<decimal>.BytesToDecimal(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<decimal, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<decimal, byte[]>(
                        (decimal v) => NumberToBytesConverter<decimal>.DecimalToBytes(v),
                        (byte[] v) => v == null ? 0M : NumberToBytesConverter<decimal>.BytesToDecimal(v))));
            decimalNumberToBytesConverterProperty.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            decimalNumberToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            decimalNumberToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty", "TestNamespace") });

            var decimalNumberToStringConverterProperty = runtimeEntityType.AddProperty(
                "DecimalNumberToStringConverterProperty",
                typeof(decimal),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DecimalNumberToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DecimalNumberToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToStringConverter<decimal>());
            decimalNumberToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(entity) == 0M,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(instance) == 0M);
            decimalNumberToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(entity) = value);
            decimalNumberToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, decimal value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(entity) = value);
            decimalNumberToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<decimal>(decimalNumberToStringConverterProperty, 30),
                (InternalEntityEntry entry) => entry.GetCurrentValue<decimal>(decimalNumberToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[30]);
            decimalNumberToStringConverterProperty.SetPropertyIndexes(
                index: 30,
                originalValueIndex: 30,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            decimalNumberToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(64)",
                    size: 64,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<decimal, string>(
                    (decimal v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => decimal.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<decimal, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<decimal, string>(
                        (decimal v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => decimal.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture))));
            decimalNumberToStringConverterProperty.SetSentinelFromProviderValue("0");
            decimalNumberToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            decimalNumberToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty", "TestNamespace") });

            var @double = runtimeEntityType.AddProperty(
                "Double",
                typeof(double),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Double", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Double>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            @double.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(entity).Equals(0D),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(instance).Equals(0D));
            @double.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(entity) = value);
            @double.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(entity) = value);
            @double.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<double>(@double, 31),
                (InternalEntityEntry entry) => entry.GetCurrentValue<double>(@double),
                (ValueBuffer valueBuffer) => valueBuffer[31]);
            @double.SetPropertyIndexes(
                index: 31,
                originalValueIndex: 31,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @double.TypeMapping = SqlServerDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v));
            @double.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @double.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double", "TestNamespace") });

            var doubleArray = runtimeEntityType.AddProperty(
                "DoubleArray",
                typeof(double[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DoubleArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DoubleArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            doubleArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(instance) == null);
            doubleArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, double[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(entity) = value);
            doubleArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, double[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(entity) = value);
            doubleArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<double[]>(doubleArray, 32),
                (InternalEntityEntry entry) => entry.GetCurrentValue<double[]>(doubleArray),
                (ValueBuffer valueBuffer) => valueBuffer[32]);
            doubleArray.SetPropertyIndexes(
                index: 32,
                originalValueIndex: 32,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            doubleArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<double[], double>(new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v)),
                keyComparer: new ListOfValueTypesComparer<double[], double>(new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<double>(new JsonCollectionOfStructsReaderWriter<double[], double>(
                    JsonDoubleReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<double[], double>(
                    JsonDoubleReaderWriter.Instance),
                elementMapping: SqlServerDoubleTypeMapping.Default.Clone(
                    comparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v),
                    keyComparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v),
                    providerValueComparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v)));
            doubleArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            doubleArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray", "TestNamespace") });

            var doubleNumberToBytesConverterProperty = runtimeEntityType.AddProperty(
                "DoubleNumberToBytesConverterProperty",
                typeof(double),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DoubleNumberToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DoubleNumberToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToBytesConverter<double>());
            doubleNumberToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(entity).Equals(0D),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(instance).Equals(0D));
            doubleNumberToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(entity) = value);
            doubleNumberToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(entity) = value);
            doubleNumberToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<double>(doubleNumberToBytesConverterProperty, 33),
                (InternalEntityEntry entry) => entry.GetCurrentValue<double>(doubleNumberToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[33]);
            doubleNumberToBytesConverterProperty.SetPropertyIndexes(
                index: 33,
                originalValueIndex: 33,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            doubleNumberToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(8)",
                    size: 8),
                converter: new ValueConverter<double, byte[]>(
                    (double v) => NumberToBytesConverter<double>.ReverseLong(BitConverter.GetBytes(v)),
                    (byte[] v) => v == null ? 0D : BitConverter.ToDouble(NumberToBytesConverter<double>.ReverseLong(v), 0)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<double, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<double, byte[]>(
                        (double v) => NumberToBytesConverter<double>.ReverseLong(BitConverter.GetBytes(v)),
                        (byte[] v) => v == null ? 0D : BitConverter.ToDouble(NumberToBytesConverter<double>.ReverseLong(v), 0))));
            doubleNumberToBytesConverterProperty.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0 });
            doubleNumberToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            doubleNumberToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty", "TestNamespace") });

            var doubleNumberToStringConverterProperty = runtimeEntityType.AddProperty(
                "DoubleNumberToStringConverterProperty",
                typeof(double),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("DoubleNumberToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<DoubleNumberToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToStringConverter<double>());
            doubleNumberToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(entity).Equals(0D),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(instance).Equals(0D));
            doubleNumberToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(entity) = value);
            doubleNumberToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, double value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(entity) = value);
            doubleNumberToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<double>(doubleNumberToStringConverterProperty, 34),
                (InternalEntityEntry entry) => entry.GetCurrentValue<double>(doubleNumberToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[34]);
            doubleNumberToStringConverterProperty.SetPropertyIndexes(
                index: 34,
                originalValueIndex: 34,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            doubleNumberToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(64)",
                    size: 64,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<double, string>(
                    (double v) => string.Format(CultureInfo.InvariantCulture, "{0:R}", (object)v),
                    (string v) => double.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<double, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<double, string>(
                        (double v) => string.Format(CultureInfo.InvariantCulture, "{0:R}", (object)v),
                        (string v) => double.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture))));
            doubleNumberToStringConverterProperty.SetSentinelFromProviderValue("0");
            doubleNumberToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            doubleNumberToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty", "TestNamespace") });

            var enum16 = runtimeEntityType.AddProperty(
                "Enum16",
                typeof(CompiledModelTestBase.Enum16),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(entity), (object)CompiledModelTestBase.Enum16.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(instance), (object)CompiledModelTestBase.Enum16.Default));
            enum16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(entity) = value);
            enum16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(entity) = value);
            enum16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum16>(enum16, 35),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum16>(enum16),
                (ValueBuffer valueBuffer) => valueBuffer[35]);
            enum16.SetPropertyIndexes(
                index: 35,
                originalValueIndex: 35,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                    (CompiledModelTestBase.Enum16 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value)));
            enum16.SetSentinelFromProviderValue((short)0);
            enum16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16", "TestNamespace") });

            var enum16Array = runtimeEntityType.AddProperty(
                "Enum16Array",
                typeof(CompiledModelTestBase.Enum16[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(instance) == null);
            enum16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(entity) = value);
            enum16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(entity) = value);
            enum16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum16[]>(enum16Array, 36),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16Array),
                (ValueBuffer valueBuffer) => valueBuffer[36]);
            enum16Array.SetPropertyIndexes(
                index: 36,
                originalValueIndex: 36,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            enum16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array", "TestNamespace") });

            var enum16AsString = runtimeEntityType.AddProperty(
                "Enum16AsString",
                typeof(CompiledModelTestBase.Enum16),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enum16AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(entity), (object)CompiledModelTestBase.Enum16.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(instance), (object)CompiledModelTestBase.Enum16.Default));
            enum16AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(entity) = value);
            enum16AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(entity) = value);
            enum16AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum16>(enum16AsString, 37),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum16>(enum16AsString),
                (ValueBuffer valueBuffer) => valueBuffer[37]);
            enum16AsString.SetPropertyIndexes(
                index: 37,
                originalValueIndex: 37,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.Enum16, string>(
                    (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum16, string>(
                        (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v))));
            enum16AsString.SetSentinelFromProviderValue("Default");
            enum16AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString", "TestNamespace") });

            var enum16AsStringArray = runtimeEntityType.AddProperty(
                "Enum16AsStringArray",
                typeof(CompiledModelTestBase.Enum16[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum16AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(instance) == null);
            enum16AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(entity) = value);
            enum16AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(entity) = value);
            enum16AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum16[]>(enum16AsStringArray, 38),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[38]);
            enum16AsStringArray.SetPropertyIndexes(
                index: 38,
                originalValueIndex: 38,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, string>(
                        (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)))));
            enum16AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray", "TestNamespace") });

            var enum16AsStringCollection = runtimeEntityType.AddProperty(
                "Enum16AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum16>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum16AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(instance) == null);
            enum16AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(entity) = value);
            enum16AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(entity) = value);
            enum16AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum16>>(enum16AsStringCollection, 39),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[39]);
            enum16AsStringCollection.SetPropertyIndexes(
                index: 39,
                originalValueIndex: 39,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, string>(
                        (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, string>(
                            (CompiledModelTestBase.Enum16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum16, string, CompiledModelTestBase.Enum16>.ConvertToEnum(v)))));
            enum16AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection", "TestNamespace") });

            var enum16Collection = runtimeEntityType.AddProperty(
                "Enum16Collection",
                typeof(List<CompiledModelTestBase.Enum16>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum16Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum16Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum16Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(instance) == null);
            enum16Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(entity) = value);
            enum16Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(entity) = value);
            enum16Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum16>>(enum16Collection, 40),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16Collection),
                (ValueBuffer valueBuffer) => valueBuffer[40]);
            enum16Collection.SetPropertyIndexes(
                index: 40,
                originalValueIndex: 40,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum16Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            enum16Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum16Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection", "TestNamespace") });

            var enum32 = runtimeEntityType.AddProperty(
                "Enum32",
                typeof(CompiledModelTestBase.Enum32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(entity), (object)CompiledModelTestBase.Enum32.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(instance), (object)CompiledModelTestBase.Enum32.Default));
            enum32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(entity) = value);
            enum32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(entity) = value);
            enum32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32>(enum32, 41),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32>(enum32),
                (ValueBuffer valueBuffer) => valueBuffer[41]);
            enum32.SetPropertyIndexes(
                index: 41,
                originalValueIndex: 41,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                    (CompiledModelTestBase.Enum32 value) => (int)value,
                    (int value) => (CompiledModelTestBase.Enum32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value)));
            enum32.SetSentinelFromProviderValue(0);
            enum32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32", "TestNamespace") });

            var enum32Array = runtimeEntityType.AddProperty(
                "Enum32Array",
                typeof(CompiledModelTestBase.Enum32[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(instance) == null);
            enum32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(entity) = value);
            enum32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(entity) = value);
            enum32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32[]>(enum32Array, 42),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32Array),
                (ValueBuffer valueBuffer) => valueBuffer[42]);
            enum32Array.SetPropertyIndexes(
                index: 42,
                originalValueIndex: 42,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            enum32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array", "TestNamespace") });

            var enum32AsString = runtimeEntityType.AddProperty(
                "Enum32AsString",
                typeof(CompiledModelTestBase.Enum32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enum32AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(entity), (object)CompiledModelTestBase.Enum32.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(instance), (object)CompiledModelTestBase.Enum32.Default));
            enum32AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(entity) = value);
            enum32AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(entity) = value);
            enum32AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32>(enum32AsString, 43),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32>(enum32AsString),
                (ValueBuffer valueBuffer) => valueBuffer[43]);
            enum32AsString.SetPropertyIndexes(
                index: 43,
                originalValueIndex: 43,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, string>(
                    (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, string>(
                        (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v))));
            enum32AsString.SetSentinelFromProviderValue("Default");
            enum32AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString", "TestNamespace") });

            var enum32AsStringArray = runtimeEntityType.AddProperty(
                "Enum32AsStringArray",
                typeof(CompiledModelTestBase.Enum32[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(instance) == null);
            enum32AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(entity) = value);
            enum32AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(entity) = value);
            enum32AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32[]>(enum32AsStringArray, 44),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[44]);
            enum32AsStringArray.SetPropertyIndexes(
                index: 44,
                originalValueIndex: 44,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, string>(
                        (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)))));
            enum32AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray", "TestNamespace") });

            var enum32AsStringCollection = runtimeEntityType.AddProperty(
                "Enum32AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum32>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(instance) == null);
            enum32AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(entity) = value);
            enum32AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(entity) = value);
            enum32AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum32>>(enum32AsStringCollection, 45),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[45]);
            enum32AsStringCollection.SetPropertyIndexes(
                index: 45,
                originalValueIndex: 45,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, string>(
                        (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, string>(
                            (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)))));
            enum32AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection", "TestNamespace") });

            var enum32Collection = runtimeEntityType.AddProperty(
                "Enum32Collection",
                typeof(List<CompiledModelTestBase.Enum32>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(instance) == null);
            enum32Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(entity) = value);
            enum32Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(entity) = value);
            enum32Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum32>>(enum32Collection, 46),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32Collection),
                (ValueBuffer valueBuffer) => valueBuffer[46]);
            enum32Collection.SetPropertyIndexes(
                index: 46,
                originalValueIndex: 46,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            enum32Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection", "TestNamespace") });

            var enum32NestedCollection = runtimeEntityType.AddProperty(
                "Enum32NestedCollection",
                typeof(List<CompiledModelTestBase.Enum32>[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum32NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum32NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum32NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(instance) == null);
            enum32NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(entity) = value);
            enum32NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum32>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(entity) = value);
            enum32NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum32>[][]>(enum32NestedCollection, 47),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum32>[][]>(enum32NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[47]);
            enum32NestedCollection.SetPropertyIndexes(
                index: 47,
                originalValueIndex: 47,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum32NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[][], List<CompiledModelTestBase.Enum32>[]>(new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[][], List<CompiledModelTestBase.Enum32>[]>(new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<List<CompiledModelTestBase.Enum32>[]>(new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[][], List<CompiledModelTestBase.Enum32>[]>(
                    new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(
                        new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[][], List<CompiledModelTestBase.Enum32>[]>(
                    new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(
                        new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v))),
                    keyComparer: new ListOfReferenceTypesComparer<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<List<CompiledModelTestBase.Enum32>>(new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(
                        new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<CompiledModelTestBase.Enum32>[], List<CompiledModelTestBase.Enum32>>(
                        new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                            (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum32 v) => v)),
                        keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                            (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum32 v) => v)),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum32>, CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))),
                        elementMapping: IntTypeMapping.Default.Clone(
                            comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                                (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                                (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                                (CompiledModelTestBase.Enum32 v) => v),
                            keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                                (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                                (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                                (CompiledModelTestBase.Enum32 v) => v),
                            providerValueComparer: new ValueComparer<int>(
                                (int v1, int v2) => v1 == v2,
                                (int v) => v,
                                (int v) => v),
                            converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                (CompiledModelTestBase.Enum32 value) => (int)value,
                                (int value) => (CompiledModelTestBase.Enum32)value),
                            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))));
            enum32NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum32NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection", "TestNamespace") });

            var enum64 = runtimeEntityType.AddProperty(
                "Enum64",
                typeof(CompiledModelTestBase.Enum64),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(entity), (object)CompiledModelTestBase.Enum64.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(instance), (object)CompiledModelTestBase.Enum64.Default));
            enum64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(entity) = value);
            enum64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(entity) = value);
            enum64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum64>(enum64, 48),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum64>(enum64),
                (ValueBuffer valueBuffer) => valueBuffer[48]);
            enum64.SetPropertyIndexes(
                index: 48,
                originalValueIndex: 48,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                    (CompiledModelTestBase.Enum64 value) => (long)value,
                    (long value) => (CompiledModelTestBase.Enum64)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value)));
            enum64.SetSentinelFromProviderValue(0L);
            enum64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64", "TestNamespace") });

            var enum64Array = runtimeEntityType.AddProperty(
                "Enum64Array",
                typeof(CompiledModelTestBase.Enum64[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(instance) == null);
            enum64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(entity) = value);
            enum64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(entity) = value);
            enum64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum64[]>(enum64Array, 49),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64Array),
                (ValueBuffer valueBuffer) => valueBuffer[49]);
            enum64Array.SetPropertyIndexes(
                index: 49,
                originalValueIndex: 49,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            enum64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array", "TestNamespace") });

            var enum64AsString = runtimeEntityType.AddProperty(
                "Enum64AsString",
                typeof(CompiledModelTestBase.Enum64),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enum64AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(entity), (object)CompiledModelTestBase.Enum64.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(instance), (object)CompiledModelTestBase.Enum64.Default));
            enum64AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(entity) = value);
            enum64AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(entity) = value);
            enum64AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum64>(enum64AsString, 50),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum64>(enum64AsString),
                (ValueBuffer valueBuffer) => valueBuffer[50]);
            enum64AsString.SetPropertyIndexes(
                index: 50,
                originalValueIndex: 50,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.Enum64, string>(
                    (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum64, string>(
                        (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v))));
            enum64AsString.SetSentinelFromProviderValue("Default");
            enum64AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString", "TestNamespace") });

            var enum64AsStringArray = runtimeEntityType.AddProperty(
                "Enum64AsStringArray",
                typeof(CompiledModelTestBase.Enum64[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum64AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(instance) == null);
            enum64AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(entity) = value);
            enum64AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(entity) = value);
            enum64AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum64[]>(enum64AsStringArray, 51),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[51]);
            enum64AsStringArray.SetPropertyIndexes(
                index: 51,
                originalValueIndex: 51,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, string>(
                        (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)))));
            enum64AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray", "TestNamespace") });

            var enum64AsStringCollection = runtimeEntityType.AddProperty(
                "Enum64AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum64>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum64AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(instance) == null);
            enum64AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(entity) = value);
            enum64AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(entity) = value);
            enum64AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum64>>(enum64AsStringCollection, 52),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[52]);
            enum64AsStringCollection.SetPropertyIndexes(
                index: 52,
                originalValueIndex: 52,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, string>(
                        (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, string>(
                            (CompiledModelTestBase.Enum64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum64, string, CompiledModelTestBase.Enum64>.ConvertToEnum(v)))));
            enum64AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection", "TestNamespace") });

            var enum64Collection = runtimeEntityType.AddProperty(
                "Enum64Collection",
                typeof(List<CompiledModelTestBase.Enum64>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum64Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum64Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum64Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(instance) == null);
            enum64Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(entity) = value);
            enum64Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(entity) = value);
            enum64Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum64>>(enum64Collection, 53),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64Collection),
                (ValueBuffer valueBuffer) => valueBuffer[53]);
            enum64Collection.SetPropertyIndexes(
                index: 53,
                originalValueIndex: 53,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum64Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            enum64Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum64Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection", "TestNamespace") });

            var enum8 = runtimeEntityType.AddProperty(
                "Enum8",
                typeof(CompiledModelTestBase.Enum8),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(entity), (object)CompiledModelTestBase.Enum8.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(instance), (object)CompiledModelTestBase.Enum8.Default));
            enum8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(entity) = value);
            enum8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(entity) = value);
            enum8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum8>(enum8, 54),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum8>(enum8),
                (ValueBuffer valueBuffer) => valueBuffer[54]);
            enum8.SetPropertyIndexes(
                index: 54,
                originalValueIndex: 54,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                    (CompiledModelTestBase.Enum8 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value)));
            enum8.SetSentinelFromProviderValue((short)0);
            enum8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8", "TestNamespace") });

            var enum8Array = runtimeEntityType.AddProperty(
                "Enum8Array",
                typeof(CompiledModelTestBase.Enum8[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(instance) == null);
            enum8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(entity) = value);
            enum8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(entity) = value);
            enum8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum8[]>(enum8Array, 55),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8Array),
                (ValueBuffer valueBuffer) => valueBuffer[55]);
            enum8Array.SetPropertyIndexes(
                index: 55,
                originalValueIndex: 55,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            enum8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array", "TestNamespace") });

            var enum8AsString = runtimeEntityType.AddProperty(
                "Enum8AsString",
                typeof(CompiledModelTestBase.Enum8),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enum8AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(entity), (object)CompiledModelTestBase.Enum8.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(instance), (object)CompiledModelTestBase.Enum8.Default));
            enum8AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(entity) = value);
            enum8AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(entity) = value);
            enum8AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum8>(enum8AsString, 56),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum8>(enum8AsString),
                (ValueBuffer valueBuffer) => valueBuffer[56]);
            enum8AsString.SetPropertyIndexes(
                index: 56,
                originalValueIndex: 56,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.Enum8, string>(
                    (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum8, string>(
                        (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v))));
            enum8AsString.SetSentinelFromProviderValue("Default");
            enum8AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString", "TestNamespace") });

            var enum8AsStringArray = runtimeEntityType.AddProperty(
                "Enum8AsStringArray",
                typeof(CompiledModelTestBase.Enum8[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(instance) == null);
            enum8AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(entity) = value);
            enum8AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(entity) = value);
            enum8AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum8[]>(enum8AsStringArray, 57),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[57]);
            enum8AsStringArray.SetPropertyIndexes(
                index: 57,
                originalValueIndex: 57,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, string>(
                        (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)))));
            enum8AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray", "TestNamespace") });

            var enum8AsStringCollection = runtimeEntityType.AddProperty(
                "Enum8AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum8>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(instance) == null);
            enum8AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(entity) = value);
            enum8AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(entity) = value);
            enum8AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum8>>(enum8AsStringCollection, 58),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[58]);
            enum8AsStringCollection.SetPropertyIndexes(
                index: 58,
                originalValueIndex: 58,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, string>(
                        (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, string>(
                            (CompiledModelTestBase.Enum8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.Enum8, string, CompiledModelTestBase.Enum8>.ConvertToEnum(v)))));
            enum8AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection", "TestNamespace") });

            var enum8Collection = runtimeEntityType.AddProperty(
                "Enum8Collection",
                typeof(List<CompiledModelTestBase.Enum8>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(instance) == null);
            enum8Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(entity) = value);
            enum8Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(entity) = value);
            enum8Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.Enum8>>(enum8Collection, 59),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8Collection),
                (ValueBuffer valueBuffer) => valueBuffer[59]);
            enum8Collection.SetPropertyIndexes(
                index: 59,
                originalValueIndex: 59,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.Enum8>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            enum8Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection", "TestNamespace") });

            var enum8NestedCollection = runtimeEntityType.AddProperty(
                "Enum8NestedCollection",
                typeof(CompiledModelTestBase.Enum8[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Enum8NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Enum8NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum8NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(instance) == null);
            enum8NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(entity) = value);
            enum8NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum8[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(entity) = value);
            enum8NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum8[][]>(enum8NestedCollection, 60),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum8[][]>(enum8NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[60]);
            enum8NestedCollection.SetPropertyIndexes(
                index: 60,
                originalValueIndex: 60,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum8NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum8[][], CompiledModelTestBase.Enum8[]>(new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum8[][], CompiledModelTestBase.Enum8[]>(new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8[]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum8[][], CompiledModelTestBase.Enum8[]>(
                    new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum8[][], CompiledModelTestBase.Enum8[]>(
                    new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v)),
                    keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value))),
                    elementMapping: SqlServerShortTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                            (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum8 v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                            (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum8 v) => v),
                        providerValueComparer: new ValueComparer<short>(
                            (short v1, short v2) => v1 == v2,
                            (short v) => (int)v,
                            (short v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))));
            enum8NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enum8NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection", "TestNamespace") });

            var enumToNumberConverterProperty = runtimeEntityType.AddProperty(
                "EnumToNumberConverterProperty",
                typeof(CompiledModelTestBase.Enum32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumToNumberConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumToNumberConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new EnumToNumberConverter<CompiledModelTestBase.Enum32, int>());
            enumToNumberConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(entity), (object)CompiledModelTestBase.Enum32.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(instance), (object)CompiledModelTestBase.Enum32.Default));
            enumToNumberConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(entity) = value);
            enumToNumberConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(entity) = value);
            enumToNumberConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32>(enumToNumberConverterProperty, 61),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32>(enumToNumberConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[61]);
            enumToNumberConverterProperty.SetPropertyIndexes(
                index: 61,
                originalValueIndex: 61,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumToNumberConverterProperty.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                    (CompiledModelTestBase.Enum32 value) => (int)value,
                    (int value) => (CompiledModelTestBase.Enum32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value)));
            enumToNumberConverterProperty.SetSentinelFromProviderValue(0);
            enumToNumberConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumToNumberConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty", "TestNamespace") });

            var enumToStringConverterProperty = runtimeEntityType.AddProperty(
                "EnumToStringConverterProperty",
                typeof(CompiledModelTestBase.Enum32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new EnumToStringConverter<CompiledModelTestBase.Enum32>());
            enumToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(entity), (object)CompiledModelTestBase.Enum32.Default),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(instance), (object)CompiledModelTestBase.Enum32.Default));
            enumToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(entity) = value);
            enumToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.Enum32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(entity) = value);
            enumToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.Enum32>(enumToStringConverterProperty, 62),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.Enum32>(enumToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[62]);
            enumToStringConverterProperty.SetPropertyIndexes(
                index: 62,
                originalValueIndex: 62,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, string>(
                    (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, string>(
                        (CompiledModelTestBase.Enum32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.Enum32, string, CompiledModelTestBase.Enum32>.ConvertToEnum(v))));
            enumToStringConverterProperty.SetSentinelFromProviderValue("Default");
            enumToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty", "TestNamespace") });

            var enumU16 = runtimeEntityType.AddProperty(
                "EnumU16",
                typeof(CompiledModelTestBase.EnumU16),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(entity), (object)CompiledModelTestBase.EnumU16.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(instance), (object)CompiledModelTestBase.EnumU16.Min));
            enumU16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(entity) = value);
            enumU16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(entity) = value);
            enumU16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU16>(enumU16, 63),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU16>(enumU16),
                (ValueBuffer valueBuffer) => valueBuffer[63]);
            enumU16.SetPropertyIndexes(
                index: 63,
                originalValueIndex: 63,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                    (CompiledModelTestBase.EnumU16 value) => (int)value,
                    (int value) => (CompiledModelTestBase.EnumU16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value)));
            enumU16.SetSentinelFromProviderValue(0);
            enumU16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16", "TestNamespace") });

            var enumU16Array = runtimeEntityType.AddProperty(
                "EnumU16Array",
                typeof(CompiledModelTestBase.EnumU16[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(instance) == null);
            enumU16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(entity) = value);
            enumU16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(entity) = value);
            enumU16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU16[]>(enumU16Array, 64),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16Array),
                (ValueBuffer valueBuffer) => valueBuffer[64]);
            enumU16Array.SetPropertyIndexes(
                index: 64,
                originalValueIndex: 64,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            enumU16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array", "TestNamespace") });

            var enumU16AsString = runtimeEntityType.AddProperty(
                "EnumU16AsString",
                typeof(CompiledModelTestBase.EnumU16),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enumU16AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(entity), (object)CompiledModelTestBase.EnumU16.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(instance), (object)CompiledModelTestBase.EnumU16.Min));
            enumU16AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(entity) = value);
            enumU16AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(entity) = value);
            enumU16AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU16>(enumU16AsString, 65),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU16>(enumU16AsString),
                (ValueBuffer valueBuffer) => valueBuffer[65]);
            enumU16AsString.SetPropertyIndexes(
                index: 65,
                originalValueIndex: 65,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v))));
            enumU16AsString.SetSentinelFromProviderValue("Min");
            enumU16AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString", "TestNamespace") });

            var enumU16AsStringArray = runtimeEntityType.AddProperty(
                "EnumU16AsStringArray",
                typeof(CompiledModelTestBase.EnumU16[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU16AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(instance) == null);
            enumU16AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(entity) = value);
            enumU16AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU16[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(entity) = value);
            enumU16AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU16[]>(enumU16AsStringArray, 66),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[66]);
            enumU16AsStringArray.SetPropertyIndexes(
                index: 66,
                originalValueIndex: 66,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)))));
            enumU16AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray", "TestNamespace") });

            var enumU16AsStringCollection = runtimeEntityType.AddProperty(
                "EnumU16AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU16>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU16AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(instance) == null);
            enumU16AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(entity) = value);
            enumU16AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(entity) = value);
            enumU16AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU16>>(enumU16AsStringCollection, 67),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[67]);
            enumU16AsStringCollection.SetPropertyIndexes(
                index: 67,
                originalValueIndex: 67,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, string>(
                            (CompiledModelTestBase.EnumU16 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU16, string, CompiledModelTestBase.EnumU16>.ConvertToEnum(v)))));
            enumU16AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection", "TestNamespace") });

            var enumU16Collection = runtimeEntityType.AddProperty(
                "EnumU16Collection",
                typeof(List<CompiledModelTestBase.EnumU16>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU16Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU16Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU16Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(instance) == null);
            enumU16Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(entity) = value);
            enumU16Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(entity) = value);
            enumU16Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU16>>(enumU16Collection, 68),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16Collection),
                (ValueBuffer valueBuffer) => valueBuffer[68]);
            enumU16Collection.SetPropertyIndexes(
                index: 68,
                originalValueIndex: 68,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU16Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            enumU16Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU16Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection", "TestNamespace") });

            var enumU32 = runtimeEntityType.AddProperty(
                "EnumU32",
                typeof(CompiledModelTestBase.EnumU32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(entity), (object)CompiledModelTestBase.EnumU32.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(instance), (object)CompiledModelTestBase.EnumU32.Min));
            enumU32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(entity) = value);
            enumU32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(entity) = value);
            enumU32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU32>(enumU32, 69),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU32>(enumU32),
                (ValueBuffer valueBuffer) => valueBuffer[69]);
            enumU32.SetPropertyIndexes(
                index: 69,
                originalValueIndex: 69,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                    (CompiledModelTestBase.EnumU32 value) => (long)value,
                    (long value) => (CompiledModelTestBase.EnumU32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value)));
            enumU32.SetSentinelFromProviderValue(0L);
            enumU32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32", "TestNamespace") });

            var enumU32Array = runtimeEntityType.AddProperty(
                "EnumU32Array",
                typeof(CompiledModelTestBase.EnumU32[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(instance) == null);
            enumU32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(entity) = value);
            enumU32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(entity) = value);
            enumU32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU32[]>(enumU32Array, 70),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32Array),
                (ValueBuffer valueBuffer) => valueBuffer[70]);
            enumU32Array.SetPropertyIndexes(
                index: 70,
                originalValueIndex: 70,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            enumU32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array", "TestNamespace") });

            var enumU32AsString = runtimeEntityType.AddProperty(
                "EnumU32AsString",
                typeof(CompiledModelTestBase.EnumU32),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enumU32AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(entity), (object)CompiledModelTestBase.EnumU32.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(instance), (object)CompiledModelTestBase.EnumU32.Min));
            enumU32AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(entity) = value);
            enumU32AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(entity) = value);
            enumU32AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU32>(enumU32AsString, 71),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU32>(enumU32AsString),
                (ValueBuffer valueBuffer) => valueBuffer[71]);
            enumU32AsString.SetPropertyIndexes(
                index: 71,
                originalValueIndex: 71,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v))));
            enumU32AsString.SetSentinelFromProviderValue("Min");
            enumU32AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString", "TestNamespace") });

            var enumU32AsStringArray = runtimeEntityType.AddProperty(
                "EnumU32AsStringArray",
                typeof(CompiledModelTestBase.EnumU32[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU32AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(instance) == null);
            enumU32AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(entity) = value);
            enumU32AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU32[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(entity) = value);
            enumU32AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU32[]>(enumU32AsStringArray, 72),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[72]);
            enumU32AsStringArray.SetPropertyIndexes(
                index: 72,
                originalValueIndex: 72,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)))));
            enumU32AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray", "TestNamespace") });

            var enumU32AsStringCollection = runtimeEntityType.AddProperty(
                "EnumU32AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU32>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU32AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(instance) == null);
            enumU32AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(entity) = value);
            enumU32AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(entity) = value);
            enumU32AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU32>>(enumU32AsStringCollection, 73),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[73]);
            enumU32AsStringCollection.SetPropertyIndexes(
                index: 73,
                originalValueIndex: 73,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, string>(
                            (CompiledModelTestBase.EnumU32 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU32, string, CompiledModelTestBase.EnumU32>.ConvertToEnum(v)))));
            enumU32AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection", "TestNamespace") });

            var enumU32Collection = runtimeEntityType.AddProperty(
                "EnumU32Collection",
                typeof(List<CompiledModelTestBase.EnumU32>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU32Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU32Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU32Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(instance) == null);
            enumU32Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(entity) = value);
            enumU32Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(entity) = value);
            enumU32Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU32>>(enumU32Collection, 74),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32Collection),
                (ValueBuffer valueBuffer) => valueBuffer[74]);
            enumU32Collection.SetPropertyIndexes(
                index: 74,
                originalValueIndex: 74,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU32Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            enumU32Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU32Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection", "TestNamespace") });

            var enumU64 = runtimeEntityType.AddProperty(
                "EnumU64",
                typeof(CompiledModelTestBase.EnumU64),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(entity), (object)CompiledModelTestBase.EnumU64.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(instance), (object)CompiledModelTestBase.EnumU64.Min));
            enumU64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(entity) = value);
            enumU64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(entity) = value);
            enumU64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU64>(enumU64, 75),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU64>(enumU64),
                (ValueBuffer valueBuffer) => valueBuffer[75]);
            enumU64.SetPropertyIndexes(
                index: 75,
                originalValueIndex: 75,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                    (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                    (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)));
            enumU64.SetSentinelFromProviderValue(0m);
            enumU64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64", "TestNamespace") });

            var enumU64Array = runtimeEntityType.AddProperty(
                "EnumU64Array",
                typeof(CompiledModelTestBase.EnumU64[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(instance) == null);
            enumU64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(entity) = value);
            enumU64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(entity) = value);
            enumU64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU64[]>(enumU64Array, 76),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64Array),
                (ValueBuffer valueBuffer) => valueBuffer[76]);
            enumU64Array.SetPropertyIndexes(
                index: 76,
                originalValueIndex: 76,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            enumU64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array", "TestNamespace") });

            var enumU64AsString = runtimeEntityType.AddProperty(
                "EnumU64AsString",
                typeof(CompiledModelTestBase.EnumU64),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enumU64AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(entity), (object)CompiledModelTestBase.EnumU64.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(instance), (object)CompiledModelTestBase.EnumU64.Min));
            enumU64AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(entity) = value);
            enumU64AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(entity) = value);
            enumU64AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU64>(enumU64AsString, 77),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU64>(enumU64AsString),
                (ValueBuffer valueBuffer) => valueBuffer[77]);
            enumU64AsString.SetPropertyIndexes(
                index: 77,
                originalValueIndex: 77,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v))));
            enumU64AsString.SetSentinelFromProviderValue("Min");
            enumU64AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString", "TestNamespace") });

            var enumU64AsStringArray = runtimeEntityType.AddProperty(
                "EnumU64AsStringArray",
                typeof(CompiledModelTestBase.EnumU64[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(instance) == null);
            enumU64AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(entity) = value);
            enumU64AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(entity) = value);
            enumU64AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU64[]>(enumU64AsStringArray, 78),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[78]);
            enumU64AsStringArray.SetPropertyIndexes(
                index: 78,
                originalValueIndex: 78,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)))));
            enumU64AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray", "TestNamespace") });

            var enumU64AsStringCollection = runtimeEntityType.AddProperty(
                "EnumU64AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU64>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(instance) == null);
            enumU64AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(entity) = value);
            enumU64AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(entity) = value);
            enumU64AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU64>>(enumU64AsStringCollection, 79),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[79]);
            enumU64AsStringCollection.SetPropertyIndexes(
                index: 79,
                originalValueIndex: 79,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, string>(
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU64, string, CompiledModelTestBase.EnumU64>.ConvertToEnum(v)))));
            enumU64AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection", "TestNamespace") });

            var enumU64Collection = runtimeEntityType.AddProperty(
                "EnumU64Collection",
                typeof(List<CompiledModelTestBase.EnumU64>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(instance) == null);
            enumU64Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(entity) = value);
            enumU64Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(entity) = value);
            enumU64Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU64>>(enumU64Collection, 80),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64Collection),
                (ValueBuffer valueBuffer) => valueBuffer[80]);
            enumU64Collection.SetPropertyIndexes(
                index: 80,
                originalValueIndex: 80,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            enumU64Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection", "TestNamespace") });

            var enumU64NestedCollection = runtimeEntityType.AddProperty(
                "EnumU64NestedCollection",
                typeof(CompiledModelTestBase.EnumU64[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU64NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU64NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU64NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(instance) == null);
            enumU64NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(entity) = value);
            enumU64NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU64[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(entity) = value);
            enumU64NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU64[][]>(enumU64NestedCollection, 81),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU64[][]>(enumU64NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[81]);
            enumU64NestedCollection.SetPropertyIndexes(
                index: 81,
                originalValueIndex: 81,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU64NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.EnumU64[][], CompiledModelTestBase.EnumU64[]>(new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.EnumU64[][], CompiledModelTestBase.EnumU64[]>(new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64[]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.EnumU64[][], CompiledModelTestBase.EnumU64[]>(
                    new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.EnumU64[][], CompiledModelTestBase.EnumU64[]>(
                    new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v)),
                    keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                    elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                            (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.EnumU64 v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                            (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.EnumU64 v) => v),
                        providerValueComparer: new ValueComparer<decimal>(
                            (decimal v1, decimal v2) => v1 == v2,
                            (decimal v) => ((object)v).GetHashCode(),
                            (decimal v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "decimal(20,0)",
                            precision: 20,
                            scale: 0),
                        converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))));
            enumU64NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU64NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection", "TestNamespace") });

            var enumU8 = runtimeEntityType.AddProperty(
                "EnumU8",
                typeof(CompiledModelTestBase.EnumU8),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(entity), (object)CompiledModelTestBase.EnumU8.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(instance), (object)CompiledModelTestBase.EnumU8.Min));
            enumU8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(entity) = value);
            enumU8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(entity) = value);
            enumU8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU8>(enumU8, 82),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU8>(enumU8),
                (ValueBuffer valueBuffer) => valueBuffer[82]);
            enumU8.SetPropertyIndexes(
                index: 82,
                originalValueIndex: 82,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                    (CompiledModelTestBase.EnumU8 value) => (byte)value,
                    (byte value) => (CompiledModelTestBase.EnumU8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value)));
            enumU8.SetSentinelFromProviderValue((byte)0);
            enumU8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8", "TestNamespace") });

            var enumU8Array = runtimeEntityType.AddProperty(
                "EnumU8Array",
                typeof(CompiledModelTestBase.EnumU8[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(instance) == null);
            enumU8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(entity) = value);
            enumU8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(entity) = value);
            enumU8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU8[]>(enumU8Array, 83),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8Array),
                (ValueBuffer valueBuffer) => valueBuffer[83]);
            enumU8Array.SetPropertyIndexes(
                index: 83,
                originalValueIndex: 83,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            enumU8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array", "TestNamespace") });

            var enumU8AsString = runtimeEntityType.AddProperty(
                "EnumU8AsString",
                typeof(CompiledModelTestBase.EnumU8),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                providerPropertyType: typeof(string));
            enumU8AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(entity), (object)CompiledModelTestBase.EnumU8.Min),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => object.Equals((object)UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(instance), (object)CompiledModelTestBase.EnumU8.Min));
            enumU8AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(entity) = value);
            enumU8AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8 value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(entity) = value);
            enumU8AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU8>(enumU8AsString, 84),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU8>(enumU8AsString),
                (ValueBuffer valueBuffer) => valueBuffer[84]);
            enumU8AsString.SetPropertyIndexes(
                index: 84,
                originalValueIndex: 84,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8AsString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                    (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v))));
            enumU8AsString.SetSentinelFromProviderValue("Min");
            enumU8AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString", "TestNamespace") });

            var enumU8AsStringArray = runtimeEntityType.AddProperty(
                "EnumU8AsStringArray",
                typeof(CompiledModelTestBase.EnumU8[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU8AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(instance) == null);
            enumU8AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(entity) = value);
            enumU8AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, CompiledModelTestBase.EnumU8[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(entity) = value);
            enumU8AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.EnumU8[]>(enumU8AsStringArray, 85),
                (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[85]);
            enumU8AsStringArray.SetPropertyIndexes(
                index: 85,
                originalValueIndex: 85,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8>(new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)))));
            enumU8AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray", "TestNamespace") });

            var enumU8AsStringCollection = runtimeEntityType.AddProperty(
                "EnumU8AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU8>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU8AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(instance) == null);
            enumU8AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(entity) = value);
            enumU8AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(entity) = value);
            enumU8AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU8>>(enumU8AsStringCollection, 86),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[86]);
            enumU8AsStringCollection.SetPropertyIndexes(
                index: 86,
                originalValueIndex: 86,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                        (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, string>(
                            (CompiledModelTestBase.EnumU8 v) => ((object)v).ToString(),
                            (string v) => StringEnumConverter<CompiledModelTestBase.EnumU8, string, CompiledModelTestBase.EnumU8>.ConvertToEnum(v)))));
            enumU8AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection", "TestNamespace") });

            var enumU8Collection = runtimeEntityType.AddProperty(
                "EnumU8Collection",
                typeof(List<CompiledModelTestBase.EnumU8>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("EnumU8Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<EnumU8Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enumU8Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(instance) == null);
            enumU8Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(entity) = value);
            enumU8Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(entity) = value);
            enumU8Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<CompiledModelTestBase.EnumU8>>(enumU8Collection, 87),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8Collection),
                (ValueBuffer valueBuffer) => valueBuffer[87]);
            enumU8Collection.SetPropertyIndexes(
                index: 87,
                originalValueIndex: 87,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enumU8Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                keyComparer: new ListOfValueTypesComparer<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8>(new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<CompiledModelTestBase.EnumU8>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            enumU8Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            enumU8Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection", "TestNamespace") });

            var @float = runtimeEntityType.AddProperty(
                "Float",
                typeof(float),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Float", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Float>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0f);
            @float.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(entity).Equals(0F),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(instance).Equals(0F));
            @float.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, float value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(entity) = value);
            @float.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, float value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(entity) = value);
            @float.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<float>(@float, 88),
                (InternalEntityEntry entry) => entry.GetCurrentValue<float>(@float),
                (ValueBuffer valueBuffer) => valueBuffer[88]);
            @float.SetPropertyIndexes(
                index: 88,
                originalValueIndex: 88,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @float.TypeMapping = SqlServerFloatTypeMapping.Default.Clone(
                comparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v),
                keyComparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v),
                providerValueComparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v));
            @float.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @float.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float", "TestNamespace") });

            var floatArray = runtimeEntityType.AddProperty(
                "FloatArray",
                typeof(float[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("FloatArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<FloatArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            floatArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(instance) == null);
            floatArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, float[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(entity) = value);
            floatArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, float[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(entity) = value);
            floatArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<float[]>(floatArray, 89),
                (InternalEntityEntry entry) => entry.GetCurrentValue<float[]>(floatArray),
                (ValueBuffer valueBuffer) => valueBuffer[89]);
            floatArray.SetPropertyIndexes(
                index: 89,
                originalValueIndex: 89,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            floatArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<float[], float>(new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v)),
                keyComparer: new ListOfValueTypesComparer<float[], float>(new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<float>(new JsonCollectionOfStructsReaderWriter<float[], float>(
                    JsonFloatReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<float[], float>(
                    JsonFloatReaderWriter.Instance),
                elementMapping: SqlServerFloatTypeMapping.Default.Clone(
                    comparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v),
                    keyComparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v),
                    providerValueComparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v)));
            floatArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            floatArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray", "TestNamespace") });

            var guid = runtimeEntityType.AddProperty(
                "Guid",
                typeof(Guid),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Guid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Guid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            guid.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            guid.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(entity) = value);
            guid.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(entity) = value);
            guid.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(guid, 90),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(guid),
                (ValueBuffer valueBuffer) => valueBuffer[90]);
            guid.SetPropertyIndexes(
                index: 90,
                originalValueIndex: 90,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guid.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uniqueidentifier"));
            guid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            guid.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid", "TestNamespace") });

            var guidArray = runtimeEntityType.AddProperty(
                "GuidArray",
                typeof(Guid[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("GuidArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<GuidArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            guidArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(instance) == null);
            guidArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(entity) = value);
            guidArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(entity) = value);
            guidArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid[]>(guidArray, 91),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Guid[]>(guidArray),
                (ValueBuffer valueBuffer) => valueBuffer[91]);
            guidArray.SetPropertyIndexes(
                index: 91,
                originalValueIndex: 91,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guidArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)),
                keyComparer: new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Guid>(new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                    JsonGuidReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                    JsonGuidReaderWriter.Instance),
                elementMapping: GuidTypeMapping.Default.Clone(
                    comparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    keyComparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    providerValueComparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "uniqueidentifier")));
            guidArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            guidArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray", "TestNamespace") });

            var guidNestedCollection = runtimeEntityType.AddProperty(
                "GuidNestedCollection",
                typeof(ICollection<Guid[][]>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("GuidNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<GuidNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            guidNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(instance) == null);
            guidNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, ICollection<Guid[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(entity) = value);
            guidNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, ICollection<Guid[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(entity) = value);
            guidNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<ICollection<Guid[][]>>(guidNestedCollection, 92),
                (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<Guid[][]>>(guidNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[92]);
            guidNestedCollection.SetPropertyIndexes(
                index: 92,
                originalValueIndex: 92,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guidNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<Guid[][]>, Guid[][]>(new ListOfReferenceTypesComparer<Guid[][], Guid[]>(new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<List<Guid[][]>, Guid[][]>(new ListOfReferenceTypesComparer<Guid[][], Guid[]>(new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Guid[][]>(new JsonCollectionOfReferencesReaderWriter<List<Guid[][]>, Guid[][]>(
                    new JsonCollectionOfReferencesReaderWriter<Guid[][], Guid[]>(
                        new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<Guid[][]>, Guid[][]>(
                    new JsonCollectionOfReferencesReaderWriter<Guid[][], Guid[]>(
                        new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<Guid[][], Guid[]>(new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v))),
                    keyComparer: new ListOfReferenceTypesComparer<Guid[][], Guid[]>(new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<Guid[]>(new JsonCollectionOfReferencesReaderWriter<Guid[][], Guid[]>(
                        new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<Guid[][], Guid[]>(
                        new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance)),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                            (Guid v1, Guid v2) => v1 == v2,
                            (Guid v) => ((object)v).GetHashCode(),
                            (Guid v) => v)),
                        keyComparer: new ListOfValueTypesComparer<Guid[], Guid>(new ValueComparer<Guid>(
                            (Guid v1, Guid v2) => v1 == v2,
                            (Guid v) => ((object)v).GetHashCode(),
                            (Guid v) => v)),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<Guid>(new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance)),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<Guid[], Guid>(
                            JsonGuidReaderWriter.Instance),
                        elementMapping: GuidTypeMapping.Default.Clone(
                            comparer: new ValueComparer<Guid>(
                                (Guid v1, Guid v2) => v1 == v2,
                                (Guid v) => ((object)v).GetHashCode(),
                                (Guid v) => v),
                            keyComparer: new ValueComparer<Guid>(
                                (Guid v1, Guid v2) => v1 == v2,
                                (Guid v) => ((object)v).GetHashCode(),
                                (Guid v) => v),
                            providerValueComparer: new ValueComparer<Guid>(
                                (Guid v1, Guid v2) => v1 == v2,
                                (Guid v) => ((object)v).GetHashCode(),
                                (Guid v) => v),
                            mappingInfo: new RelationalTypeMappingInfo(
                                storeTypeName: "uniqueidentifier")))));
            guidNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            guidNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection", "TestNamespace") });

            var guidToBytesConverterProperty = runtimeEntityType.AddProperty(
                "GuidToBytesConverterProperty",
                typeof(Guid),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("GuidToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<GuidToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new GuidToBytesConverter());
            guidToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            guidToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(entity) = value);
            guidToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(entity) = value);
            guidToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(guidToBytesConverterProperty, 93),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(guidToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[93]);
            guidToBytesConverterProperty.SetPropertyIndexes(
                index: 93,
                originalValueIndex: 93,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guidToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<Guid, byte[]>(
                    (Guid v) => v.ToByteArray(),
                    (byte[] v) => new Guid(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Guid, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<Guid, byte[]>(
                        (Guid v) => v.ToByteArray(),
                        (byte[] v) => new Guid(v))));
            guidToBytesConverterProperty.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 });
            guidToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            guidToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty", "TestNamespace") });

            var guidToStringConverterProperty = runtimeEntityType.AddProperty(
                "GuidToStringConverterProperty",
                typeof(Guid),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("GuidToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<GuidToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new GuidToStringConverter());
            guidToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            guidToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(entity) = value);
            guidToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Guid value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(entity) = value);
            guidToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(guidToStringConverterProperty, 94),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(guidToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[94]);
            guidToStringConverterProperty.SetPropertyIndexes(
                index: 94,
                originalValueIndex: 94,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            guidToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(36)",
                    size: 36,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<Guid, string>(
                    (Guid v) => v.ToString("D"),
                    (string v) => new Guid(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Guid, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Guid, string>(
                        (Guid v) => v.ToString("D"),
                        (string v) => new Guid(v))));
            guidToStringConverterProperty.SetSentinelFromProviderValue("00000000-0000-0000-0000-000000000000");
            guidToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            guidToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty", "TestNamespace") });

            var iPAddress = runtimeEntityType.AddProperty(
                "IPAddress",
                typeof(IPAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IPAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IPAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            iPAddress.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(instance) == null);
            iPAddress.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(entity) = value);
            iPAddress.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(entity) = value);
            iPAddress.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress>(iPAddress, 95),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress>(iPAddress),
                (ValueBuffer valueBuffer) => valueBuffer[95]);
            iPAddress.SetPropertyIndexes(
                index: 95,
                originalValueIndex: 95,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            iPAddress.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                keyComparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(45)",
                    size: 45,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<IPAddress, string>(
                    (IPAddress v) => ((object)v).ToString(),
                    (string v) => IPAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IPAddress, string>(
                        (IPAddress v) => ((object)v).ToString(),
                        (string v) => IPAddress.Parse(v))));
            iPAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            iPAddress.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress", "TestNamespace") });

            var iPAddressArray = runtimeEntityType.AddProperty(
                "IPAddressArray",
                typeof(IPAddress[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IPAddressArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IPAddressArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            iPAddressArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(instance) == null);
            iPAddressArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(entity) = value);
            iPAddressArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(entity) = value);
            iPAddressArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress[]>(iPAddressArray, 96),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress[]>(iPAddressArray),
                (ValueBuffer valueBuffer) => valueBuffer[96]);
            iPAddressArray.SetPropertyIndexes(
                index: 96,
                originalValueIndex: 96,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            iPAddressArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<IPAddress[], IPAddress>(new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<IPAddress[], IPAddress>(new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<IPAddress>(new JsonCollectionOfReferencesReaderWriter<IPAddress[], IPAddress>(
                    new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<IPAddress[], IPAddress>(
                    new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<IPAddress>(
                        (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                        (IPAddress v) => ((object)v).GetHashCode(),
                        (IPAddress v) => v),
                    keyComparer: new ValueComparer<IPAddress>(
                        (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                        (IPAddress v) => ((object)v).GetHashCode(),
                        (IPAddress v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(45)",
                        size: 45,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<IPAddress, string>(
                        (IPAddress v) => ((object)v).ToString(),
                        (string v) => IPAddress.Parse(v)),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v)))));
            iPAddressArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            iPAddressArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray", "TestNamespace") });

            var iPAddressToBytesConverterProperty = runtimeEntityType.AddProperty(
                "IPAddressToBytesConverterProperty",
                typeof(IPAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IPAddressToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IPAddressToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new IPAddressToBytesConverter());
            iPAddressToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(instance) == null);
            iPAddressToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(entity) = value);
            iPAddressToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(entity) = value);
            iPAddressToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress>(iPAddressToBytesConverterProperty, 97),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress>(iPAddressToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[97]);
            iPAddressToBytesConverterProperty.SetPropertyIndexes(
                index: 97,
                originalValueIndex: 97,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            iPAddressToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                keyComparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(16)",
                    size: 16),
                converter: new ValueConverter<IPAddress, byte[]>(
                    (IPAddress v) => v.GetAddressBytes(),
                    (byte[] v) => new IPAddress(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<IPAddress, byte[]>(
                        (IPAddress v) => v.GetAddressBytes(),
                        (byte[] v) => new IPAddress(v))));
            iPAddressToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            iPAddressToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty", "TestNamespace") });

            var iPAddressToStringConverterProperty = runtimeEntityType.AddProperty(
                "IPAddressToStringConverterProperty",
                typeof(IPAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IPAddressToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IPAddressToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new IPAddressToStringConverter());
            iPAddressToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(instance) == null);
            iPAddressToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(entity) = value);
            iPAddressToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(entity) = value);
            iPAddressToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress>(iPAddressToStringConverterProperty, 98),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress>(iPAddressToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[98]);
            iPAddressToStringConverterProperty.SetPropertyIndexes(
                index: 98,
                originalValueIndex: 98,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            iPAddressToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                keyComparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(45)",
                    size: 45,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<IPAddress, string>(
                    (IPAddress v) => ((object)v).ToString(),
                    (string v) => IPAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IPAddress, string>(
                        (IPAddress v) => ((object)v).ToString(),
                        (string v) => IPAddress.Parse(v))));
            iPAddressToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            iPAddressToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty", "TestNamespace") });

            var int16 = runtimeEntityType.AddProperty(
                "Int16",
                typeof(short),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (short)0);
            int16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(instance) == 0);
            int16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, short value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(entity) = value);
            int16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, short value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(entity) = value);
            int16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<short>(int16, 99),
                (InternalEntityEntry entry) => entry.GetCurrentValue<short>(int16),
                (ValueBuffer valueBuffer) => valueBuffer[99]);
            int16.SetPropertyIndexes(
                index: 99,
                originalValueIndex: 99,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int16.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                keyComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v));
            int16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16", "TestNamespace") });

            var int16Array = runtimeEntityType.AddProperty(
                "Int16Array",
                typeof(short[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(instance) == null);
            int16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, short[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(entity) = value);
            int16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, short[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(entity) = value);
            int16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<short[]>(int16Array, 100),
                (InternalEntityEntry entry) => entry.GetCurrentValue<short[]>(int16Array),
                (ValueBuffer valueBuffer) => valueBuffer[100]);
            int16Array.SetPropertyIndexes(
                index: 100,
                originalValueIndex: 100,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<short[], short>(new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v)),
                keyComparer: new ListOfValueTypesComparer<short[], short>(new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<short>(new JsonCollectionOfStructsReaderWriter<short[], short>(
                    JsonInt16ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<short[], short>(
                    JsonInt16ReaderWriter.Instance),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    keyComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v)));
            int16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array", "TestNamespace") });

            var int32 = runtimeEntityType.AddProperty(
                "Int32",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            int32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(instance) == 0);
            int32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(entity) = value);
            int32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(entity) = value);
            int32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(int32, 101),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(int32),
                (ValueBuffer valueBuffer) => valueBuffer[101]);
            int32.SetPropertyIndexes(
                index: 101,
                originalValueIndex: 101,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int32.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            int32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32", "TestNamespace") });

            var int32Array = runtimeEntityType.AddProperty(
                "Int32Array",
                typeof(int[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(instance) == null);
            int32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(entity) = value);
            int32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(entity) = value);
            int32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int[]>(int32Array, 102),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int[]>(int32Array),
                (ValueBuffer valueBuffer) => valueBuffer[102]);
            int32Array.SetPropertyIndexes(
                index: 102,
                originalValueIndex: 102,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v)),
                keyComparer: new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<int>(new JsonCollectionOfStructsReaderWriter<int[], int>(
                    JsonInt32ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<int[], int>(
                    JsonInt32ReaderWriter.Instance),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    keyComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v)));
            int32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array", "TestNamespace") });

            var int32NestedCollection = runtimeEntityType.AddProperty(
                "Int32NestedCollection",
                typeof(int[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int32NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int32NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int32NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(instance) == null);
            int32NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(entity) = value);
            int32NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(entity) = value);
            int32NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int[][]>(int32NestedCollection, 103),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int[][]>(int32NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[103]);
            int32NestedCollection.SetPropertyIndexes(
                index: 103,
                originalValueIndex: 103,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int32NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<int[][], int[]>(new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<int[][], int[]>(new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<int[]>(new JsonCollectionOfReferencesReaderWriter<int[][], int[]>(
                    new JsonCollectionOfStructsReaderWriter<int[], int>(
                        JsonInt32ReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<int[][], int[]>(
                    new JsonCollectionOfStructsReaderWriter<int[], int>(
                        JsonInt32ReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v)),
                    keyComparer: new ListOfValueTypesComparer<int[], int>(new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<int>(new JsonCollectionOfStructsReaderWriter<int[], int>(
                        JsonInt32ReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<int[], int>(
                        JsonInt32ReaderWriter.Instance),
                    elementMapping: IntTypeMapping.Default.Clone(
                        comparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v),
                        keyComparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v))));
            int32NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int32NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection", "TestNamespace") });

            var int64 = runtimeEntityType.AddProperty(
                "Int64",
                typeof(long),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0L);
            int64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(entity) == 0L,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(instance) == 0L);
            int64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, long value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(entity) = value);
            int64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, long value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(entity) = value);
            int64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<long>(int64, 104),
                (InternalEntityEntry entry) => entry.GetCurrentValue<long>(int64),
                (ValueBuffer valueBuffer) => valueBuffer[104]);
            int64.SetPropertyIndexes(
                index: 104,
                originalValueIndex: 104,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int64.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v));
            int64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64", "TestNamespace") });

            var int64Array = runtimeEntityType.AddProperty(
                "Int64Array",
                typeof(long[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(instance) == null);
            int64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, long[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(entity) = value);
            int64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, long[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(entity) = value);
            int64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<long[]>(int64Array, 105),
                (InternalEntityEntry entry) => entry.GetCurrentValue<long[]>(int64Array),
                (ValueBuffer valueBuffer) => valueBuffer[105]);
            int64Array.SetPropertyIndexes(
                index: 105,
                originalValueIndex: 105,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v)),
                keyComparer: new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<long>(new JsonCollectionOfStructsReaderWriter<long[], long>(
                    JsonInt64ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<long[], long>(
                    JsonInt64ReaderWriter.Instance),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    keyComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v)));
            int64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array", "TestNamespace") });

            var int64NestedCollection = runtimeEntityType.AddProperty(
                "Int64NestedCollection",
                typeof(IList<long[]>[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int64NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int64NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int64NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(instance) == null);
            int64NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IList<long[]>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(entity) = value);
            int64NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IList<long[]>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(entity) = value);
            int64NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<long[]>[]>(int64NestedCollection, 106),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IList<long[]>[]>(int64NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[106]);
            int64NestedCollection.SetPropertyIndexes(
                index: 106,
                originalValueIndex: 106,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int64NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<IList<long[]>[], IList<long[]>>(new ListOfReferenceTypesComparer<List<long[]>, long[]>(new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<IList<long[]>[], IList<long[]>>(new ListOfReferenceTypesComparer<List<long[]>, long[]>(new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<IList<long[]>>(new JsonCollectionOfReferencesReaderWriter<IList<long[]>[], IList<long[]>>(
                    new JsonCollectionOfReferencesReaderWriter<List<long[]>, long[]>(
                        new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<IList<long[]>[], IList<long[]>>(
                    new JsonCollectionOfReferencesReaderWriter<List<long[]>, long[]>(
                        new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<List<long[]>, long[]>(new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v))),
                    keyComparer: new ListOfReferenceTypesComparer<List<long[]>, long[]>(new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<long[]>(new JsonCollectionOfReferencesReaderWriter<List<long[]>, long[]>(
                        new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<long[]>, long[]>(
                        new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance)),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                            (long v1, long v2) => v1 == v2,
                            (long v) => ((object)v).GetHashCode(),
                            (long v) => v)),
                        keyComparer: new ListOfValueTypesComparer<long[], long>(new ValueComparer<long>(
                            (long v1, long v2) => v1 == v2,
                            (long v) => ((object)v).GetHashCode(),
                            (long v) => v)),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<long>(new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance)),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<long[], long>(
                            JsonInt64ReaderWriter.Instance),
                        elementMapping: SqlServerLongTypeMapping.Default.Clone(
                            comparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v),
                            keyComparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v),
                            providerValueComparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v)))));
            int64NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int64NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection", "TestNamespace") });

            var int8 = runtimeEntityType.AddProperty(
                "Int8",
                typeof(sbyte),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(instance) == 0);
            int8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(entity) = value);
            int8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(entity) = value);
            int8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<sbyte>(int8, 107),
                (InternalEntityEntry entry) => entry.GetCurrentValue<sbyte>(int8),
                (ValueBuffer valueBuffer) => valueBuffer[107]);
            int8.SetPropertyIndexes(
                index: 107,
                originalValueIndex: 107,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int8.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v),
                keyComparer: new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<sbyte, short>(
                    (sbyte v) => (short)v,
                    (short v) => (sbyte)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<sbyte, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<sbyte, short>(
                        (sbyte v) => (short)v,
                        (short v) => (sbyte)v)));
            int8.SetSentinelFromProviderValue((short)0);
            int8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8", "TestNamespace") });

            var int8Array = runtimeEntityType.AddProperty(
                "Int8Array",
                typeof(sbyte[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(instance) == null);
            int8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(entity) = value);
            int8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(entity) = value);
            int8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<sbyte[]>(int8Array, 108),
                (InternalEntityEntry entry) => entry.GetCurrentValue<sbyte[]>(int8Array),
                (ValueBuffer valueBuffer) => valueBuffer[108]);
            int8Array.SetPropertyIndexes(
                index: 108,
                originalValueIndex: 108,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v)),
                keyComparer: new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<sbyte>(new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                    new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                    new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v),
                    keyComparer: new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<sbyte, short>(
                        (sbyte v) => (short)v,
                        (short v) => (sbyte)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v))));
            int8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array", "TestNamespace") });

            var int8NestedCollection = runtimeEntityType.AddProperty(
                "Int8NestedCollection",
                typeof(sbyte[][][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Int8NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Int8NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            int8NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(instance) == null);
            int8NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(entity) = value);
            int8NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, sbyte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(entity) = value);
            int8NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<sbyte[][][]>(int8NestedCollection, 109),
                (InternalEntityEntry entry) => entry.GetCurrentValue<sbyte[][][]>(int8NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[109]);
            int8NestedCollection.SetPropertyIndexes(
                index: 109,
                originalValueIndex: 109,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            int8NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<sbyte[][][], sbyte[][]>(new ListOfReferenceTypesComparer<sbyte[][], sbyte[]>(new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<sbyte[][][], sbyte[][]>(new ListOfReferenceTypesComparer<sbyte[][], sbyte[]>(new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<sbyte[][]>(new JsonCollectionOfReferencesReaderWriter<sbyte[][][], sbyte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<sbyte[][], sbyte[]>(
                        new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v)))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<sbyte[][][], sbyte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<sbyte[][], sbyte[]>(
                        new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v))))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<sbyte[][], sbyte[]>(new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v))),
                    keyComparer: new ListOfReferenceTypesComparer<sbyte[][], sbyte[]>(new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<sbyte[]>(new JsonCollectionOfReferencesReaderWriter<sbyte[][], sbyte[]>(
                        new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v))))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<sbyte[][], sbyte[]>(
                        new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v)))),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                            (sbyte v1, sbyte v2) => v1 == v2,
                            (sbyte v) => (int)v,
                            (sbyte v) => v)),
                        keyComparer: new ListOfValueTypesComparer<sbyte[], sbyte>(new ValueComparer<sbyte>(
                            (sbyte v1, sbyte v2) => v1 == v2,
                            (sbyte v) => (int)v,
                            (sbyte v) => v)),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<sbyte>(new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v)))),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<sbyte[], sbyte>(
                            new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v))),
                        elementMapping: SqlServerShortTypeMapping.Default.Clone(
                            comparer: new ValueComparer<sbyte>(
                                (sbyte v1, sbyte v2) => v1 == v2,
                                (sbyte v) => (int)v,
                                (sbyte v) => v),
                            keyComparer: new ValueComparer<sbyte>(
                                (sbyte v1, sbyte v2) => v1 == v2,
                                (sbyte v) => (int)v,
                                (sbyte v) => v),
                            providerValueComparer: new ValueComparer<short>(
                                (short v1, short v2) => v1 == v2,
                                (short v) => (int)v,
                                (short v) => v),
                            converter: new ValueConverter<sbyte, short>(
                                (sbyte v) => (short)v,
                                (short v) => (sbyte)v),
                            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<sbyte, short>(
                                JsonInt16ReaderWriter.Instance,
                                new ValueConverter<sbyte, short>(
                                    (sbyte v) => (short)v,
                                    (short v) => (sbyte)v))))));
            int8NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            int8NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection", "TestNamespace") });

            var intNumberToBytesConverterProperty = runtimeEntityType.AddProperty(
                "IntNumberToBytesConverterProperty",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IntNumberToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IntNumberToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToBytesConverter<int>());
            intNumberToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(instance) == 0);
            intNumberToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(entity) = value);
            intNumberToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(entity) = value);
            intNumberToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(intNumberToBytesConverterProperty, 110),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(intNumberToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[110]);
            intNumberToBytesConverterProperty.SetPropertyIndexes(
                index: 110,
                originalValueIndex: 110,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            intNumberToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(4)",
                    size: 4),
                converter: new ValueConverter<int, byte[]>(
                    (int v) => NumberToBytesConverter<int>.ReverseInt(BitConverter.GetBytes(v)),
                    (byte[] v) => v == null ? 0 : BitConverter.ToInt32(NumberToBytesConverter<int>.ReverseInt(v.Length == 0 ? new byte[4] : v), 0)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<int, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<int, byte[]>(
                        (int v) => NumberToBytesConverter<int>.ReverseInt(BitConverter.GetBytes(v)),
                        (byte[] v) => v == null ? 0 : BitConverter.ToInt32(NumberToBytesConverter<int>.ReverseInt(v.Length == 0 ? new byte[4] : v), 0))));
            intNumberToBytesConverterProperty.SetSentinelFromProviderValue(new byte[] { 0, 0, 0, 0 });
            intNumberToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            intNumberToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty", "TestNamespace") });

            var intNumberToStringConverterProperty = runtimeEntityType.AddProperty(
                "IntNumberToStringConverterProperty",
                typeof(int),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("IntNumberToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<IntNumberToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new NumberToStringConverter<int>());
            intNumberToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(instance) == 0);
            intNumberToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(entity) = value);
            intNumberToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, int value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(entity) = value);
            intNumberToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(intNumberToStringConverterProperty, 111),
                (InternalEntityEntry entry) => entry.GetCurrentValue<int>(intNumberToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[111]);
            intNumberToStringConverterProperty.SetPropertyIndexes(
                index: 111,
                originalValueIndex: 111,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            intNumberToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(64)",
                    size: 64,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<int, string>(
                    (int v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => int.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<int, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<int, string>(
                        (int v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => int.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture))));
            intNumberToStringConverterProperty.SetSentinelFromProviderValue("0");
            intNumberToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            intNumberToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty", "TestNamespace") });

            var nullIntToNullStringConverterProperty = runtimeEntityType.AddProperty(
                "NullIntToNullStringConverterProperty",
                typeof(int?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullIntToNullStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullIntToNullStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new CompiledModelTestBase.NullIntToNullStringConverter());
            nullIntToNullStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(instance).HasValue);
            nullIntToNullStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(entity) = value);
            nullIntToNullStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(entity) = value);
            nullIntToNullStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<int>>(nullIntToNullStringConverterProperty, 112),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<int>>(nullIntToNullStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[112]);
            nullIntToNullStringConverterProperty.SetPropertyIndexes(
                index: 112,
                originalValueIndex: 112,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullIntToNullStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1 == v2,
                    (Nullable<int> v) => (int)v,
                    (Nullable<int> v) => v),
                keyComparer: new ValueComparer<int?>(
                    (Nullable<int> v1, Nullable<int> v2) => v1 == v2,
                    (Nullable<int> v) => (int)v,
                    (Nullable<int> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<int?, string>(
                    (Nullable<int> v) => v == null ? null : ((object)v).ToString(),
                    (string v) => v == null || v == "<null>" ? null : (Nullable<int>)int.Parse(v),
                    convertsNulls: true),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<int?, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<int?, string>(
                        (Nullable<int> v) => v == null ? null : ((object)v).ToString(),
                        (string v) => v == null || v == "<null>" ? null : (Nullable<int>)int.Parse(v),
                        convertsNulls: true)));
            nullIntToNullStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullIntToNullStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty", "TestNamespace") });

            var nullableBool = runtimeEntityType.AddProperty(
                "NullableBool",
                typeof(bool?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableBool", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableBool>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableBool.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(instance).HasValue);
            nullableBool.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<bool> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(entity) = value);
            nullableBool.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<bool> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(entity) = value);
            nullableBool.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<bool>>(nullableBool, 113),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<bool>>(nullableBool),
                (ValueBuffer valueBuffer) => valueBuffer[113]);
            nullableBool.SetPropertyIndexes(
                index: 113,
                originalValueIndex: 113,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableBool.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v));
            nullableBool.SetValueComparer(new NullableValueComparer<bool>(nullableBool.TypeMapping.Comparer));
            nullableBool.SetKeyValueComparer(new NullableValueComparer<bool>(nullableBool.TypeMapping.KeyComparer));
            nullableBool.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableBool.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool", "TestNamespace") });

            var nullableBoolArray = runtimeEntityType.AddProperty(
                "NullableBoolArray",
                typeof(bool?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableBoolArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableBoolArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableBoolArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(instance) == null);
            nullableBoolArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<bool>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(entity) = value);
            nullableBoolArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<bool>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(entity) = value);
            nullableBoolArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<bool>[]>(nullableBoolArray, 114),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<bool>[]>(nullableBoolArray),
                (ValueBuffer valueBuffer) => valueBuffer[114]);
            nullableBoolArray.SetPropertyIndexes(
                index: 114,
                originalValueIndex: 114,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableBoolArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<bool?[], bool>(new NullableValueComparer<bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<bool?[], bool>(new NullableValueComparer<bool>(new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<bool?>(new JsonCollectionOfNullableStructsReaderWriter<bool?[], bool>(
                    JsonBoolReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<bool?[], bool>(
                    JsonBoolReaderWriter.Instance),
                elementMapping: SqlServerBoolTypeMapping.Default.Clone(
                    comparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v),
                    keyComparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v),
                    providerValueComparer: new ValueComparer<bool>(
                        (bool v1, bool v2) => v1 == v2,
                        (bool v) => ((object)v).GetHashCode(),
                        (bool v) => v)));
            nullableBoolArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableBoolArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray", "TestNamespace") });

            var nullableBytes = runtimeEntityType.AddProperty(
                "NullableBytes",
                typeof(byte[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableBytes", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableBytes>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableBytes.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(instance) == null);
            nullableBytes.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(entity) = value);
            nullableBytes.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(entity) = value);
            nullableBytes.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[]>(nullableBytes, 115),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[]>(nullableBytes),
                (ValueBuffer valueBuffer) => valueBuffer[115]);
            nullableBytes.SetPropertyIndexes(
                index: 115,
                originalValueIndex: 115,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableBytes.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                storeTypePostfix: StoreTypePostfix.None);
            nullableBytes.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableBytes.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes", "TestNamespace") });

            var nullableBytesArray = runtimeEntityType.AddProperty(
                "NullableBytesArray",
                typeof(byte[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableBytesArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableBytesArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableBytesArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(instance) == null);
            nullableBytesArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(entity) = value);
            nullableBytesArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(entity) = value);
            nullableBytesArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[][]>(nullableBytesArray, 116),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[][]>(nullableBytesArray),
                (ValueBuffer valueBuffer) => valueBuffer[116]);
            nullableBytesArray.SetPropertyIndexes(
                index: 116,
                originalValueIndex: 116,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableBytesArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte[]>(new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                    JsonByteArrayReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                    JsonByteArrayReaderWriter.Instance),
                elementMapping: SqlServerByteArrayTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v),
                    keyComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    providerValueComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "varbinary(max)"),
                    storeTypePostfix: StoreTypePostfix.None));
            nullableBytesArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableBytesArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray", "TestNamespace") });

            var nullableBytesNestedCollection = runtimeEntityType.AddProperty(
                "NullableBytesNestedCollection",
                typeof(byte[][][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableBytesNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableBytesNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableBytesNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(instance) == null);
            nullableBytesNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(entity) = value);
            nullableBytesNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(entity) = value);
            nullableBytesNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[][][]>(nullableBytesNestedCollection, 117),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[][][]>(nullableBytesNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[117]);
            nullableBytesNestedCollection.SetPropertyIndexes(
                index: 117,
                originalValueIndex: 117,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableBytesNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<byte[][][], byte[][]>(new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<byte[][][], byte[][]>(new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte[][]>(new JsonCollectionOfReferencesReaderWriter<byte[][][], byte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][][], byte[][]>(
                    new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v)),
                    keyComparer: new ListOfReferenceTypesComparer<byte[][], byte[]>(new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<byte[]>(new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte[][], byte[]>(
                        JsonByteArrayReaderWriter.Instance),
                    elementMapping: SqlServerByteArrayTypeMapping.Default.Clone(
                        comparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => ((object)v).GetHashCode(),
                            (byte[] v) => v),
                        keyComparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                            (byte[] source) => source.ToArray()),
                        providerValueComparer: new ValueComparer<byte[]>(
                            (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                            (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                            (byte[] source) => source.ToArray()),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "varbinary(max)"),
                        storeTypePostfix: StoreTypePostfix.None)));
            nullableBytesNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableBytesNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection", "TestNamespace") });

            var nullableChar = runtimeEntityType.AddProperty(
                "NullableChar",
                typeof(char?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableChar", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableChar>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableChar.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(instance).HasValue);
            nullableChar.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<char> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(entity) = value);
            nullableChar.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<char> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(entity) = value);
            nullableChar.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<char>>(nullableChar, 118),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<char>>(nullableChar),
                (ValueBuffer valueBuffer) => valueBuffer[118]);
            nullableChar.SetPropertyIndexes(
                index: 118,
                originalValueIndex: 118,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableChar.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                keyComparer: new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(1)",
                    size: 1,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<char, string>(
                    (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                    (string v) => v.Length < 1 ? '\0' : v[0]),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<char, string>(
                        (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => v.Length < 1 ? '\0' : v[0])));
            nullableChar.SetValueComparer(new NullableValueComparer<char>(nullableChar.TypeMapping.Comparer));
            nullableChar.SetKeyValueComparer(new NullableValueComparer<char>(nullableChar.TypeMapping.KeyComparer));
            nullableChar.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableChar.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar", "TestNamespace") });

            var nullableCharArray = runtimeEntityType.AddProperty(
                "NullableCharArray",
                typeof(char?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableCharArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableCharArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableCharArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(instance) == null);
            nullableCharArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<char>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(entity) = value);
            nullableCharArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<char>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(entity) = value);
            nullableCharArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<char>[]>(nullableCharArray, 119),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<char>[]>(nullableCharArray),
                (ValueBuffer valueBuffer) => valueBuffer[119]);
            nullableCharArray.SetPropertyIndexes(
                index: 119,
                originalValueIndex: 119,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableCharArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<char?[], char>(new NullableValueComparer<char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<char?[], char>(new NullableValueComparer<char>(new ValueComparer<char>(
                    (char v1, char v2) => v1 == v2,
                    (char v) => (int)v,
                    (char v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<char?>(new JsonCollectionOfNullableStructsReaderWriter<char?[], char>(
                    new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0])))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<char?[], char>(
                    new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0]))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v),
                    keyComparer: new ValueComparer<char>(
                        (char v1, char v2) => v1 == v2,
                        (char v) => (int)v,
                        (char v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(1)",
                        size: 1,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<char, string>(
                        (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                        (string v) => v.Length < 1 ? '\0' : v[0]),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<char, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<char, string>(
                            (char v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v),
                            (string v) => v.Length < 1 ? '\0' : v[0]))));
            nullableCharArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableCharArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray", "TestNamespace") });

            var nullableDateOnly = runtimeEntityType.AddProperty(
                "NullableDateOnly",
                typeof(DateOnly?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDateOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDateOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableDateOnly.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(instance).HasValue);
            nullableDateOnly.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateOnly> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(entity) = value);
            nullableDateOnly.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateOnly> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(entity) = value);
            nullableDateOnly.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<DateOnly>>(nullableDateOnly, 120),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<DateOnly>>(nullableDateOnly),
                (ValueBuffer valueBuffer) => valueBuffer[120]);
            nullableDateOnly.SetPropertyIndexes(
                index: 120,
                originalValueIndex: 120,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDateOnly.TypeMapping = SqlServerDateOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                keyComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                providerValueComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v));
            nullableDateOnly.SetValueComparer(new NullableValueComparer<DateOnly>(nullableDateOnly.TypeMapping.Comparer));
            nullableDateOnly.SetKeyValueComparer(new NullableValueComparer<DateOnly>(nullableDateOnly.TypeMapping.KeyComparer));
            nullableDateOnly.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDateOnly.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly", "TestNamespace") });

            var nullableDateOnlyArray = runtimeEntityType.AddProperty(
                "NullableDateOnlyArray",
                typeof(DateOnly?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDateOnlyArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDateOnlyArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableDateOnlyArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(instance) == null);
            nullableDateOnlyArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateOnly>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(entity) = value);
            nullableDateOnlyArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateOnly>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(entity) = value);
            nullableDateOnlyArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<DateOnly>[]>(nullableDateOnlyArray, 121),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<DateOnly>[]>(nullableDateOnlyArray),
                (ValueBuffer valueBuffer) => valueBuffer[121]);
            nullableDateOnlyArray.SetPropertyIndexes(
                index: 121,
                originalValueIndex: 121,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDateOnlyArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<DateOnly?[], DateOnly>(new NullableValueComparer<DateOnly>(new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<DateOnly?[], DateOnly>(new NullableValueComparer<DateOnly>(new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<DateOnly?>(new JsonCollectionOfNullableStructsReaderWriter<DateOnly?[], DateOnly>(
                    JsonDateOnlyReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<DateOnly?[], DateOnly>(
                    JsonDateOnlyReaderWriter.Instance),
                elementMapping: SqlServerDateOnlyTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v),
                    keyComparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v),
                    providerValueComparer: new ValueComparer<DateOnly>(
                        (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                        (DateOnly v) => ((object)v).GetHashCode(),
                        (DateOnly v) => v)));
            nullableDateOnlyArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDateOnlyArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray", "TestNamespace") });

            var nullableDateTime = runtimeEntityType.AddProperty(
                "NullableDateTime",
                typeof(DateTime?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableDateTime.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(instance).HasValue);
            nullableDateTime.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateTime> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(entity) = value);
            nullableDateTime.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateTime> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(entity) = value);
            nullableDateTime.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<DateTime>>(nullableDateTime, 122),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<DateTime>>(nullableDateTime),
                (ValueBuffer valueBuffer) => valueBuffer[122]);
            nullableDateTime.SetPropertyIndexes(
                index: 122,
                originalValueIndex: 122,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDateTime.TypeMapping = SqlServerDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v));
            nullableDateTime.SetValueComparer(new NullableValueComparer<DateTime>(nullableDateTime.TypeMapping.Comparer));
            nullableDateTime.SetKeyValueComparer(new NullableValueComparer<DateTime>(nullableDateTime.TypeMapping.KeyComparer));
            nullableDateTime.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDateTime.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime", "TestNamespace") });

            var nullableDateTimeArray = runtimeEntityType.AddProperty(
                "NullableDateTimeArray",
                typeof(DateTime?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDateTimeArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDateTimeArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableDateTimeArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(instance) == null);
            nullableDateTimeArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateTime>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(entity) = value);
            nullableDateTimeArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<DateTime>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(entity) = value);
            nullableDateTimeArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<DateTime>[]>(nullableDateTimeArray, 123),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<DateTime>[]>(nullableDateTimeArray),
                (ValueBuffer valueBuffer) => valueBuffer[123]);
            nullableDateTimeArray.SetPropertyIndexes(
                index: 123,
                originalValueIndex: 123,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDateTimeArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<DateTime?[], DateTime>(new NullableValueComparer<DateTime>(new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<DateTime?[], DateTime>(new NullableValueComparer<DateTime>(new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<DateTime?>(new JsonCollectionOfNullableStructsReaderWriter<DateTime?[], DateTime>(
                    JsonDateTimeReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<DateTime?[], DateTime>(
                    JsonDateTimeReaderWriter.Instance),
                elementMapping: SqlServerDateTimeTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v),
                    keyComparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v),
                    providerValueComparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => ((object)v).GetHashCode(),
                        (DateTime v) => v)));
            nullableDateTimeArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDateTimeArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray", "TestNamespace") });

            var nullableDecimal = runtimeEntityType.AddProperty(
                "NullableDecimal",
                typeof(decimal?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDecimal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDecimal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableDecimal.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(instance).HasValue);
            nullableDecimal.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<decimal> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(entity) = value);
            nullableDecimal.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<decimal> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(entity) = value);
            nullableDecimal.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<decimal>>(nullableDecimal, 124),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<decimal>>(nullableDecimal),
                (ValueBuffer valueBuffer) => valueBuffer[124]);
            nullableDecimal.SetPropertyIndexes(
                index: 124,
                originalValueIndex: 124,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDecimal.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                keyComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v));
            nullableDecimal.SetValueComparer(new NullableValueComparer<decimal>(nullableDecimal.TypeMapping.Comparer));
            nullableDecimal.SetKeyValueComparer(new NullableValueComparer<decimal>(nullableDecimal.TypeMapping.KeyComparer));
            nullableDecimal.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDecimal.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal", "TestNamespace") });

            var nullableDecimalArray = runtimeEntityType.AddProperty(
                "NullableDecimalArray",
                typeof(decimal?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDecimalArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDecimalArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableDecimalArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(instance) == null);
            nullableDecimalArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<decimal>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(entity) = value);
            nullableDecimalArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<decimal>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(entity) = value);
            nullableDecimalArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<decimal>[]>(nullableDecimalArray, 125),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<decimal>[]>(nullableDecimalArray),
                (ValueBuffer valueBuffer) => valueBuffer[125]);
            nullableDecimalArray.SetPropertyIndexes(
                index: 125,
                originalValueIndex: 125,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDecimalArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<decimal?[], decimal>(new NullableValueComparer<decimal>(new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<decimal?[], decimal>(new NullableValueComparer<decimal>(new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<decimal?>(new JsonCollectionOfNullableStructsReaderWriter<decimal?[], decimal>(
                    JsonDecimalReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<decimal?[], decimal>(
                    JsonDecimalReaderWriter.Instance),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    keyComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v)));
            nullableDecimalArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDecimalArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray", "TestNamespace") });

            var nullableDouble = runtimeEntityType.AddProperty(
                "NullableDouble",
                typeof(double?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDouble", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDouble>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableDouble.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(instance).HasValue);
            nullableDouble.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<double> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(entity) = value);
            nullableDouble.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<double> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(entity) = value);
            nullableDouble.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<double>>(nullableDouble, 126),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<double>>(nullableDouble),
                (ValueBuffer valueBuffer) => valueBuffer[126]);
            nullableDouble.SetPropertyIndexes(
                index: 126,
                originalValueIndex: 126,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDouble.TypeMapping = SqlServerDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v));
            nullableDouble.SetValueComparer(new NullableValueComparer<double>(nullableDouble.TypeMapping.Comparer));
            nullableDouble.SetKeyValueComparer(new NullableValueComparer<double>(nullableDouble.TypeMapping.KeyComparer));
            nullableDouble.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDouble.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble", "TestNamespace") });

            var nullableDoubleArray = runtimeEntityType.AddProperty(
                "NullableDoubleArray",
                typeof(double?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableDoubleArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableDoubleArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableDoubleArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(instance) == null);
            nullableDoubleArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<double>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(entity) = value);
            nullableDoubleArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<double>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(entity) = value);
            nullableDoubleArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<double>[]>(nullableDoubleArray, 127),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<double>[]>(nullableDoubleArray),
                (ValueBuffer valueBuffer) => valueBuffer[127]);
            nullableDoubleArray.SetPropertyIndexes(
                index: 127,
                originalValueIndex: 127,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableDoubleArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<double?[], double>(new NullableValueComparer<double>(new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<double?[], double>(new NullableValueComparer<double>(new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<double?>(new JsonCollectionOfNullableStructsReaderWriter<double?[], double>(
                    JsonDoubleReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<double?[], double>(
                    JsonDoubleReaderWriter.Instance),
                elementMapping: SqlServerDoubleTypeMapping.Default.Clone(
                    comparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v),
                    keyComparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v),
                    providerValueComparer: new ValueComparer<double>(
                        (double v1, double v2) => v1.Equals(v2),
                        (double v) => ((object)v).GetHashCode(),
                        (double v) => v)));
            nullableDoubleArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableDoubleArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray", "TestNamespace") });

            var nullableEnum16 = runtimeEntityType.AddProperty(
                "NullableEnum16",
                typeof(CompiledModelTestBase.Enum16?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(instance).HasValue);
            nullableEnum16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum16>)(CompiledModelTestBase.Enum16)value);
            nullableEnum16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum16>)(CompiledModelTestBase.Enum16)value);
            nullableEnum16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16, 128),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16),
                (ValueBuffer valueBuffer) => valueBuffer[128]);
            nullableEnum16.SetPropertyIndexes(
                index: 128,
                originalValueIndex: 128,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                    (CompiledModelTestBase.Enum16 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value)));
            nullableEnum16.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum16>(nullableEnum16.TypeMapping.Comparer));
            nullableEnum16.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum16>(nullableEnum16.TypeMapping.KeyComparer));
            nullableEnum16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16", "TestNamespace") });

            var nullableEnum16Array = runtimeEntityType.AddProperty(
                "NullableEnum16Array",
                typeof(CompiledModelTestBase.Enum16?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(instance) == null);
            nullableEnum16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(entity) = value);
            nullableEnum16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(entity) = value);
            nullableEnum16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16Array, 129),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16Array),
                (ValueBuffer valueBuffer) => valueBuffer[129]);
            nullableEnum16Array.SetPropertyIndexes(
                index: 129,
                originalValueIndex: 129,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            nullableEnum16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array", "TestNamespace") });

            var nullableEnum16AsString = runtimeEntityType.AddProperty(
                "NullableEnum16AsString",
                typeof(CompiledModelTestBase.Enum16?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum16AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(instance).HasValue);
            nullableEnum16AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum16>)(CompiledModelTestBase.Enum16)value);
            nullableEnum16AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum16>)(CompiledModelTestBase.Enum16)value);
            nullableEnum16AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16AsString, 130),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16AsString),
                (ValueBuffer valueBuffer) => valueBuffer[130]);
            nullableEnum16AsString.SetPropertyIndexes(
                index: 130,
                originalValueIndex: 130,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16AsString.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                    (CompiledModelTestBase.Enum16 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value)));
            nullableEnum16AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum16>(nullableEnum16AsString.TypeMapping.Comparer));
            nullableEnum16AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum16>(nullableEnum16AsString.TypeMapping.KeyComparer));
            nullableEnum16AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString", "TestNamespace") });

            var nullableEnum16AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnum16AsStringArray",
                typeof(CompiledModelTestBase.Enum16?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum16AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(instance) == null);
            nullableEnum16AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(entity) = value);
            nullableEnum16AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(entity) = value);
            nullableEnum16AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16AsStringArray, 131),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[131]);
            nullableEnum16AsStringArray.SetPropertyIndexes(
                index: 131,
                originalValueIndex: 131,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum16?[], CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            nullableEnum16AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray", "TestNamespace") });

            var nullableEnum16AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnum16AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum16?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum16AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(instance) == null);
            nullableEnum16AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(entity) = value);
            nullableEnum16AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(entity) = value);
            nullableEnum16AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16AsStringCollection, 132),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[132]);
            nullableEnum16AsStringCollection.SetPropertyIndexes(
                index: 132,
                originalValueIndex: 132,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            nullableEnum16AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection", "TestNamespace") });

            var nullableEnum16Collection = runtimeEntityType.AddProperty(
                "NullableEnum16Collection",
                typeof(List<CompiledModelTestBase.Enum16?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum16Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum16Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum16Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(instance) == null);
            nullableEnum16Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(entity) = value);
            nullableEnum16Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(entity) = value);
            nullableEnum16Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16Collection, 133),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16Collection),
                (ValueBuffer valueBuffer) => valueBuffer[133]);
            nullableEnum16Collection.SetPropertyIndexes(
                index: 133,
                originalValueIndex: 133,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum16Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(new NullableValueComparer<CompiledModelTestBase.Enum16>(new ValueComparer<CompiledModelTestBase.Enum16>(
                    (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum16?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum16?>, CompiledModelTestBase.Enum16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum16>(
                        (CompiledModelTestBase.Enum16 v1, CompiledModelTestBase.Enum16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum16 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum16, short>(
                        (CompiledModelTestBase.Enum16 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum16, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum16, short>(
                            (CompiledModelTestBase.Enum16 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum16)value))));
            nullableEnum16Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum16Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection", "TestNamespace") });

            var nullableEnum32 = runtimeEntityType.AddProperty(
                "NullableEnum32",
                typeof(CompiledModelTestBase.Enum32?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(instance).HasValue);
            nullableEnum32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum32>)(CompiledModelTestBase.Enum32)value);
            nullableEnum32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum32>)(CompiledModelTestBase.Enum32)value);
            nullableEnum32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32, 134),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32),
                (ValueBuffer valueBuffer) => valueBuffer[134]);
            nullableEnum32.SetPropertyIndexes(
                index: 134,
                originalValueIndex: 134,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                    (CompiledModelTestBase.Enum32 value) => (int)value,
                    (int value) => (CompiledModelTestBase.Enum32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value)));
            nullableEnum32.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum32>(nullableEnum32.TypeMapping.Comparer));
            nullableEnum32.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum32>(nullableEnum32.TypeMapping.KeyComparer));
            nullableEnum32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32", "TestNamespace") });

            var nullableEnum32Array = runtimeEntityType.AddProperty(
                "NullableEnum32Array",
                typeof(CompiledModelTestBase.Enum32?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(instance) == null);
            nullableEnum32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(entity) = value);
            nullableEnum32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(entity) = value);
            nullableEnum32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32Array, 135),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32Array),
                (ValueBuffer valueBuffer) => valueBuffer[135]);
            nullableEnum32Array.SetPropertyIndexes(
                index: 135,
                originalValueIndex: 135,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            nullableEnum32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array", "TestNamespace") });

            var nullableEnum32AsString = runtimeEntityType.AddProperty(
                "NullableEnum32AsString",
                typeof(CompiledModelTestBase.Enum32?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum32AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(instance).HasValue);
            nullableEnum32AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum32>)(CompiledModelTestBase.Enum32)value);
            nullableEnum32AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum32>)(CompiledModelTestBase.Enum32)value);
            nullableEnum32AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32AsString, 136),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32AsString),
                (ValueBuffer valueBuffer) => valueBuffer[136]);
            nullableEnum32AsString.SetPropertyIndexes(
                index: 136,
                originalValueIndex: 136,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32AsString.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                    (CompiledModelTestBase.Enum32 value) => (int)value,
                    (int value) => (CompiledModelTestBase.Enum32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value)));
            nullableEnum32AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum32>(nullableEnum32AsString.TypeMapping.Comparer));
            nullableEnum32AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum32>(nullableEnum32AsString.TypeMapping.KeyComparer));
            nullableEnum32AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString", "TestNamespace") });

            var nullableEnum32AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnum32AsStringArray",
                typeof(CompiledModelTestBase.Enum32?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum32AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(instance) == null);
            nullableEnum32AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(entity) = value);
            nullableEnum32AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(entity) = value);
            nullableEnum32AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32AsStringArray, 137),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[137]);
            nullableEnum32AsStringArray.SetPropertyIndexes(
                index: 137,
                originalValueIndex: 137,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            nullableEnum32AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray", "TestNamespace") });

            var nullableEnum32AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnum32AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum32?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum32AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(instance) == null);
            nullableEnum32AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(entity) = value);
            nullableEnum32AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(entity) = value);
            nullableEnum32AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32AsStringCollection, 138),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[138]);
            nullableEnum32AsStringCollection.SetPropertyIndexes(
                index: 138,
                originalValueIndex: 138,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            nullableEnum32AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection", "TestNamespace") });

            var nullableEnum32Collection = runtimeEntityType.AddProperty(
                "NullableEnum32Collection",
                typeof(List<CompiledModelTestBase.Enum32?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum32Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(instance) == null);
            nullableEnum32Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(entity) = value);
            nullableEnum32Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(entity) = value);
            nullableEnum32Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32Collection, 139),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32Collection),
                (ValueBuffer valueBuffer) => valueBuffer[139]);
            nullableEnum32Collection.SetPropertyIndexes(
                index: 139,
                originalValueIndex: 139,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum32?>, CompiledModelTestBase.Enum32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                        (CompiledModelTestBase.Enum32 value) => (int)value,
                        (int value) => (CompiledModelTestBase.Enum32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum32, int>(
                            (CompiledModelTestBase.Enum32 value) => (int)value,
                            (int value) => (CompiledModelTestBase.Enum32)value))));
            nullableEnum32Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection", "TestNamespace") });

            var nullableEnum32NestedCollection = runtimeEntityType.AddProperty(
                "NullableEnum32NestedCollection",
                typeof(CompiledModelTestBase.Enum32?[][][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum32NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum32NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum32NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(instance) == null);
            nullableEnum32NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(entity) = value);
            nullableEnum32NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum32>[][][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(entity) = value);
            nullableEnum32NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum32>[][][]>(nullableEnum32NestedCollection, 140),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[][][]>(nullableEnum32NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[140]);
            nullableEnum32NestedCollection.SetPropertyIndexes(
                index: 140,
                originalValueIndex: 140,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum32NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][][], CompiledModelTestBase.Enum32?[][]>(new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))))),
                keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][][], CompiledModelTestBase.Enum32?[][]>(new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                    (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum32 v) => v))))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?[][]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][][], CompiledModelTestBase.Enum32?[][]>(
                    new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][][], CompiledModelTestBase.Enum32?[][]>(
                    new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v)))),
                    keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                        (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum32 v) => v)))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?[]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum32?[][], CompiledModelTestBase.Enum32?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                            (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum32 v) => v))),
                        keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(new NullableValueComparer<CompiledModelTestBase.Enum32>(new ValueComparer<CompiledModelTestBase.Enum32>(
                            (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum32 v) => v))),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum32?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value)))),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum32?[], CompiledModelTestBase.Enum32>(
                            new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))),
                        elementMapping: IntTypeMapping.Default.Clone(
                            comparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                                (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                                (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                                (CompiledModelTestBase.Enum32 v) => v),
                            keyComparer: new ValueComparer<CompiledModelTestBase.Enum32>(
                                (CompiledModelTestBase.Enum32 v1, CompiledModelTestBase.Enum32 v2) => object.Equals((object)v1, (object)v2),
                                (CompiledModelTestBase.Enum32 v) => ((object)v).GetHashCode(),
                                (CompiledModelTestBase.Enum32 v) => v),
                            providerValueComparer: new ValueComparer<int>(
                                (int v1, int v2) => v1 == v2,
                                (int v) => v,
                                (int v) => v),
                            converter: new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                (CompiledModelTestBase.Enum32 value) => (int)value,
                                (int value) => (CompiledModelTestBase.Enum32)value),
                            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum32, int>(
                                JsonInt32ReaderWriter.Instance,
                                new ValueConverter<CompiledModelTestBase.Enum32, int>(
                                    (CompiledModelTestBase.Enum32 value) => (int)value,
                                    (int value) => (CompiledModelTestBase.Enum32)value))))));
            nullableEnum32NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum32NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection", "TestNamespace") });

            var nullableEnum64 = runtimeEntityType.AddProperty(
                "NullableEnum64",
                typeof(CompiledModelTestBase.Enum64?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(instance).HasValue);
            nullableEnum64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum64>)(CompiledModelTestBase.Enum64)value);
            nullableEnum64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum64>)(CompiledModelTestBase.Enum64)value);
            nullableEnum64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64, 141),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64),
                (ValueBuffer valueBuffer) => valueBuffer[141]);
            nullableEnum64.SetPropertyIndexes(
                index: 141,
                originalValueIndex: 141,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                    (CompiledModelTestBase.Enum64 value) => (long)value,
                    (long value) => (CompiledModelTestBase.Enum64)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value)));
            nullableEnum64.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum64>(nullableEnum64.TypeMapping.Comparer));
            nullableEnum64.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum64>(nullableEnum64.TypeMapping.KeyComparer));
            nullableEnum64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64", "TestNamespace") });

            var nullableEnum64Array = runtimeEntityType.AddProperty(
                "NullableEnum64Array",
                typeof(CompiledModelTestBase.Enum64?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(instance) == null);
            nullableEnum64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(entity) = value);
            nullableEnum64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(entity) = value);
            nullableEnum64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64Array, 142),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64Array),
                (ValueBuffer valueBuffer) => valueBuffer[142]);
            nullableEnum64Array.SetPropertyIndexes(
                index: 142,
                originalValueIndex: 142,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            nullableEnum64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array", "TestNamespace") });

            var nullableEnum64AsString = runtimeEntityType.AddProperty(
                "NullableEnum64AsString",
                typeof(CompiledModelTestBase.Enum64?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum64AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(instance).HasValue);
            nullableEnum64AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum64>)(CompiledModelTestBase.Enum64)value);
            nullableEnum64AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum64>)(CompiledModelTestBase.Enum64)value);
            nullableEnum64AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64AsString, 143),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64AsString),
                (ValueBuffer valueBuffer) => valueBuffer[143]);
            nullableEnum64AsString.SetPropertyIndexes(
                index: 143,
                originalValueIndex: 143,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64AsString.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                    (CompiledModelTestBase.Enum64 value) => (long)value,
                    (long value) => (CompiledModelTestBase.Enum64)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value)));
            nullableEnum64AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum64>(nullableEnum64AsString.TypeMapping.Comparer));
            nullableEnum64AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum64>(nullableEnum64AsString.TypeMapping.KeyComparer));
            nullableEnum64AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString", "TestNamespace") });

            var nullableEnum64AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnum64AsStringArray",
                typeof(CompiledModelTestBase.Enum64?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum64AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(instance) == null);
            nullableEnum64AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(entity) = value);
            nullableEnum64AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(entity) = value);
            nullableEnum64AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64AsStringArray, 144),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[144]);
            nullableEnum64AsStringArray.SetPropertyIndexes(
                index: 144,
                originalValueIndex: 144,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum64?[], CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            nullableEnum64AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray", "TestNamespace") });

            var nullableEnum64AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnum64AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum64?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum64AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(instance) == null);
            nullableEnum64AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(entity) = value);
            nullableEnum64AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(entity) = value);
            nullableEnum64AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64AsStringCollection, 145),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[145]);
            nullableEnum64AsStringCollection.SetPropertyIndexes(
                index: 145,
                originalValueIndex: 145,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            nullableEnum64AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection", "TestNamespace") });

            var nullableEnum64Collection = runtimeEntityType.AddProperty(
                "NullableEnum64Collection",
                typeof(List<CompiledModelTestBase.Enum64?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum64Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum64Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum64Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(instance) == null);
            nullableEnum64Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(entity) = value);
            nullableEnum64Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(entity) = value);
            nullableEnum64Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64Collection, 146),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64Collection),
                (ValueBuffer valueBuffer) => valueBuffer[146]);
            nullableEnum64Collection.SetPropertyIndexes(
                index: 146,
                originalValueIndex: 146,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum64Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(new NullableValueComparer<CompiledModelTestBase.Enum64>(new ValueComparer<CompiledModelTestBase.Enum64>(
                    (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum64?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum64?>, CompiledModelTestBase.Enum64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum64>(
                        (CompiledModelTestBase.Enum64 v1, CompiledModelTestBase.Enum64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum64 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum64, long>(
                        (CompiledModelTestBase.Enum64 value) => (long)value,
                        (long value) => (CompiledModelTestBase.Enum64)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum64, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum64, long>(
                            (CompiledModelTestBase.Enum64 value) => (long)value,
                            (long value) => (CompiledModelTestBase.Enum64)value))));
            nullableEnum64Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum64Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection", "TestNamespace") });

            var nullableEnum8 = runtimeEntityType.AddProperty(
                "NullableEnum8",
                typeof(CompiledModelTestBase.Enum8?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(instance).HasValue);
            nullableEnum8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum8>)(CompiledModelTestBase.Enum8)value);
            nullableEnum8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum8>)(CompiledModelTestBase.Enum8)value);
            nullableEnum8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8, 147),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8),
                (ValueBuffer valueBuffer) => valueBuffer[147]);
            nullableEnum8.SetPropertyIndexes(
                index: 147,
                originalValueIndex: 147,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                    (CompiledModelTestBase.Enum8 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value)));
            nullableEnum8.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum8>(nullableEnum8.TypeMapping.Comparer));
            nullableEnum8.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum8>(nullableEnum8.TypeMapping.KeyComparer));
            nullableEnum8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8", "TestNamespace") });

            var nullableEnum8Array = runtimeEntityType.AddProperty(
                "NullableEnum8Array",
                typeof(CompiledModelTestBase.Enum8?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(instance) == null);
            nullableEnum8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(entity) = value);
            nullableEnum8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(entity) = value);
            nullableEnum8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8Array, 148),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8Array),
                (ValueBuffer valueBuffer) => valueBuffer[148]);
            nullableEnum8Array.SetPropertyIndexes(
                index: 148,
                originalValueIndex: 148,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            nullableEnum8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array", "TestNamespace") });

            var nullableEnum8AsString = runtimeEntityType.AddProperty(
                "NullableEnum8AsString",
                typeof(CompiledModelTestBase.Enum8?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnum8AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(instance).HasValue);
            nullableEnum8AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum8>)(CompiledModelTestBase.Enum8)value);
            nullableEnum8AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.Enum8>)(CompiledModelTestBase.Enum8)value);
            nullableEnum8AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8AsString, 149),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8AsString),
                (ValueBuffer valueBuffer) => valueBuffer[149]);
            nullableEnum8AsString.SetPropertyIndexes(
                index: 149,
                originalValueIndex: 149,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8AsString.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                    (CompiledModelTestBase.Enum8 value) => (short)value,
                    (short value) => (CompiledModelTestBase.Enum8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value)));
            nullableEnum8AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum8>(nullableEnum8AsString.TypeMapping.Comparer));
            nullableEnum8AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.Enum8>(nullableEnum8AsString.TypeMapping.KeyComparer));
            nullableEnum8AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString", "TestNamespace") });

            var nullableEnum8AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnum8AsStringArray",
                typeof(CompiledModelTestBase.Enum8?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum8AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(instance) == null);
            nullableEnum8AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(entity) = value);
            nullableEnum8AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(entity) = value);
            nullableEnum8AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8AsStringArray, 150),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[150]);
            nullableEnum8AsStringArray.SetPropertyIndexes(
                index: 150,
                originalValueIndex: 150,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            nullableEnum8AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray", "TestNamespace") });

            var nullableEnum8AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnum8AsStringCollection",
                typeof(List<CompiledModelTestBase.Enum8?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum8AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(instance) == null);
            nullableEnum8AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(entity) = value);
            nullableEnum8AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(entity) = value);
            nullableEnum8AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8AsStringCollection, 151),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[151]);
            nullableEnum8AsStringCollection.SetPropertyIndexes(
                index: 151,
                originalValueIndex: 151,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            nullableEnum8AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection", "TestNamespace") });

            var nullableEnum8Collection = runtimeEntityType.AddProperty(
                "NullableEnum8Collection",
                typeof(List<CompiledModelTestBase.Enum8?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum8Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(instance) == null);
            nullableEnum8Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(entity) = value);
            nullableEnum8Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.Enum8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(entity) = value);
            nullableEnum8Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8Collection, 152),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8Collection),
                (ValueBuffer valueBuffer) => valueBuffer[152]);
            nullableEnum8Collection.SetPropertyIndexes(
                index: 152,
                originalValueIndex: 152,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.Enum8?>, CompiledModelTestBase.Enum8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                        (CompiledModelTestBase.Enum8 value) => (short)value,
                        (short value) => (CompiledModelTestBase.Enum8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value))));
            nullableEnum8Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection", "TestNamespace") });

            var nullableEnum8NestedCollection = runtimeEntityType.AddProperty(
                "NullableEnum8NestedCollection",
                typeof(CompiledModelTestBase.Enum8?[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnum8NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnum8NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnum8NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(instance) == null);
            nullableEnum8NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(entity) = value);
            nullableEnum8NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.Enum8>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(entity) = value);
            nullableEnum8NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.Enum8>[][]>(nullableEnum8NestedCollection, 153),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[][]>(nullableEnum8NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[153]);
            nullableEnum8NestedCollection.SetPropertyIndexes(
                index: 153,
                originalValueIndex: 153,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnum8NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum8?[][], CompiledModelTestBase.Enum8?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.Enum8?[][], CompiledModelTestBase.Enum8?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                    (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.Enum8 v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?[]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum8?[][], CompiledModelTestBase.Enum8?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.Enum8?[][], CompiledModelTestBase.Enum8?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v))),
                    keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(new NullableValueComparer<CompiledModelTestBase.Enum8>(new ValueComparer<CompiledModelTestBase.Enum8>(
                        (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.Enum8 v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<CompiledModelTestBase.Enum8?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.Enum8?[], CompiledModelTestBase.Enum8>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value))),
                    elementMapping: SqlServerShortTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                            (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum8 v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.Enum8>(
                            (CompiledModelTestBase.Enum8 v1, CompiledModelTestBase.Enum8 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.Enum8 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.Enum8 v) => v),
                        providerValueComparer: new ValueComparer<short>(
                            (short v1, short v2) => v1 == v2,
                            (short v) => (int)v,
                            (short v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.Enum8, short>(
                            (CompiledModelTestBase.Enum8 value) => (short)value,
                            (short value) => (CompiledModelTestBase.Enum8)value),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.Enum8, short>(
                            JsonInt16ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.Enum8, short>(
                                (CompiledModelTestBase.Enum8 value) => (short)value,
                                (short value) => (CompiledModelTestBase.Enum8)value)))));
            nullableEnum8NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnum8NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection", "TestNamespace") });

            var nullableEnumU16 = runtimeEntityType.AddProperty(
                "NullableEnumU16",
                typeof(CompiledModelTestBase.EnumU16?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(instance).HasValue);
            nullableEnumU16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU16>)(CompiledModelTestBase.EnumU16)value);
            nullableEnumU16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU16>)(CompiledModelTestBase.EnumU16)value);
            nullableEnumU16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16, 154),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16),
                (ValueBuffer valueBuffer) => valueBuffer[154]);
            nullableEnumU16.SetPropertyIndexes(
                index: 154,
                originalValueIndex: 154,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                    (CompiledModelTestBase.EnumU16 value) => (int)value,
                    (int value) => (CompiledModelTestBase.EnumU16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value)));
            nullableEnumU16.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU16>(nullableEnumU16.TypeMapping.Comparer));
            nullableEnumU16.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU16>(nullableEnumU16.TypeMapping.KeyComparer));
            nullableEnumU16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16", "TestNamespace") });

            var nullableEnumU16Array = runtimeEntityType.AddProperty(
                "NullableEnumU16Array",
                typeof(CompiledModelTestBase.EnumU16?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(instance) == null);
            nullableEnumU16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(entity) = value);
            nullableEnumU16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(entity) = value);
            nullableEnumU16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16Array, 155),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16Array),
                (ValueBuffer valueBuffer) => valueBuffer[155]);
            nullableEnumU16Array.SetPropertyIndexes(
                index: 155,
                originalValueIndex: 155,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            nullableEnumU16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array", "TestNamespace") });

            var nullableEnumU16AsString = runtimeEntityType.AddProperty(
                "NullableEnumU16AsString",
                typeof(CompiledModelTestBase.EnumU16?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU16AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(instance).HasValue);
            nullableEnumU16AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU16>)(CompiledModelTestBase.EnumU16)value);
            nullableEnumU16AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU16>)(CompiledModelTestBase.EnumU16)value);
            nullableEnumU16AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16AsString, 156),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16AsString),
                (ValueBuffer valueBuffer) => valueBuffer[156]);
            nullableEnumU16AsString.SetPropertyIndexes(
                index: 156,
                originalValueIndex: 156,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16AsString.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                    (CompiledModelTestBase.EnumU16 value) => (int)value,
                    (int value) => (CompiledModelTestBase.EnumU16)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value)));
            nullableEnumU16AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU16>(nullableEnumU16AsString.TypeMapping.Comparer));
            nullableEnumU16AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU16>(nullableEnumU16AsString.TypeMapping.KeyComparer));
            nullableEnumU16AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString", "TestNamespace") });

            var nullableEnumU16AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnumU16AsStringArray",
                typeof(CompiledModelTestBase.EnumU16?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU16AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(instance) == null);
            nullableEnumU16AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(entity) = value);
            nullableEnumU16AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU16>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(entity) = value);
            nullableEnumU16AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16AsStringArray, 157),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[157]);
            nullableEnumU16AsStringArray.SetPropertyIndexes(
                index: 157,
                originalValueIndex: 157,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU16?[], CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            nullableEnumU16AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray", "TestNamespace") });

            var nullableEnumU16AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnumU16AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU16?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU16AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(instance) == null);
            nullableEnumU16AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(entity) = value);
            nullableEnumU16AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(entity) = value);
            nullableEnumU16AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16AsStringCollection, 158),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[158]);
            nullableEnumU16AsStringCollection.SetPropertyIndexes(
                index: 158,
                originalValueIndex: 158,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            nullableEnumU16AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection", "TestNamespace") });

            var nullableEnumU16Collection = runtimeEntityType.AddProperty(
                "NullableEnumU16Collection",
                typeof(List<CompiledModelTestBase.EnumU16?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU16Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU16Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU16Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(instance) == null);
            nullableEnumU16Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(entity) = value);
            nullableEnumU16Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU16>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(entity) = value);
            nullableEnumU16Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16Collection, 159),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16Collection),
                (ValueBuffer valueBuffer) => valueBuffer[159]);
            nullableEnumU16Collection.SetPropertyIndexes(
                index: 159,
                originalValueIndex: 159,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU16Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(new NullableValueComparer<CompiledModelTestBase.EnumU16>(new ValueComparer<CompiledModelTestBase.EnumU16>(
                    (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU16 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU16?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU16?>, CompiledModelTestBase.EnumU16>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU16>(
                        (CompiledModelTestBase.EnumU16 v1, CompiledModelTestBase.EnumU16 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU16 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU16 v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                        (CompiledModelTestBase.EnumU16 value) => (int)value,
                        (int value) => (CompiledModelTestBase.EnumU16)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU16, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU16, int>(
                            (CompiledModelTestBase.EnumU16 value) => (int)value,
                            (int value) => (CompiledModelTestBase.EnumU16)value))));
            nullableEnumU16Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU16Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection", "TestNamespace") });

            var nullableEnumU32 = runtimeEntityType.AddProperty(
                "NullableEnumU32",
                typeof(CompiledModelTestBase.EnumU32?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(instance).HasValue);
            nullableEnumU32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU32>)(CompiledModelTestBase.EnumU32)value);
            nullableEnumU32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU32>)(CompiledModelTestBase.EnumU32)value);
            nullableEnumU32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32, 160),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32),
                (ValueBuffer valueBuffer) => valueBuffer[160]);
            nullableEnumU32.SetPropertyIndexes(
                index: 160,
                originalValueIndex: 160,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                    (CompiledModelTestBase.EnumU32 value) => (long)value,
                    (long value) => (CompiledModelTestBase.EnumU32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value)));
            nullableEnumU32.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU32>(nullableEnumU32.TypeMapping.Comparer));
            nullableEnumU32.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU32>(nullableEnumU32.TypeMapping.KeyComparer));
            nullableEnumU32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32", "TestNamespace") });

            var nullableEnumU32Array = runtimeEntityType.AddProperty(
                "NullableEnumU32Array",
                typeof(CompiledModelTestBase.EnumU32?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(instance) == null);
            nullableEnumU32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(entity) = value);
            nullableEnumU32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(entity) = value);
            nullableEnumU32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32Array, 161),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32Array),
                (ValueBuffer valueBuffer) => valueBuffer[161]);
            nullableEnumU32Array.SetPropertyIndexes(
                index: 161,
                originalValueIndex: 161,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            nullableEnumU32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array", "TestNamespace") });

            var nullableEnumU32AsString = runtimeEntityType.AddProperty(
                "NullableEnumU32AsString",
                typeof(CompiledModelTestBase.EnumU32?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU32AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(instance).HasValue);
            nullableEnumU32AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU32>)(CompiledModelTestBase.EnumU32)value);
            nullableEnumU32AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU32>)(CompiledModelTestBase.EnumU32)value);
            nullableEnumU32AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32AsString, 162),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32AsString),
                (ValueBuffer valueBuffer) => valueBuffer[162]);
            nullableEnumU32AsString.SetPropertyIndexes(
                index: 162,
                originalValueIndex: 162,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32AsString.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                    (CompiledModelTestBase.EnumU32 value) => (long)value,
                    (long value) => (CompiledModelTestBase.EnumU32)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value)));
            nullableEnumU32AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU32>(nullableEnumU32AsString.TypeMapping.Comparer));
            nullableEnumU32AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU32>(nullableEnumU32AsString.TypeMapping.KeyComparer));
            nullableEnumU32AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString", "TestNamespace") });

            var nullableEnumU32AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnumU32AsStringArray",
                typeof(CompiledModelTestBase.EnumU32?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU32AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(instance) == null);
            nullableEnumU32AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(entity) = value);
            nullableEnumU32AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU32>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(entity) = value);
            nullableEnumU32AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32AsStringArray, 163),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[163]);
            nullableEnumU32AsStringArray.SetPropertyIndexes(
                index: 163,
                originalValueIndex: 163,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU32?[], CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            nullableEnumU32AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray", "TestNamespace") });

            var nullableEnumU32AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnumU32AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU32?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU32AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(instance) == null);
            nullableEnumU32AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(entity) = value);
            nullableEnumU32AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(entity) = value);
            nullableEnumU32AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32AsStringCollection, 164),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[164]);
            nullableEnumU32AsStringCollection.SetPropertyIndexes(
                index: 164,
                originalValueIndex: 164,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            nullableEnumU32AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection", "TestNamespace") });

            var nullableEnumU32Collection = runtimeEntityType.AddProperty(
                "NullableEnumU32Collection",
                typeof(List<CompiledModelTestBase.EnumU32?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU32Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU32Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU32Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(instance) == null);
            nullableEnumU32Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(entity) = value);
            nullableEnumU32Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU32>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(entity) = value);
            nullableEnumU32Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32Collection, 165),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32Collection),
                (ValueBuffer valueBuffer) => valueBuffer[165]);
            nullableEnumU32Collection.SetPropertyIndexes(
                index: 165,
                originalValueIndex: 165,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU32Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(new NullableValueComparer<CompiledModelTestBase.EnumU32>(new ValueComparer<CompiledModelTestBase.EnumU32>(
                    (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU32 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU32?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU32?>, CompiledModelTestBase.EnumU32>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU32>(
                        (CompiledModelTestBase.EnumU32 v1, CompiledModelTestBase.EnumU32 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU32 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU32 v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                        (CompiledModelTestBase.EnumU32 value) => (long)value,
                        (long value) => (CompiledModelTestBase.EnumU32)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU32, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU32, long>(
                            (CompiledModelTestBase.EnumU32 value) => (long)value,
                            (long value) => (CompiledModelTestBase.EnumU32)value))));
            nullableEnumU32Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU32Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection", "TestNamespace") });

            var nullableEnumU64 = runtimeEntityType.AddProperty(
                "NullableEnumU64",
                typeof(CompiledModelTestBase.EnumU64?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(instance).HasValue);
            nullableEnumU64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU64>)(CompiledModelTestBase.EnumU64)value);
            nullableEnumU64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU64>)(CompiledModelTestBase.EnumU64)value);
            nullableEnumU64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64, 166),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64),
                (ValueBuffer valueBuffer) => valueBuffer[166]);
            nullableEnumU64.SetPropertyIndexes(
                index: 166,
                originalValueIndex: 166,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                    (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                    (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)));
            nullableEnumU64.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU64>(nullableEnumU64.TypeMapping.Comparer));
            nullableEnumU64.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU64>(nullableEnumU64.TypeMapping.KeyComparer));
            nullableEnumU64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64", "TestNamespace") });

            var nullableEnumU64Array = runtimeEntityType.AddProperty(
                "NullableEnumU64Array",
                typeof(CompiledModelTestBase.EnumU64?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(instance) == null);
            nullableEnumU64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(entity) = value);
            nullableEnumU64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(entity) = value);
            nullableEnumU64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64Array, 167),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64Array),
                (ValueBuffer valueBuffer) => valueBuffer[167]);
            nullableEnumU64Array.SetPropertyIndexes(
                index: 167,
                originalValueIndex: 167,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            nullableEnumU64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array", "TestNamespace") });

            var nullableEnumU64AsString = runtimeEntityType.AddProperty(
                "NullableEnumU64AsString",
                typeof(CompiledModelTestBase.EnumU64?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU64AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(instance).HasValue);
            nullableEnumU64AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU64>)(CompiledModelTestBase.EnumU64)value);
            nullableEnumU64AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU64>)(CompiledModelTestBase.EnumU64)value);
            nullableEnumU64AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64AsString, 168),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64AsString),
                (ValueBuffer valueBuffer) => valueBuffer[168]);
            nullableEnumU64AsString.SetPropertyIndexes(
                index: 168,
                originalValueIndex: 168,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64AsString.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                    (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                    (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)));
            nullableEnumU64AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU64>(nullableEnumU64AsString.TypeMapping.Comparer));
            nullableEnumU64AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU64>(nullableEnumU64AsString.TypeMapping.KeyComparer));
            nullableEnumU64AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString", "TestNamespace") });

            var nullableEnumU64AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnumU64AsStringArray",
                typeof(CompiledModelTestBase.EnumU64?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU64AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(instance) == null);
            nullableEnumU64AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(entity) = value);
            nullableEnumU64AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(entity) = value);
            nullableEnumU64AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64AsStringArray, 169),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[169]);
            nullableEnumU64AsStringArray.SetPropertyIndexes(
                index: 169,
                originalValueIndex: 169,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            nullableEnumU64AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray", "TestNamespace") });

            var nullableEnumU64AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnumU64AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU64?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU64AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(instance) == null);
            nullableEnumU64AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(entity) = value);
            nullableEnumU64AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(entity) = value);
            nullableEnumU64AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64AsStringCollection, 170),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[170]);
            nullableEnumU64AsStringCollection.SetPropertyIndexes(
                index: 170,
                originalValueIndex: 170,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            nullableEnumU64AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection", "TestNamespace") });

            var nullableEnumU64Collection = runtimeEntityType.AddProperty(
                "NullableEnumU64Collection",
                typeof(List<CompiledModelTestBase.EnumU64?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU64Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(instance) == null);
            nullableEnumU64Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(entity) = value);
            nullableEnumU64Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU64>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(entity) = value);
            nullableEnumU64Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64Collection, 171),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64Collection),
                (ValueBuffer valueBuffer) => valueBuffer[171]);
            nullableEnumU64Collection.SetPropertyIndexes(
                index: 171,
                originalValueIndex: 171,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU64?>, CompiledModelTestBase.EnumU64>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                        (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                        (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))));
            nullableEnumU64Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection", "TestNamespace") });

            var nullableEnumU64NestedCollection = runtimeEntityType.AddProperty(
                "NullableEnumU64NestedCollection",
                typeof(CompiledModelTestBase.EnumU64?[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU64NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU64NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU64NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(instance) == null);
            nullableEnumU64NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(entity) = value);
            nullableEnumU64NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU64>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(entity) = value);
            nullableEnumU64NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU64>[][]>(nullableEnumU64NestedCollection, 172),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[][]>(nullableEnumU64NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[172]);
            nullableEnumU64NestedCollection.SetPropertyIndexes(
                index: 172,
                originalValueIndex: 172,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU64NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.EnumU64?[][], CompiledModelTestBase.EnumU64?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<CompiledModelTestBase.EnumU64?[][], CompiledModelTestBase.EnumU64?[]>(new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                    (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU64 v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?[]>(new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.EnumU64?[][], CompiledModelTestBase.EnumU64?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<CompiledModelTestBase.EnumU64?[][], CompiledModelTestBase.EnumU64?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v))),
                    keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(new NullableValueComparer<CompiledModelTestBase.EnumU64>(new ValueComparer<CompiledModelTestBase.EnumU64>(
                        (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU64 v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU64?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU64?[], CompiledModelTestBase.EnumU64>(
                        new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value))),
                    elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                            (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.EnumU64 v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.EnumU64>(
                            (CompiledModelTestBase.EnumU64 v1, CompiledModelTestBase.EnumU64 v2) => object.Equals((object)v1, (object)v2),
                            (CompiledModelTestBase.EnumU64 v) => ((object)v).GetHashCode(),
                            (CompiledModelTestBase.EnumU64 v) => v),
                        providerValueComparer: new ValueComparer<decimal>(
                            (decimal v1, decimal v2) => v1 == v2,
                            (decimal v) => ((object)v).GetHashCode(),
                            (decimal v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "decimal(20,0)",
                            precision: 20,
                            scale: 0),
                        converter: new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                            (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                            (decimal value) => (CompiledModelTestBase.EnumU64)(long)value),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU64, decimal>(
                            JsonDecimalReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.EnumU64, decimal>(
                                (CompiledModelTestBase.EnumU64 value) => (decimal)(long)value,
                                (decimal value) => (CompiledModelTestBase.EnumU64)(long)value)))));
            nullableEnumU64NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU64NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection", "TestNamespace") });

            var nullableEnumU8 = runtimeEntityType.AddProperty(
                "NullableEnumU8",
                typeof(CompiledModelTestBase.EnumU8?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(instance).HasValue);
            nullableEnumU8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU8>)(CompiledModelTestBase.EnumU8)value);
            nullableEnumU8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU8>)(CompiledModelTestBase.EnumU8)value);
            nullableEnumU8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8, 173),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8),
                (ValueBuffer valueBuffer) => valueBuffer[173]);
            nullableEnumU8.SetPropertyIndexes(
                index: 173,
                originalValueIndex: 173,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                    (CompiledModelTestBase.EnumU8 value) => (byte)value,
                    (byte value) => (CompiledModelTestBase.EnumU8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value)));
            nullableEnumU8.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU8>(nullableEnumU8.TypeMapping.Comparer));
            nullableEnumU8.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU8>(nullableEnumU8.TypeMapping.KeyComparer));
            nullableEnumU8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8", "TestNamespace") });

            var nullableEnumU8Array = runtimeEntityType.AddProperty(
                "NullableEnumU8Array",
                typeof(CompiledModelTestBase.EnumU8?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(instance) == null);
            nullableEnumU8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(entity) = value);
            nullableEnumU8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(entity) = value);
            nullableEnumU8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8Array, 174),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8Array),
                (ValueBuffer valueBuffer) => valueBuffer[174]);
            nullableEnumU8Array.SetPropertyIndexes(
                index: 174,
                originalValueIndex: 174,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            nullableEnumU8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array", "TestNamespace") });

            var nullableEnumU8AsString = runtimeEntityType.AddProperty(
                "NullableEnumU8AsString",
                typeof(CompiledModelTestBase.EnumU8?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8AsString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8AsString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableEnumU8AsString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(instance).HasValue);
            nullableEnumU8AsString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU8>)(CompiledModelTestBase.EnumU8)value);
            nullableEnumU8AsString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(entity) = value == null ? value : (Nullable<CompiledModelTestBase.EnumU8>)(CompiledModelTestBase.EnumU8)value);
            nullableEnumU8AsString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8AsString, 175),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8AsString),
                (ValueBuffer valueBuffer) => valueBuffer[175]);
            nullableEnumU8AsString.SetPropertyIndexes(
                index: 175,
                originalValueIndex: 175,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8AsString.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                    (CompiledModelTestBase.EnumU8 value) => (byte)value,
                    (byte value) => (CompiledModelTestBase.EnumU8)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                    JsonByteReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value)));
            nullableEnumU8AsString.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU8>(nullableEnumU8AsString.TypeMapping.Comparer));
            nullableEnumU8AsString.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.EnumU8>(nullableEnumU8AsString.TypeMapping.KeyComparer));
            nullableEnumU8AsString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8AsString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString", "TestNamespace") });

            var nullableEnumU8AsStringArray = runtimeEntityType.AddProperty(
                "NullableEnumU8AsStringArray",
                typeof(CompiledModelTestBase.EnumU8?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8AsStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8AsStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU8AsStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(instance) == null);
            nullableEnumU8AsStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(entity) = value);
            nullableEnumU8AsStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<CompiledModelTestBase.EnumU8>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(entity) = value);
            nullableEnumU8AsStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8AsStringArray, 176),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8AsStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[176]);
            nullableEnumU8AsStringArray.SetPropertyIndexes(
                index: 176,
                originalValueIndex: 176,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8AsStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8?>(new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<CompiledModelTestBase.EnumU8?[], CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            nullableEnumU8AsStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8AsStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray", "TestNamespace") });

            var nullableEnumU8AsStringCollection = runtimeEntityType.AddProperty(
                "NullableEnumU8AsStringCollection",
                typeof(List<CompiledModelTestBase.EnumU8?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8AsStringCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8AsStringCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU8AsStringCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(instance) == null);
            nullableEnumU8AsStringCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(entity) = value);
            nullableEnumU8AsStringCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(entity) = value);
            nullableEnumU8AsStringCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8AsStringCollection, 177),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8AsStringCollection),
                (ValueBuffer valueBuffer) => valueBuffer[177]);
            nullableEnumU8AsStringCollection.SetPropertyIndexes(
                index: 177,
                originalValueIndex: 177,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8AsStringCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            nullableEnumU8AsStringCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8AsStringCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection", "TestNamespace") });

            var nullableEnumU8Collection = runtimeEntityType.AddProperty(
                "NullableEnumU8Collection",
                typeof(List<CompiledModelTestBase.EnumU8?>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableEnumU8Collection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableEnumU8Collection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableEnumU8Collection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(instance) == null);
            nullableEnumU8Collection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(entity) = value);
            nullableEnumU8Collection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<CompiledModelTestBase.EnumU8>> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(entity) = value);
            nullableEnumU8Collection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8Collection, 178),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8Collection),
                (ValueBuffer valueBuffer) => valueBuffer[178]);
            nullableEnumU8Collection.SetPropertyIndexes(
                index: 178,
                originalValueIndex: 178,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableEnumU8Collection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(new NullableValueComparer<CompiledModelTestBase.EnumU8>(new ValueComparer<CompiledModelTestBase.EnumU8>(
                    (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                    (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                    (CompiledModelTestBase.EnumU8 v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<CompiledModelTestBase.EnumU8?>(new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<List<CompiledModelTestBase.EnumU8?>, CompiledModelTestBase.EnumU8>(
                    new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    keyComparer: new ValueComparer<CompiledModelTestBase.EnumU8>(
                        (CompiledModelTestBase.EnumU8 v1, CompiledModelTestBase.EnumU8 v2) => object.Equals((object)v1, (object)v2),
                        (CompiledModelTestBase.EnumU8 v) => ((object)v).GetHashCode(),
                        (CompiledModelTestBase.EnumU8 v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    converter: new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                        (CompiledModelTestBase.EnumU8 value) => (byte)value,
                        (byte value) => (CompiledModelTestBase.EnumU8)value),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.EnumU8, byte>(
                        JsonByteReaderWriter.Instance,
                        new ValueConverter<CompiledModelTestBase.EnumU8, byte>(
                            (CompiledModelTestBase.EnumU8 value) => (byte)value,
                            (byte value) => (CompiledModelTestBase.EnumU8)value))));
            nullableEnumU8Collection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableEnumU8Collection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection", "TestNamespace") });

            var nullableFloat = runtimeEntityType.AddProperty(
                "NullableFloat",
                typeof(float?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableFloat", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableFloat>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableFloat.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(instance).HasValue);
            nullableFloat.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<float> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(entity) = value);
            nullableFloat.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<float> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(entity) = value);
            nullableFloat.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<float>>(nullableFloat, 179),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<float>>(nullableFloat),
                (ValueBuffer valueBuffer) => valueBuffer[179]);
            nullableFloat.SetPropertyIndexes(
                index: 179,
                originalValueIndex: 179,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableFloat.TypeMapping = SqlServerFloatTypeMapping.Default.Clone(
                comparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v),
                keyComparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v),
                providerValueComparer: new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v));
            nullableFloat.SetValueComparer(new NullableValueComparer<float>(nullableFloat.TypeMapping.Comparer));
            nullableFloat.SetKeyValueComparer(new NullableValueComparer<float>(nullableFloat.TypeMapping.KeyComparer));
            nullableFloat.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableFloat.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat", "TestNamespace") });

            var nullableFloatArray = runtimeEntityType.AddProperty(
                "NullableFloatArray",
                typeof(float?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableFloatArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableFloatArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableFloatArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(instance) == null);
            nullableFloatArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<float>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(entity) = value);
            nullableFloatArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<float>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(entity) = value);
            nullableFloatArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<float>[]>(nullableFloatArray, 180),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<float>[]>(nullableFloatArray),
                (ValueBuffer valueBuffer) => valueBuffer[180]);
            nullableFloatArray.SetPropertyIndexes(
                index: 180,
                originalValueIndex: 180,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableFloatArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<float?[], float>(new NullableValueComparer<float>(new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<float?[], float>(new NullableValueComparer<float>(new ValueComparer<float>(
                    (float v1, float v2) => v1.Equals(v2),
                    (float v) => ((object)v).GetHashCode(),
                    (float v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<float?>(new JsonCollectionOfNullableStructsReaderWriter<float?[], float>(
                    JsonFloatReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<float?[], float>(
                    JsonFloatReaderWriter.Instance),
                elementMapping: SqlServerFloatTypeMapping.Default.Clone(
                    comparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v),
                    keyComparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v),
                    providerValueComparer: new ValueComparer<float>(
                        (float v1, float v2) => v1.Equals(v2),
                        (float v) => ((object)v).GetHashCode(),
                        (float v) => v)));
            nullableFloatArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableFloatArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray", "TestNamespace") });

            var nullableGuid = runtimeEntityType.AddProperty(
                "NullableGuid",
                typeof(Guid?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableGuid", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableGuid>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableGuid.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(instance).HasValue);
            nullableGuid.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(entity) = value);
            nullableGuid.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(entity) = value);
            nullableGuid.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<Guid>>(nullableGuid, 181),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<Guid>>(nullableGuid),
                (ValueBuffer valueBuffer) => valueBuffer[181]);
            nullableGuid.SetPropertyIndexes(
                index: 181,
                originalValueIndex: 181,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableGuid.TypeMapping = GuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "uniqueidentifier"));
            nullableGuid.SetValueComparer(new NullableValueComparer<Guid>(nullableGuid.TypeMapping.Comparer));
            nullableGuid.SetKeyValueComparer(new NullableValueComparer<Guid>(nullableGuid.TypeMapping.KeyComparer));
            nullableGuid.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableGuid.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid", "TestNamespace") });

            var nullableGuidArray = runtimeEntityType.AddProperty(
                "NullableGuidArray",
                typeof(Guid?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableGuidArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableGuidArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableGuidArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(instance) == null);
            nullableGuidArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(entity) = value);
            nullableGuidArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(entity) = value);
            nullableGuidArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<Guid>[]>(nullableGuidArray, 182),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<Guid>[]>(nullableGuidArray),
                (ValueBuffer valueBuffer) => valueBuffer[182]);
            nullableGuidArray.SetPropertyIndexes(
                index: 182,
                originalValueIndex: 182,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableGuidArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Guid?>(new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                    JsonGuidReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                    JsonGuidReaderWriter.Instance),
                elementMapping: GuidTypeMapping.Default.Clone(
                    comparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    keyComparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    providerValueComparer: new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "uniqueidentifier")));
            nullableGuidArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableGuidArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray", "TestNamespace") });

            var nullableGuidNestedCollection = runtimeEntityType.AddProperty(
                "NullableGuidNestedCollection",
                typeof(Guid?[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableGuidNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableGuidNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableGuidNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(instance) == null);
            nullableGuidNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(entity) = value);
            nullableGuidNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<Guid>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(entity) = value);
            nullableGuidNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<Guid>[][]>(nullableGuidNestedCollection, 183),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<Guid>[][]>(nullableGuidNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[183]);
            nullableGuidNestedCollection.SetPropertyIndexes(
                index: 183,
                originalValueIndex: 183,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableGuidNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<Guid?[][], Guid?[]>(new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<Guid?[][], Guid?[]>(new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => ((object)v).GetHashCode(),
                    (Guid v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Guid?[]>(new JsonCollectionOfReferencesReaderWriter<Guid?[][], Guid?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                        JsonGuidReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<Guid?[][], Guid?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                        JsonGuidReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v))),
                    keyComparer: new ListOfNullableValueTypesComparer<Guid?[], Guid>(new NullableValueComparer<Guid>(new ValueComparer<Guid>(
                        (Guid v1, Guid v2) => v1 == v2,
                        (Guid v) => ((object)v).GetHashCode(),
                        (Guid v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<Guid?>(new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                        JsonGuidReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<Guid?[], Guid>(
                        JsonGuidReaderWriter.Instance),
                    elementMapping: GuidTypeMapping.Default.Clone(
                        comparer: new ValueComparer<Guid>(
                            (Guid v1, Guid v2) => v1 == v2,
                            (Guid v) => ((object)v).GetHashCode(),
                            (Guid v) => v),
                        keyComparer: new ValueComparer<Guid>(
                            (Guid v1, Guid v2) => v1 == v2,
                            (Guid v) => ((object)v).GetHashCode(),
                            (Guid v) => v),
                        providerValueComparer: new ValueComparer<Guid>(
                            (Guid v1, Guid v2) => v1 == v2,
                            (Guid v) => ((object)v).GetHashCode(),
                            (Guid v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "uniqueidentifier"))));
            nullableGuidNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableGuidNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection", "TestNamespace") });

            var nullableIPAddress = runtimeEntityType.AddProperty(
                "NullableIPAddress",
                typeof(IPAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableIPAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableIPAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableIPAddress.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(instance) == null);
            nullableIPAddress.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(entity) = value);
            nullableIPAddress.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(entity) = value);
            nullableIPAddress.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress>(nullableIPAddress, 184),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress>(nullableIPAddress),
                (ValueBuffer valueBuffer) => valueBuffer[184]);
            nullableIPAddress.SetPropertyIndexes(
                index: 184,
                originalValueIndex: 184,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableIPAddress.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                keyComparer: new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(45)",
                    size: 45,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<IPAddress, string>(
                    (IPAddress v) => ((object)v).ToString(),
                    (string v) => IPAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IPAddress, string>(
                        (IPAddress v) => ((object)v).ToString(),
                        (string v) => IPAddress.Parse(v))));
            nullableIPAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableIPAddress.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress", "TestNamespace") });

            var nullableIPAddressArray = runtimeEntityType.AddProperty(
                "NullableIPAddressArray",
                typeof(IPAddress[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableIPAddressArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableIPAddressArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableIPAddressArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(instance) == null);
            nullableIPAddressArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(entity) = value);
            nullableIPAddressArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IPAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(entity) = value);
            nullableIPAddressArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IPAddress[]>(nullableIPAddressArray, 185),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IPAddress[]>(nullableIPAddressArray),
                (ValueBuffer valueBuffer) => valueBuffer[185]);
            nullableIPAddressArray.SetPropertyIndexes(
                index: 185,
                originalValueIndex: 185,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableIPAddressArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<IPAddress[], IPAddress>(new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<IPAddress[], IPAddress>(new ValueComparer<IPAddress>(
                    (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                    (IPAddress v) => ((object)v).GetHashCode(),
                    (IPAddress v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<IPAddress>(new JsonCollectionOfReferencesReaderWriter<IPAddress[], IPAddress>(
                    new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<IPAddress[], IPAddress>(
                    new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<IPAddress>(
                        (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                        (IPAddress v) => ((object)v).GetHashCode(),
                        (IPAddress v) => v),
                    keyComparer: new ValueComparer<IPAddress>(
                        (IPAddress v1, IPAddress v2) => v1 == null && v2 == null || v1 != null && v2 != null && v1.Equals(v2),
                        (IPAddress v) => ((object)v).GetHashCode(),
                        (IPAddress v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(45)",
                        size: 45,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<IPAddress, string>(
                        (IPAddress v) => ((object)v).ToString(),
                        (string v) => IPAddress.Parse(v)),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IPAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<IPAddress, string>(
                            (IPAddress v) => ((object)v).ToString(),
                            (string v) => IPAddress.Parse(v)))));
            nullableIPAddressArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableIPAddressArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray", "TestNamespace") });

            var nullableInt16 = runtimeEntityType.AddProperty(
                "NullableInt16",
                typeof(short?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableInt16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(instance).HasValue);
            nullableInt16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<short> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(entity) = value);
            nullableInt16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<short> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(entity) = value);
            nullableInt16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<short>>(nullableInt16, 186),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<short>>(nullableInt16),
                (ValueBuffer valueBuffer) => valueBuffer[186]);
            nullableInt16.SetPropertyIndexes(
                index: 186,
                originalValueIndex: 186,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt16.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                keyComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v));
            nullableInt16.SetValueComparer(new NullableValueComparer<short>(nullableInt16.TypeMapping.Comparer));
            nullableInt16.SetKeyValueComparer(new NullableValueComparer<short>(nullableInt16.TypeMapping.KeyComparer));
            nullableInt16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16", "TestNamespace") });

            var nullableInt16Array = runtimeEntityType.AddProperty(
                "NullableInt16Array",
                typeof(short?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(instance) == null);
            nullableInt16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<short>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(entity) = value);
            nullableInt16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<short>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(entity) = value);
            nullableInt16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<short>[]>(nullableInt16Array, 187),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<short>[]>(nullableInt16Array),
                (ValueBuffer valueBuffer) => valueBuffer[187]);
            nullableInt16Array.SetPropertyIndexes(
                index: 187,
                originalValueIndex: 187,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<short?[], short>(new NullableValueComparer<short>(new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<short?[], short>(new NullableValueComparer<short>(new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<short?>(new JsonCollectionOfNullableStructsReaderWriter<short?[], short>(
                    JsonInt16ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<short?[], short>(
                    JsonInt16ReaderWriter.Instance),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    keyComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v)));
            nullableInt16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array", "TestNamespace") });

            var nullableInt32 = runtimeEntityType.AddProperty(
                "NullableInt32",
                typeof(int?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableInt32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(instance).HasValue);
            nullableInt32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(entity) = value);
            nullableInt32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(entity) = value);
            nullableInt32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<int>>(nullableInt32, 188),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<int>>(nullableInt32),
                (ValueBuffer valueBuffer) => valueBuffer[188]);
            nullableInt32.SetPropertyIndexes(
                index: 188,
                originalValueIndex: 188,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt32.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v));
            nullableInt32.SetValueComparer(new NullableValueComparer<int>(nullableInt32.TypeMapping.Comparer));
            nullableInt32.SetKeyValueComparer(new NullableValueComparer<int>(nullableInt32.TypeMapping.KeyComparer));
            nullableInt32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32", "TestNamespace") });

            var nullableInt32Array = runtimeEntityType.AddProperty(
                "NullableInt32Array",
                typeof(int?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(instance) == null);
            nullableInt32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(entity) = value);
            nullableInt32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(entity) = value);
            nullableInt32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<int>[]>(nullableInt32Array, 189),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<int>[]>(nullableInt32Array),
                (ValueBuffer valueBuffer) => valueBuffer[189]);
            nullableInt32Array.SetPropertyIndexes(
                index: 189,
                originalValueIndex: 189,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<int?>(new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                    JsonInt32ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                    JsonInt32ReaderWriter.Instance),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    keyComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v)));
            nullableInt32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array", "TestNamespace") });

            var nullableInt32NestedCollection = runtimeEntityType.AddProperty(
                "NullableInt32NestedCollection",
                typeof(int?[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt32NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt32NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt32NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(instance) == null);
            nullableInt32NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(entity) = value);
            nullableInt32NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<int>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(entity) = value);
            nullableInt32NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<int>[][]>(nullableInt32NestedCollection, 190),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<int>[][]>(nullableInt32NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[190]);
            nullableInt32NestedCollection.SetPropertyIndexes(
                index: 190,
                originalValueIndex: 190,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt32NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<int?[][], int?[]>(new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<int?[][], int?[]>(new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<int?[]>(new JsonCollectionOfReferencesReaderWriter<int?[][], int?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                        JsonInt32ReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<int?[][], int?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                        JsonInt32ReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v))),
                    keyComparer: new ListOfNullableValueTypesComparer<int?[], int>(new NullableValueComparer<int>(new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<int?>(new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                        JsonInt32ReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<int?[], int>(
                        JsonInt32ReaderWriter.Instance),
                    elementMapping: IntTypeMapping.Default.Clone(
                        comparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v),
                        keyComparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            (int v1, int v2) => v1 == v2,
                            (int v) => v,
                            (int v) => v))));
            nullableInt32NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt32NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection", "TestNamespace") });

            var nullableInt64 = runtimeEntityType.AddProperty(
                "NullableInt64",
                typeof(long?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableInt64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(instance).HasValue);
            nullableInt64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<long> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(entity) = value);
            nullableInt64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<long> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(entity) = value);
            nullableInt64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<long>>(nullableInt64, 191),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<long>>(nullableInt64),
                (ValueBuffer valueBuffer) => valueBuffer[191]);
            nullableInt64.SetPropertyIndexes(
                index: 191,
                originalValueIndex: 191,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt64.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                keyComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v));
            nullableInt64.SetValueComparer(new NullableValueComparer<long>(nullableInt64.TypeMapping.Comparer));
            nullableInt64.SetKeyValueComparer(new NullableValueComparer<long>(nullableInt64.TypeMapping.KeyComparer));
            nullableInt64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64", "TestNamespace") });

            var nullableInt64Array = runtimeEntityType.AddProperty(
                "NullableInt64Array",
                typeof(long?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(instance) == null);
            nullableInt64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<long>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(entity) = value);
            nullableInt64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<long>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(entity) = value);
            nullableInt64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<long>[]>(nullableInt64Array, 192),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<long>[]>(nullableInt64Array),
                (ValueBuffer valueBuffer) => valueBuffer[192]);
            nullableInt64Array.SetPropertyIndexes(
                index: 192,
                originalValueIndex: 192,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<long?>(new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                    JsonInt64ReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                    JsonInt64ReaderWriter.Instance),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    keyComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v)));
            nullableInt64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array", "TestNamespace") });

            var nullableInt64NestedCollection = runtimeEntityType.AddProperty(
                "NullableInt64NestedCollection",
                typeof(List<long?[][]>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt64NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt64NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt64NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(instance) == null);
            nullableInt64NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<long>[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(entity) = value);
            nullableInt64NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<Nullable<long>[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(entity) = value);
            nullableInt64NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<Nullable<long>[][]>>(nullableInt64NestedCollection, 193),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<Nullable<long>[][]>>(nullableInt64NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[193]);
            nullableInt64NestedCollection.SetPropertyIndexes(
                index: 193,
                originalValueIndex: 193,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt64NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<long?[][]>, long?[][]>(new ListOfReferenceTypesComparer<long?[][], long?[]>(new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v))))),
                keyComparer: new ListOfReferenceTypesComparer<List<long?[][]>, long?[][]>(new ListOfReferenceTypesComparer<long?[][], long?[]>(new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v))))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<long?[][]>(new JsonCollectionOfReferencesReaderWriter<List<long?[][]>, long?[][]>(
                    new JsonCollectionOfReferencesReaderWriter<long?[][], long?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<long?[][]>, long?[][]>(
                    new JsonCollectionOfReferencesReaderWriter<long?[][], long?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<long?[][], long?[]>(new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v)))),
                    keyComparer: new ListOfReferenceTypesComparer<long?[][], long?[]>(new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v)))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<long?[]>(new JsonCollectionOfReferencesReaderWriter<long?[][], long?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<long?[][], long?[]>(
                        new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance)),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                            (long v1, long v2) => v1 == v2,
                            (long v) => ((object)v).GetHashCode(),
                            (long v) => v))),
                        keyComparer: new ListOfNullableValueTypesComparer<long?[], long>(new NullableValueComparer<long>(new ValueComparer<long>(
                            (long v1, long v2) => v1 == v2,
                            (long v) => ((object)v).GetHashCode(),
                            (long v) => v))),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<long?>(new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance)),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<long?[], long>(
                            JsonInt64ReaderWriter.Instance),
                        elementMapping: SqlServerLongTypeMapping.Default.Clone(
                            comparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v),
                            keyComparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v),
                            providerValueComparer: new ValueComparer<long>(
                                (long v1, long v2) => v1 == v2,
                                (long v) => ((object)v).GetHashCode(),
                                (long v) => v)))));
            nullableInt64NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt64NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection", "TestNamespace") });

            var nullableInt8 = runtimeEntityType.AddProperty(
                "NullableInt8",
                typeof(sbyte?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableInt8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(instance).HasValue);
            nullableInt8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<sbyte> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(entity) = value);
            nullableInt8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<sbyte> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(entity) = value);
            nullableInt8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<sbyte>>(nullableInt8, 194),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<sbyte>>(nullableInt8),
                (ValueBuffer valueBuffer) => valueBuffer[194]);
            nullableInt8.SetPropertyIndexes(
                index: 194,
                originalValueIndex: 194,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt8.TypeMapping = SqlServerShortTypeMapping.Default.Clone(
                comparer: new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v),
                keyComparer: new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v),
                providerValueComparer: new ValueComparer<short>(
                    (short v1, short v2) => v1 == v2,
                    (short v) => (int)v,
                    (short v) => v),
                converter: new ValueConverter<sbyte, short>(
                    (sbyte v) => (short)v,
                    (short v) => (sbyte)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<sbyte, short>(
                    JsonInt16ReaderWriter.Instance,
                    new ValueConverter<sbyte, short>(
                        (sbyte v) => (short)v,
                        (short v) => (sbyte)v)));
            nullableInt8.SetValueComparer(new NullableValueComparer<sbyte>(nullableInt8.TypeMapping.Comparer));
            nullableInt8.SetKeyValueComparer(new NullableValueComparer<sbyte>(nullableInt8.TypeMapping.KeyComparer));
            nullableInt8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8", "TestNamespace") });

            var nullableInt8Array = runtimeEntityType.AddProperty(
                "NullableInt8Array",
                typeof(sbyte?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableInt8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableInt8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableInt8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(instance) == null);
            nullableInt8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<sbyte>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(entity) = value);
            nullableInt8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<sbyte>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(entity) = value);
            nullableInt8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<sbyte>[]>(nullableInt8Array, 195),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<sbyte>[]>(nullableInt8Array),
                (ValueBuffer valueBuffer) => valueBuffer[195]);
            nullableInt8Array.SetPropertyIndexes(
                index: 195,
                originalValueIndex: 195,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableInt8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<sbyte?[], sbyte>(new NullableValueComparer<sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<sbyte?[], sbyte>(new NullableValueComparer<sbyte>(new ValueComparer<sbyte>(
                    (sbyte v1, sbyte v2) => v1 == v2,
                    (sbyte v) => (int)v,
                    (sbyte v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<sbyte?>(new JsonCollectionOfNullableStructsReaderWriter<sbyte?[], sbyte>(
                    new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<sbyte?[], sbyte>(
                    new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v))),
                elementMapping: SqlServerShortTypeMapping.Default.Clone(
                    comparer: new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v),
                    keyComparer: new ValueComparer<sbyte>(
                        (sbyte v1, sbyte v2) => v1 == v2,
                        (sbyte v) => (int)v,
                        (sbyte v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        (short v1, short v2) => v1 == v2,
                        (short v) => (int)v,
                        (short v) => v),
                    converter: new ValueConverter<sbyte, short>(
                        (sbyte v) => (short)v,
                        (short v) => (sbyte)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<sbyte, short>(
                        JsonInt16ReaderWriter.Instance,
                        new ValueConverter<sbyte, short>(
                            (sbyte v) => (short)v,
                            (short v) => (sbyte)v))));
            nullableInt8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableInt8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array", "TestNamespace") });

            var nullablePhysicalAddress = runtimeEntityType.AddProperty(
                "NullablePhysicalAddress",
                typeof(PhysicalAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullablePhysicalAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullablePhysicalAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullablePhysicalAddress.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(instance) == null);
            nullablePhysicalAddress.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(entity) = value);
            nullablePhysicalAddress.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(entity) = value);
            nullablePhysicalAddress.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress>(nullablePhysicalAddress, 196),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress>(nullablePhysicalAddress),
                (ValueBuffer valueBuffer) => valueBuffer[196]);
            nullablePhysicalAddress.SetPropertyIndexes(
                index: 196,
                originalValueIndex: 196,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullablePhysicalAddress.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                keyComparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(20)",
                    size: 20,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<PhysicalAddress, string>(
                    (PhysicalAddress v) => ((object)v).ToString(),
                    (string v) => PhysicalAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<PhysicalAddress, string>(
                        (PhysicalAddress v) => ((object)v).ToString(),
                        (string v) => PhysicalAddress.Parse(v))));
            nullablePhysicalAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullablePhysicalAddress.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress", "TestNamespace") });

            var nullablePhysicalAddressArray = runtimeEntityType.AddProperty(
                "NullablePhysicalAddressArray",
                typeof(PhysicalAddress[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullablePhysicalAddressArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullablePhysicalAddressArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullablePhysicalAddressArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(instance) == null);
            nullablePhysicalAddressArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(entity) = value);
            nullablePhysicalAddressArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(entity) = value);
            nullablePhysicalAddressArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress[]>(nullablePhysicalAddressArray, 197),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress[]>(nullablePhysicalAddressArray),
                (ValueBuffer valueBuffer) => valueBuffer[197]);
            nullablePhysicalAddressArray.SetPropertyIndexes(
                index: 197,
                originalValueIndex: 197,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullablePhysicalAddressArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<PhysicalAddress>(new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                    new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                    new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v),
                    keyComparer: new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(20)",
                        size: 20,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<PhysicalAddress, string>(
                        (PhysicalAddress v) => ((object)v).ToString(),
                        (string v) => PhysicalAddress.Parse(v)),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v)))));
            nullablePhysicalAddressArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullablePhysicalAddressArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray", "TestNamespace") });

            var nullablePhysicalAddressNestedCollection = runtimeEntityType.AddProperty(
                "NullablePhysicalAddressNestedCollection",
                typeof(IEnumerable<PhysicalAddress[][]>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullablePhysicalAddressNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullablePhysicalAddressNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullablePhysicalAddressNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(instance) == null);
            nullablePhysicalAddressNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, IEnumerable<PhysicalAddress[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(entity) = value);
            nullablePhysicalAddressNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, IEnumerable<PhysicalAddress[][]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(entity) = value);
            nullablePhysicalAddressNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<PhysicalAddress[][]>>(nullablePhysicalAddressNestedCollection, 198),
                (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<PhysicalAddress[][]>>(nullablePhysicalAddressNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[198]);
            nullablePhysicalAddressNestedCollection.SetPropertyIndexes(
                index: 198,
                originalValueIndex: 198,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullablePhysicalAddressNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<PhysicalAddress[][]>, PhysicalAddress[][]>(new ListOfReferenceTypesComparer<PhysicalAddress[][], PhysicalAddress[]>(new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<List<PhysicalAddress[][]>, PhysicalAddress[][]>(new ListOfReferenceTypesComparer<PhysicalAddress[][], PhysicalAddress[]>(new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<PhysicalAddress[][]>(new JsonCollectionOfReferencesReaderWriter<List<PhysicalAddress[][]>, PhysicalAddress[][]>(
                    new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[][], PhysicalAddress[]>(
                        new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v))))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<PhysicalAddress[][]>, PhysicalAddress[][]>(
                    new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[][], PhysicalAddress[]>(
                        new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v)))))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<PhysicalAddress[][], PhysicalAddress[]>(new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v))),
                    keyComparer: new ListOfReferenceTypesComparer<PhysicalAddress[][], PhysicalAddress[]>(new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<PhysicalAddress[]>(new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[][], PhysicalAddress[]>(
                        new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v)))))),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[][], PhysicalAddress[]>(
                        new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v))))),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                            (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                            (PhysicalAddress v) => ((object)v).GetHashCode(),
                            (PhysicalAddress v) => v)),
                        keyComparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                            (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                            (PhysicalAddress v) => ((object)v).GetHashCode(),
                            (PhysicalAddress v) => v)),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        converter: new CollectionToJsonStringConverter<PhysicalAddress>(new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v))))),
                        storeTypePostfix: StoreTypePostfix.None,
                        jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                            new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v)))),
                        elementMapping: SqlServerStringTypeMapping.Default.Clone(
                            comparer: new ValueComparer<PhysicalAddress>(
                                (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                                (PhysicalAddress v) => ((object)v).GetHashCode(),
                                (PhysicalAddress v) => v),
                            keyComparer: new ValueComparer<PhysicalAddress>(
                                (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                                (PhysicalAddress v) => ((object)v).GetHashCode(),
                                (PhysicalAddress v) => v),
                            providerValueComparer: new ValueComparer<string>(
                                (string v1, string v2) => v1 == v2,
                                (string v) => ((object)v).GetHashCode(),
                                (string v) => v),
                            mappingInfo: new RelationalTypeMappingInfo(
                                storeTypeName: "nvarchar(20)",
                                size: 20,
                                unicode: true,
                                dbType: System.Data.DbType.String),
                            converter: new ValueConverter<PhysicalAddress, string>(
                                (PhysicalAddress v) => ((object)v).ToString(),
                                (string v) => PhysicalAddress.Parse(v)),
                            jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                                JsonStringReaderWriter.Instance,
                                new ValueConverter<PhysicalAddress, string>(
                                    (PhysicalAddress v) => ((object)v).ToString(),
                                    (string v) => PhysicalAddress.Parse(v)))))));
            nullablePhysicalAddressNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullablePhysicalAddressNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection", "TestNamespace") });

            var nullableString = runtimeEntityType.AddProperty(
                "NullableString",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableString", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableString>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableString.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(instance) == null);
            nullableString.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(entity) = value);
            nullableString.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(entity) = value);
            nullableString.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(nullableString, 199),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(nullableString),
                (ValueBuffer valueBuffer) => valueBuffer[199]);
            nullableString.SetPropertyIndexes(
                index: 199,
                originalValueIndex: 199,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableString.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            nullableString.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableString.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString", "TestNamespace") });

            var nullableStringArray = runtimeEntityType.AddProperty(
                "NullableStringArray",
                typeof(string[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableStringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableStringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableStringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(instance) == null);
            nullableStringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(entity) = value);
            nullableStringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(entity) = value);
            nullableStringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string[]>(nullableStringArray, 200),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string[]>(nullableStringArray),
                (ValueBuffer valueBuffer) => valueBuffer[200]);
            nullableStringArray.SetPropertyIndexes(
                index: 200,
                originalValueIndex: 200,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableStringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<string>(new JsonCollectionOfReferencesReaderWriter<string[], string>(
                    JsonStringReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[], string>(
                    JsonStringReaderWriter.Instance),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    keyComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    storeTypePostfix: StoreTypePostfix.None));
            nullableStringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableStringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray", "TestNamespace") });

            var nullableStringNestedCollection = runtimeEntityType.AddProperty(
                "NullableStringNestedCollection",
                typeof(string[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableStringNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableStringNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableStringNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(instance) == null);
            nullableStringNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(entity) = value);
            nullableStringNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(entity) = value);
            nullableStringNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string[][]>(nullableStringNestedCollection, 201),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string[][]>(nullableStringNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[201]);
            nullableStringNestedCollection.SetPropertyIndexes(
                index: 201,
                originalValueIndex: 201,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableStringNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<string[][], string[]>(new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<string[][], string[]>(new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<string[]>(new JsonCollectionOfReferencesReaderWriter<string[][], string[]>(
                    new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[][], string[]>(
                    new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v)),
                    keyComparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<string>(new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        keyComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        storeTypePostfix: StoreTypePostfix.None)));
            nullableStringNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableStringNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection", "TestNamespace") });

            var nullableTimeOnly = runtimeEntityType.AddProperty(
                "NullableTimeOnly",
                typeof(TimeOnly?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableTimeOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableTimeOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableTimeOnly.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(instance).HasValue);
            nullableTimeOnly.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeOnly> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(entity) = value);
            nullableTimeOnly.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeOnly> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(entity) = value);
            nullableTimeOnly.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<TimeOnly>>(nullableTimeOnly, 202),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<TimeOnly>>(nullableTimeOnly),
                (ValueBuffer valueBuffer) => valueBuffer[202]);
            nullableTimeOnly.SetPropertyIndexes(
                index: 202,
                originalValueIndex: 202,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableTimeOnly.TypeMapping = SqlServerTimeOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                keyComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                providerValueComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v));
            nullableTimeOnly.SetValueComparer(new NullableValueComparer<TimeOnly>(nullableTimeOnly.TypeMapping.Comparer));
            nullableTimeOnly.SetKeyValueComparer(new NullableValueComparer<TimeOnly>(nullableTimeOnly.TypeMapping.KeyComparer));
            nullableTimeOnly.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableTimeOnly.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly", "TestNamespace") });

            var nullableTimeOnlyArray = runtimeEntityType.AddProperty(
                "NullableTimeOnlyArray",
                typeof(TimeOnly?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableTimeOnlyArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableTimeOnlyArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableTimeOnlyArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(instance) == null);
            nullableTimeOnlyArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeOnly>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(entity) = value);
            nullableTimeOnlyArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeOnly>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(entity) = value);
            nullableTimeOnlyArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<TimeOnly>[]>(nullableTimeOnlyArray, 203),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<TimeOnly>[]>(nullableTimeOnlyArray),
                (ValueBuffer valueBuffer) => valueBuffer[203]);
            nullableTimeOnlyArray.SetPropertyIndexes(
                index: 203,
                originalValueIndex: 203,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableTimeOnlyArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<TimeOnly?[], TimeOnly>(new NullableValueComparer<TimeOnly>(new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<TimeOnly?[], TimeOnly>(new NullableValueComparer<TimeOnly>(new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<TimeOnly?>(new JsonCollectionOfNullableStructsReaderWriter<TimeOnly?[], TimeOnly>(
                    JsonTimeOnlyReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<TimeOnly?[], TimeOnly>(
                    JsonTimeOnlyReaderWriter.Instance),
                elementMapping: SqlServerTimeOnlyTypeMapping.Default.Clone(
                    comparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v),
                    keyComparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v),
                    providerValueComparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v)));
            nullableTimeOnlyArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableTimeOnlyArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray", "TestNamespace") });

            var nullableTimeSpan = runtimeEntityType.AddProperty(
                "NullableTimeSpan",
                typeof(TimeSpan?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableTimeSpan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableTimeSpan>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableTimeSpan.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(instance).HasValue);
            nullableTimeSpan.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeSpan> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(entity) = value);
            nullableTimeSpan.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeSpan> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(entity) = value);
            nullableTimeSpan.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<TimeSpan>>(nullableTimeSpan, 204),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<TimeSpan>>(nullableTimeSpan),
                (ValueBuffer valueBuffer) => valueBuffer[204]);
            nullableTimeSpan.SetPropertyIndexes(
                index: 204,
                originalValueIndex: 204,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableTimeSpan.TypeMapping = SqlServerTimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v));
            nullableTimeSpan.SetValueComparer(new NullableValueComparer<TimeSpan>(nullableTimeSpan.TypeMapping.Comparer));
            nullableTimeSpan.SetKeyValueComparer(new NullableValueComparer<TimeSpan>(nullableTimeSpan.TypeMapping.KeyComparer));
            nullableTimeSpan.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableTimeSpan.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan", "TestNamespace") });

            var nullableTimeSpanArray = runtimeEntityType.AddProperty(
                "NullableTimeSpanArray",
                typeof(TimeSpan?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableTimeSpanArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableTimeSpanArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableTimeSpanArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(instance) == null);
            nullableTimeSpanArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeSpan>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(entity) = value);
            nullableTimeSpanArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<TimeSpan>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(entity) = value);
            nullableTimeSpanArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<TimeSpan>[]>(nullableTimeSpanArray, 205),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<TimeSpan>[]>(nullableTimeSpanArray),
                (ValueBuffer valueBuffer) => valueBuffer[205]);
            nullableTimeSpanArray.SetPropertyIndexes(
                index: 205,
                originalValueIndex: 205,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableTimeSpanArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<TimeSpan?[], TimeSpan>(new NullableValueComparer<TimeSpan>(new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<TimeSpan?[], TimeSpan>(new NullableValueComparer<TimeSpan>(new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<TimeSpan?>(new JsonCollectionOfNullableStructsReaderWriter<TimeSpan?[], TimeSpan>(
                    JsonTimeSpanReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<TimeSpan?[], TimeSpan>(
                    JsonTimeSpanReaderWriter.Instance),
                elementMapping: SqlServerTimeSpanTypeMapping.Default.Clone(
                    comparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v),
                    keyComparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v),
                    providerValueComparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v)));
            nullableTimeSpanArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableTimeSpanArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray", "TestNamespace") });

            var nullableUInt16 = runtimeEntityType.AddProperty(
                "NullableUInt16",
                typeof(ushort?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableUInt16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(instance).HasValue);
            nullableUInt16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ushort> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(entity) = value);
            nullableUInt16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ushort> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(entity) = value);
            nullableUInt16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<ushort>>(nullableUInt16, 206),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<ushort>>(nullableUInt16),
                (ValueBuffer valueBuffer) => valueBuffer[206]);
            nullableUInt16.SetPropertyIndexes(
                index: 206,
                originalValueIndex: 206,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt16.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<ushort, int>(
                    (ushort v) => (int)v,
                    (int v) => (ushort)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ushort, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<ushort, int>(
                        (ushort v) => (int)v,
                        (int v) => (ushort)v)));
            nullableUInt16.SetValueComparer(new NullableValueComparer<ushort>(nullableUInt16.TypeMapping.Comparer));
            nullableUInt16.SetKeyValueComparer(new NullableValueComparer<ushort>(nullableUInt16.TypeMapping.KeyComparer));
            nullableUInt16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16", "TestNamespace") });

            var nullableUInt16Array = runtimeEntityType.AddProperty(
                "NullableUInt16Array",
                typeof(ushort?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUInt16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(instance) == null);
            nullableUInt16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ushort>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(entity) = value);
            nullableUInt16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ushort>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(entity) = value);
            nullableUInt16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<ushort>[]>(nullableUInt16Array, 207),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<ushort>[]>(nullableUInt16Array),
                (ValueBuffer valueBuffer) => valueBuffer[207]);
            nullableUInt16Array.SetPropertyIndexes(
                index: 207,
                originalValueIndex: 207,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<ushort?[], ushort>(new NullableValueComparer<ushort>(new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<ushort?[], ushort>(new NullableValueComparer<ushort>(new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<ushort?>(new JsonCollectionOfNullableStructsReaderWriter<ushort?[], ushort>(
                    new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<ushort?[], ushort>(
                    new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<ushort>(
                        (ushort v1, ushort v2) => v1 == v2,
                        (ushort v) => (int)v,
                        (ushort v) => v),
                    keyComparer: new ValueComparer<ushort>(
                        (ushort v1, ushort v2) => v1 == v2,
                        (ushort v) => (int)v,
                        (ushort v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<ushort, int>(
                        (ushort v) => (int)v,
                        (int v) => (ushort)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v))));
            nullableUInt16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array", "TestNamespace") });

            var nullableUInt32 = runtimeEntityType.AddProperty(
                "NullableUInt32",
                typeof(uint?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableUInt32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(instance).HasValue);
            nullableUInt32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<uint> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(entity) = value);
            nullableUInt32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<uint> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(entity) = value);
            nullableUInt32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<uint>>(nullableUInt32, 208),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<uint>>(nullableUInt32),
                (ValueBuffer valueBuffer) => valueBuffer[208]);
            nullableUInt32.SetPropertyIndexes(
                index: 208,
                originalValueIndex: 208,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt32.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<uint, long>(
                    (uint v) => (long)v,
                    (long v) => (uint)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<uint, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<uint, long>(
                        (uint v) => (long)v,
                        (long v) => (uint)v)));
            nullableUInt32.SetValueComparer(new NullableValueComparer<uint>(nullableUInt32.TypeMapping.Comparer));
            nullableUInt32.SetKeyValueComparer(new NullableValueComparer<uint>(nullableUInt32.TypeMapping.KeyComparer));
            nullableUInt32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32", "TestNamespace") });

            var nullableUInt32Array = runtimeEntityType.AddProperty(
                "NullableUInt32Array",
                typeof(uint?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUInt32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(instance) == null);
            nullableUInt32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<uint>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(entity) = value);
            nullableUInt32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<uint>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(entity) = value);
            nullableUInt32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<uint>[]>(nullableUInt32Array, 209),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<uint>[]>(nullableUInt32Array),
                (ValueBuffer valueBuffer) => valueBuffer[209]);
            nullableUInt32Array.SetPropertyIndexes(
                index: 209,
                originalValueIndex: 209,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<uint?[], uint>(new NullableValueComparer<uint>(new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<uint?[], uint>(new NullableValueComparer<uint>(new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<uint?>(new JsonCollectionOfNullableStructsReaderWriter<uint?[], uint>(
                    new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<uint?[], uint>(
                    new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<uint>(
                        (uint v1, uint v2) => v1 == v2,
                        (uint v) => (int)v,
                        (uint v) => v),
                    keyComparer: new ValueComparer<uint>(
                        (uint v1, uint v2) => v1 == v2,
                        (uint v) => (int)v,
                        (uint v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<uint, long>(
                        (uint v) => (long)v,
                        (long v) => (uint)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v))));
            nullableUInt32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array", "TestNamespace") });

            var nullableUInt64 = runtimeEntityType.AddProperty(
                "NullableUInt64",
                typeof(ulong?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableUInt64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(instance).HasValue);
            nullableUInt64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ulong> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(entity) = value);
            nullableUInt64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ulong> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(entity) = value);
            nullableUInt64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<ulong>>(nullableUInt64, 210),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<ulong>>(nullableUInt64),
                (ValueBuffer valueBuffer) => valueBuffer[210]);
            nullableUInt64.SetPropertyIndexes(
                index: 210,
                originalValueIndex: 210,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt64.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    (ulong v) => (decimal)v,
                    (decimal v) => (ulong)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        (ulong v) => (decimal)v,
                        (decimal v) => (ulong)v)));
            nullableUInt64.SetValueComparer(new NullableValueComparer<ulong>(nullableUInt64.TypeMapping.Comparer));
            nullableUInt64.SetKeyValueComparer(new NullableValueComparer<ulong>(nullableUInt64.TypeMapping.KeyComparer));
            nullableUInt64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64", "TestNamespace") });

            var nullableUInt64Array = runtimeEntityType.AddProperty(
                "NullableUInt64Array",
                typeof(ulong?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUInt64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(instance) == null);
            nullableUInt64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ulong>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(entity) = value);
            nullableUInt64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<ulong>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(entity) = value);
            nullableUInt64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<ulong>[]>(nullableUInt64Array, 211),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<ulong>[]>(nullableUInt64Array),
                (ValueBuffer valueBuffer) => valueBuffer[211]);
            nullableUInt64Array.SetPropertyIndexes(
                index: 211,
                originalValueIndex: 211,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<ulong?[], ulong>(new NullableValueComparer<ulong>(new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<ulong?[], ulong>(new NullableValueComparer<ulong>(new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<ulong?>(new JsonCollectionOfNullableStructsReaderWriter<ulong?[], ulong>(
                    new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<ulong?[], ulong>(
                    new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<ulong>(
                        (ulong v1, ulong v2) => v1 == v2,
                        (ulong v) => ((object)v).GetHashCode(),
                        (ulong v) => v),
                    keyComparer: new ValueComparer<ulong>(
                        (ulong v1, ulong v2) => v1 == v2,
                        (ulong v) => ((object)v).GetHashCode(),
                        (ulong v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<ulong, decimal>(
                        (ulong v) => (decimal)v,
                        (decimal v) => (ulong)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v))));
            nullableUInt64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array", "TestNamespace") });

            var nullableUInt8 = runtimeEntityType.AddProperty(
                "NullableUInt8",
                typeof(byte?),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableUInt8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(entity),
                (CompiledModelTestBase.ManyTypes entity) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(entity).HasValue,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(instance),
                (CompiledModelTestBase.ManyTypes instance) => !UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(instance).HasValue);
            nullableUInt8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(entity) = value);
            nullableUInt8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(entity) = value);
            nullableUInt8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<byte>>(nullableUInt8, 212),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<byte>>(nullableUInt8),
                (ValueBuffer valueBuffer) => valueBuffer[212]);
            nullableUInt8.SetPropertyIndexes(
                index: 212,
                originalValueIndex: 212,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt8.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                keyComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v));
            nullableUInt8.SetValueComparer(new NullableValueComparer<byte>(nullableUInt8.TypeMapping.Comparer));
            nullableUInt8.SetKeyValueComparer(new NullableValueComparer<byte>(nullableUInt8.TypeMapping.KeyComparer));
            nullableUInt8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8", "TestNamespace") });

            var nullableUInt8Array = runtimeEntityType.AddProperty(
                "NullableUInt8Array",
                typeof(byte?[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUInt8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(instance) == null);
            nullableUInt8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(entity) = value);
            nullableUInt8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte>[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(entity) = value);
            nullableUInt8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<byte>[]>(nullableUInt8Array, 213),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<byte>[]>(nullableUInt8Array),
                (ValueBuffer valueBuffer) => valueBuffer[213]);
            nullableUInt8Array.SetPropertyIndexes(
                index: 213,
                originalValueIndex: 213,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt8Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v))),
                keyComparer: new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte?>(new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                    JsonByteReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                    JsonByteReaderWriter.Instance),
                elementMapping: SqlServerByteTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    keyComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v)));
            nullableUInt8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array", "TestNamespace") });

            var nullableUInt8NestedCollection = runtimeEntityType.AddProperty(
                "NullableUInt8NestedCollection",
                typeof(byte?[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUInt8NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUInt8NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUInt8NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(instance) == null);
            nullableUInt8NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(entity) = value);
            nullableUInt8NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Nullable<byte>[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(entity) = value);
            nullableUInt8NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Nullable<byte>[][]>(nullableUInt8NestedCollection, 214),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Nullable<byte>[][]>(nullableUInt8NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[214]);
            nullableUInt8NestedCollection.SetPropertyIndexes(
                index: 214,
                originalValueIndex: 214,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUInt8NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<byte?[][], byte?[]>(new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v)))),
                keyComparer: new ListOfReferenceTypesComparer<byte?[][], byte?[]>(new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v)))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte?[]>(new JsonCollectionOfReferencesReaderWriter<byte?[][], byte?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                        JsonByteReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<byte?[][], byte?[]>(
                    new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                        JsonByteReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v))),
                    keyComparer: new ListOfNullableValueTypesComparer<byte?[], byte>(new NullableValueComparer<byte>(new ValueComparer<byte>(
                        (byte v1, byte v2) => v1 == v2,
                        (byte v) => (int)v,
                        (byte v) => v))),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<byte?>(new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                        JsonByteReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfNullableStructsReaderWriter<byte?[], byte>(
                        JsonByteReaderWriter.Instance),
                    elementMapping: SqlServerByteTypeMapping.Default.Clone(
                        comparer: new ValueComparer<byte>(
                            (byte v1, byte v2) => v1 == v2,
                            (byte v) => (int)v,
                            (byte v) => v),
                        keyComparer: new ValueComparer<byte>(
                            (byte v1, byte v2) => v1 == v2,
                            (byte v) => (int)v,
                            (byte v) => v),
                        providerValueComparer: new ValueComparer<byte>(
                            (byte v1, byte v2) => v1 == v2,
                            (byte v) => (int)v,
                            (byte v) => v))));
            nullableUInt8NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUInt8NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection", "TestNamespace") });

            var nullableUri = runtimeEntityType.AddProperty(
                "NullableUri",
                typeof(Uri),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            nullableUri.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(instance) == null);
            nullableUri.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(entity) = value);
            nullableUri.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(entity) = value);
            nullableUri.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(nullableUri, 215),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(nullableUri),
                (ValueBuffer valueBuffer) => valueBuffer[215]);
            nullableUri.SetPropertyIndexes(
                index: 215,
                originalValueIndex: 215,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUri.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => ((object)v).ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => ((object)v).ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
            nullableUri.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUri.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri", "TestNamespace") });

            var nullableUriArray = runtimeEntityType.AddProperty(
                "NullableUriArray",
                typeof(Uri[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("NullableUriArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<NullableUriArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            nullableUriArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(instance) == null);
            nullableUriArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(entity) = value);
            nullableUriArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(entity) = value);
            nullableUriArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri[]>(nullableUriArray, 216),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Uri[]>(nullableUriArray),
                (ValueBuffer valueBuffer) => valueBuffer[216]);
            nullableUriArray.SetPropertyIndexes(
                index: 216,
                originalValueIndex: 216,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            nullableUriArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<Uri[], Uri>(new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<Uri[], Uri>(new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Uri>(new JsonCollectionOfReferencesReaderWriter<Uri[], Uri>(
                    new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<Uri[], Uri>(
                    new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<Uri>(
                        (Uri v1, Uri v2) => v1 == v2,
                        (Uri v) => ((object)v).GetHashCode(),
                        (Uri v) => v),
                    keyComparer: new ValueComparer<Uri>(
                        (Uri v1, Uri v2) => v1 == v2,
                        (Uri v) => ((object)v).GetHashCode(),
                        (Uri v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<Uri, string>(
                        (Uri v) => ((object)v).ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute)))));
            nullableUriArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            nullableUriArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray", "TestNamespace") });

            var physicalAddress = runtimeEntityType.AddProperty(
                "PhysicalAddress",
                typeof(PhysicalAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("PhysicalAddress", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<PhysicalAddress>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            physicalAddress.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(instance) == null);
            physicalAddress.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(entity) = value);
            physicalAddress.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(entity) = value);
            physicalAddress.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress>(physicalAddress, 217),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress>(physicalAddress),
                (ValueBuffer valueBuffer) => valueBuffer[217]);
            physicalAddress.SetPropertyIndexes(
                index: 217,
                originalValueIndex: 217,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            physicalAddress.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                keyComparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(20)",
                    size: 20,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<PhysicalAddress, string>(
                    (PhysicalAddress v) => ((object)v).ToString(),
                    (string v) => PhysicalAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<PhysicalAddress, string>(
                        (PhysicalAddress v) => ((object)v).ToString(),
                        (string v) => PhysicalAddress.Parse(v))));
            physicalAddress.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            physicalAddress.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress", "TestNamespace") });

            var physicalAddressArray = runtimeEntityType.AddProperty(
                "PhysicalAddressArray",
                typeof(PhysicalAddress[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("PhysicalAddressArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<PhysicalAddressArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            physicalAddressArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(instance) == null);
            physicalAddressArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(entity) = value);
            physicalAddressArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(entity) = value);
            physicalAddressArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress[]>(physicalAddressArray, 218),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress[]>(physicalAddressArray),
                (ValueBuffer valueBuffer) => valueBuffer[218]);
            physicalAddressArray.SetPropertyIndexes(
                index: 218,
                originalValueIndex: 218,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            physicalAddressArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<PhysicalAddress[], PhysicalAddress>(new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<PhysicalAddress>(new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                    new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<PhysicalAddress[], PhysicalAddress>(
                    new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v),
                    keyComparer: new ValueComparer<PhysicalAddress>(
                        (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                        (PhysicalAddress v) => ((object)v).GetHashCode(),
                        (PhysicalAddress v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(20)",
                        size: 20,
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<PhysicalAddress, string>(
                        (PhysicalAddress v) => ((object)v).ToString(),
                        (string v) => PhysicalAddress.Parse(v)),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<PhysicalAddress, string>(
                            (PhysicalAddress v) => ((object)v).ToString(),
                            (string v) => PhysicalAddress.Parse(v)))));
            physicalAddressArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            physicalAddressArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray", "TestNamespace") });

            var physicalAddressToBytesConverterProperty = runtimeEntityType.AddProperty(
                "PhysicalAddressToBytesConverterProperty",
                typeof(PhysicalAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("PhysicalAddressToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<PhysicalAddressToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new PhysicalAddressToBytesConverter());
            physicalAddressToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(instance) == null);
            physicalAddressToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(entity) = value);
            physicalAddressToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(entity) = value);
            physicalAddressToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress>(physicalAddressToBytesConverterProperty, 219),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress>(physicalAddressToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[219]);
            physicalAddressToBytesConverterProperty.SetPropertyIndexes(
                index: 219,
                originalValueIndex: 219,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            physicalAddressToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                keyComparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(8)",
                    size: 8),
                converter: new ValueConverter<PhysicalAddress, byte[]>(
                    (PhysicalAddress v) => v.GetAddressBytes(),
                    (byte[] v) => new PhysicalAddress(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<PhysicalAddress, byte[]>(
                        (PhysicalAddress v) => v.GetAddressBytes(),
                        (byte[] v) => new PhysicalAddress(v))));
            physicalAddressToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            physicalAddressToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty", "TestNamespace") });

            var physicalAddressToStringConverterProperty = runtimeEntityType.AddProperty(
                "PhysicalAddressToStringConverterProperty",
                typeof(PhysicalAddress),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("PhysicalAddressToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<PhysicalAddressToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new PhysicalAddressToStringConverter());
            physicalAddressToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(instance) == null);
            physicalAddressToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(entity) = value);
            physicalAddressToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, PhysicalAddress value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(entity) = value);
            physicalAddressToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<PhysicalAddress>(physicalAddressToStringConverterProperty, 220),
                (InternalEntityEntry entry) => entry.GetCurrentValue<PhysicalAddress>(physicalAddressToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[220]);
            physicalAddressToStringConverterProperty.SetPropertyIndexes(
                index: 220,
                originalValueIndex: 220,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            physicalAddressToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                keyComparer: new ValueComparer<PhysicalAddress>(
                    (PhysicalAddress v1, PhysicalAddress v2) => object.Equals(v1, v2),
                    (PhysicalAddress v) => ((object)v).GetHashCode(),
                    (PhysicalAddress v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(20)",
                    size: 20,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<PhysicalAddress, string>(
                    (PhysicalAddress v) => ((object)v).ToString(),
                    (string v) => PhysicalAddress.Parse(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<PhysicalAddress, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<PhysicalAddress, string>(
                        (PhysicalAddress v) => ((object)v).ToString(),
                        (string v) => PhysicalAddress.Parse(v))));
            physicalAddressToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            physicalAddressToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty", "TestNamespace") });

            var @string = runtimeEntityType.AddProperty(
                "String",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("String", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<String>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            @string.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(instance) == null);
            @string.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(entity) = value);
            @string.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(entity) = value);
            @string.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(@string, 221),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(@string),
                (ValueBuffer valueBuffer) => valueBuffer[221]);
            @string.SetPropertyIndexes(
                index: 221,
                originalValueIndex: 221,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            @string.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            @string.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            @string.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String", "TestNamespace") });

            var stringArray = runtimeEntityType.AddProperty(
                "StringArray",
                typeof(string[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            stringArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(instance) == null);
            stringArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(entity) = value);
            stringArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(entity) = value);
            stringArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string[]>(stringArray, 222),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string[]>(stringArray),
                (ValueBuffer valueBuffer) => valueBuffer[222]);
            stringArray.SetPropertyIndexes(
                index: 222,
                originalValueIndex: 222,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<string>(new JsonCollectionOfReferencesReaderWriter<string[], string>(
                    JsonStringReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[], string>(
                    JsonStringReaderWriter.Instance),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    keyComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    storeTypePostfix: StoreTypePostfix.None));
            stringArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray", "TestNamespace") });

            var stringNestedCollection = runtimeEntityType.AddProperty(
                "StringNestedCollection",
                typeof(string[][]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringNestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringNestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            stringNestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(instance) == null);
            stringNestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(entity) = value);
            stringNestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string[][] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(entity) = value);
            stringNestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string[][]>(stringNestedCollection, 223),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string[][]>(stringNestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[223]);
            stringNestedCollection.SetPropertyIndexes(
                index: 223,
                originalValueIndex: 223,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringNestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<string[][], string[]>(new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v))),
                keyComparer: new ListOfReferenceTypesComparer<string[][], string[]>(new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v))),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<string[]>(new JsonCollectionOfReferencesReaderWriter<string[][], string[]>(
                    new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[][], string[]>(
                    new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance)),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v)),
                    keyComparer: new ListOfReferenceTypesComparer<string[], string>(new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v)),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new CollectionToJsonStringConverter<string>(new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<string[], string>(
                        JsonStringReaderWriter.Instance),
                    elementMapping: SqlServerStringTypeMapping.Default.Clone(
                        comparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        keyComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            (string v1, string v2) => v1 == v2,
                            (string v) => ((object)v).GetHashCode(),
                            (string v) => v),
                        mappingInfo: new RelationalTypeMappingInfo(
                            storeTypeName: "nvarchar(max)",
                            unicode: true,
                            dbType: System.Data.DbType.String),
                        storeTypePostfix: StoreTypePostfix.None)));
            stringNestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringNestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection", "TestNamespace") });

            var stringToBoolConverterProperty = runtimeEntityType.AddProperty(
                "StringToBoolConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToBoolConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToBoolConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToBoolConverter());
            stringToBoolConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(instance) == null);
            stringToBoolConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(entity) = value);
            stringToBoolConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(entity) = value);
            stringToBoolConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToBoolConverterProperty, 224),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToBoolConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[224]);
            stringToBoolConverterProperty.SetPropertyIndexes(
                index: 224,
                originalValueIndex: 224,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToBoolConverterProperty.TypeMapping = SqlServerBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => ((object)v).GetHashCode(),
                    (bool v) => v),
                converter: new ValueConverter<string, bool>(
                    (string v) => Convert.ToBoolean(v),
                    (bool v) => Convert.ToString(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, bool>(
                    JsonBoolReaderWriter.Instance,
                    new ValueConverter<string, bool>(
                        (string v) => Convert.ToBoolean(v),
                        (bool v) => Convert.ToString(v))));
            stringToBoolConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToBoolConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty", "TestNamespace") });

            var stringToBytesConverterProperty = runtimeEntityType.AddProperty(
                "StringToBytesConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToBytesConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToBytesConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            stringToBytesConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(instance) == null);
            stringToBytesConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(entity) = value);
            stringToBytesConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(entity) = value);
            stringToBytesConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToBytesConverterProperty, 225),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToBytesConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[225]);
            stringToBytesConverterProperty.SetPropertyIndexes(
                index: 225,
                originalValueIndex: 225,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToBytesConverterProperty.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                converter: new ValueConverter<string, byte[]>(
                    (string v) => Encoding.GetEncoding(12000).GetBytes(v),
                    (byte[] v) => Encoding.GetEncoding(12000).GetString(v)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, byte[]>(
                    JsonByteArrayReaderWriter.Instance,
                    new ValueConverter<string, byte[]>(
                        (string v) => Encoding.GetEncoding(12000).GetBytes(v),
                        (byte[] v) => Encoding.GetEncoding(12000).GetString(v))));
            stringToBytesConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToBytesConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty", "TestNamespace") });

            var stringToCharConverterProperty = runtimeEntityType.AddProperty(
                "StringToCharConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToCharConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToCharConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToCharConverter());
            stringToCharConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(instance) == null);
            stringToCharConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(entity) = value);
            stringToCharConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(entity) = value);
            stringToCharConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToCharConverterProperty, 226),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToCharConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[226]);
            stringToCharConverterProperty.SetPropertyIndexes(
                index: 226,
                originalValueIndex: 226,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToCharConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(1)",
                    size: 1,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<string, string>(
                    (string v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)(v.Length < 1 ? '\0' : v[0])),
                    (string v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)(v.Length < 1 ? '\0' : v[0]))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<string, string>(
                        (string v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)(v.Length < 1 ? '\0' : v[0])),
                        (string v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)(v.Length < 1 ? '\0' : v[0])))));
            stringToCharConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToCharConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty", "TestNamespace") });

            var stringToDateOnlyConverterProperty = runtimeEntityType.AddProperty(
                "StringToDateOnlyConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToDateOnlyConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToDateOnlyConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToDateOnlyConverter());
            stringToDateOnlyConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(instance) == null);
            stringToDateOnlyConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(entity) = value);
            stringToDateOnlyConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(entity) = value);
            stringToDateOnlyConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToDateOnlyConverterProperty, 227),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToDateOnlyConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[227]);
            stringToDateOnlyConverterProperty.SetPropertyIndexes(
                index: 227,
                originalValueIndex: 227,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToDateOnlyConverterProperty.TypeMapping = SqlServerDateOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<DateOnly>(
                    (DateOnly v1, DateOnly v2) => v1.Equals(v2),
                    (DateOnly v) => ((object)v).GetHashCode(),
                    (DateOnly v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 10),
                converter: new ValueConverter<string, DateOnly>(
                    (string v) => DateOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None),
                    (DateOnly v) => v.ToString("yyyy\\-MM\\-dd")),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, DateOnly>(
                    JsonDateOnlyReaderWriter.Instance,
                    new ValueConverter<string, DateOnly>(
                        (string v) => DateOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None),
                        (DateOnly v) => v.ToString("yyyy\\-MM\\-dd"))));
            stringToDateOnlyConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToDateOnlyConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty", "TestNamespace") });

            var stringToDateTimeConverterProperty = runtimeEntityType.AddProperty(
                "StringToDateTimeConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToDateTimeConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToDateTimeConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToDateTimeConverter());
            stringToDateTimeConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(instance) == null);
            stringToDateTimeConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(entity) = value);
            stringToDateTimeConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(entity) = value);
            stringToDateTimeConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToDateTimeConverterProperty, 228),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToDateTimeConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[228]);
            stringToDateTimeConverterProperty.SetPropertyIndexes(
                index: 228,
                originalValueIndex: 228,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToDateTimeConverterProperty.TypeMapping = SqlServerDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    (DateTime v1, DateTime v2) => v1.Equals(v2),
                    (DateTime v) => ((object)v).GetHashCode(),
                    (DateTime v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 48),
                converter: new ValueConverter<string, DateTime>(
                    (string v) => DateTime.Parse(v, CultureInfo.InvariantCulture),
                    (DateTime v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFF")),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, DateTime>(
                    JsonDateTimeReaderWriter.Instance,
                    new ValueConverter<string, DateTime>(
                        (string v) => DateTime.Parse(v, CultureInfo.InvariantCulture),
                        (DateTime v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFF"))));
            stringToDateTimeConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToDateTimeConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty", "TestNamespace") });

            var stringToDateTimeOffsetConverterProperty = runtimeEntityType.AddProperty(
                "StringToDateTimeOffsetConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToDateTimeOffsetConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToDateTimeOffsetConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToDateTimeOffsetConverter());
            stringToDateTimeOffsetConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(instance) == null);
            stringToDateTimeOffsetConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(entity) = value);
            stringToDateTimeOffsetConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(entity) = value);
            stringToDateTimeOffsetConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToDateTimeOffsetConverterProperty, 229),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToDateTimeOffsetConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[229]);
            stringToDateTimeOffsetConverterProperty.SetPropertyIndexes(
                index: 229,
                originalValueIndex: 229,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToDateTimeOffsetConverterProperty.TypeMapping = SqlServerDateTimeOffsetTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => ((object)v).GetHashCode(),
                    (DateTimeOffset v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 48),
                converter: new ValueConverter<string, DateTimeOffset>(
                    (string v) => DateTimeOffset.Parse(v, CultureInfo.InvariantCulture),
                    (DateTimeOffset v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFFzzz")),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, DateTimeOffset>(
                    JsonDateTimeOffsetReaderWriter.Instance,
                    new ValueConverter<string, DateTimeOffset>(
                        (string v) => DateTimeOffset.Parse(v, CultureInfo.InvariantCulture),
                        (DateTimeOffset v) => v.ToString("yyyy\\-MM\\-dd HH\\:mm\\:ss.FFFFFFFzzz"))));
            stringToDateTimeOffsetConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToDateTimeOffsetConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty", "TestNamespace") });

            var stringToDecimalNumberConverterProperty = runtimeEntityType.AddProperty(
                "StringToDecimalNumberConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToDecimalNumberConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToDecimalNumberConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToNumberConverter<decimal>());
            stringToDecimalNumberConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(instance) == null);
            stringToDecimalNumberConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(entity) = value);
            stringToDecimalNumberConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(entity) = value);
            stringToDecimalNumberConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToDecimalNumberConverterProperty, 230),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToDecimalNumberConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[230]);
            stringToDecimalNumberConverterProperty.SetPropertyIndexes(
                index: 230,
                originalValueIndex: 230,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToDecimalNumberConverterProperty.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 64),
                converter: new ValueConverter<string, decimal>(
                    (string v) => decimal.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                    (decimal v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<string, decimal>(
                        (string v) => decimal.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                        (decimal v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v))));
            stringToDecimalNumberConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToDecimalNumberConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty", "TestNamespace") });

            var stringToDoubleNumberConverterProperty = runtimeEntityType.AddProperty(
                "StringToDoubleNumberConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToDoubleNumberConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToDoubleNumberConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToNumberConverter<double>());
            stringToDoubleNumberConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(instance) == null);
            stringToDoubleNumberConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(entity) = value);
            stringToDoubleNumberConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(entity) = value);
            stringToDoubleNumberConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToDoubleNumberConverterProperty, 231),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToDoubleNumberConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[231]);
            stringToDoubleNumberConverterProperty.SetPropertyIndexes(
                index: 231,
                originalValueIndex: 231,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToDoubleNumberConverterProperty.TypeMapping = SqlServerDoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => ((object)v).GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 64),
                converter: new ValueConverter<string, double>(
                    (string v) => double.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                    (double v) => string.Format(CultureInfo.InvariantCulture, "{0:R}", (object)v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, double>(
                    JsonDoubleReaderWriter.Instance,
                    new ValueConverter<string, double>(
                        (string v) => double.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                        (double v) => string.Format(CultureInfo.InvariantCulture, "{0:R}", (object)v))));
            stringToDoubleNumberConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToDoubleNumberConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty", "TestNamespace") });

            var stringToEnumConverterProperty = runtimeEntityType.AddProperty(
                "StringToEnumConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToEnumConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToEnumConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToEnumConverter<CompiledModelTestBase.EnumU32>());
            stringToEnumConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(instance) == null);
            stringToEnumConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(entity) = value);
            stringToEnumConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(entity) = value);
            stringToEnumConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToEnumConverterProperty, 232),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToEnumConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[232]);
            stringToEnumConverterProperty.SetPropertyIndexes(
                index: 232,
                originalValueIndex: 232,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToEnumConverterProperty.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<string, long>(
                    (string v) => (long)StringEnumConverter<string, CompiledModelTestBase.EnumU32, CompiledModelTestBase.EnumU32>.ConvertToEnum(v),
                    (long value) => ((object)(CompiledModelTestBase.EnumU32)value).ToString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<string, long>(
                        (string v) => (long)StringEnumConverter<string, CompiledModelTestBase.EnumU32, CompiledModelTestBase.EnumU32>.ConvertToEnum(v),
                        (long value) => ((object)(CompiledModelTestBase.EnumU32)value).ToString())));
            stringToEnumConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToEnumConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty", "TestNamespace") });

            var stringToGuidConverterProperty = runtimeEntityType.AddProperty(
                "StringToGuidConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToGuidConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToGuidConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            stringToGuidConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(instance) == null);
            stringToGuidConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(entity) = value);
            stringToGuidConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(entity) = value);
            stringToGuidConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToGuidConverterProperty, 233),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToGuidConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[233]);
            stringToGuidConverterProperty.SetPropertyIndexes(
                index: 233,
                originalValueIndex: 233,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToGuidConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                storeTypePostfix: StoreTypePostfix.None);
            stringToGuidConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToGuidConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty", "TestNamespace") });

            var stringToIntNumberConverterProperty = runtimeEntityType.AddProperty(
                "StringToIntNumberConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToIntNumberConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToIntNumberConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToNumberConverter<int>());
            stringToIntNumberConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(instance) == null);
            stringToIntNumberConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(entity) = value);
            stringToIntNumberConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(entity) = value);
            stringToIntNumberConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToIntNumberConverterProperty, 234),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToIntNumberConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[234]);
            stringToIntNumberConverterProperty.SetPropertyIndexes(
                index: 234,
                originalValueIndex: 234,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToIntNumberConverterProperty.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 64),
                converter: new ValueConverter<string, int>(
                    (string v) => int.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                    (int v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<string, int>(
                        (string v) => int.Parse(v, NumberStyles.Any, CultureInfo.InvariantCulture),
                        (int v) => string.Format(CultureInfo.InvariantCulture, "{0}", (object)v))));
            stringToIntNumberConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToIntNumberConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty", "TestNamespace") });

            var stringToTimeOnlyConverterProperty = runtimeEntityType.AddProperty(
                "StringToTimeOnlyConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToTimeOnlyConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToTimeOnlyConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToTimeOnlyConverter());
            stringToTimeOnlyConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(instance) == null);
            stringToTimeOnlyConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(entity) = value);
            stringToTimeOnlyConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(entity) = value);
            stringToTimeOnlyConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToTimeOnlyConverterProperty, 235),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToTimeOnlyConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[235]);
            stringToTimeOnlyConverterProperty.SetPropertyIndexes(
                index: 235,
                originalValueIndex: 235,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToTimeOnlyConverterProperty.TypeMapping = SqlServerTimeOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 48),
                converter: new ValueConverter<string, TimeOnly>(
                    (string v) => TimeOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None),
                    (TimeOnly v) => v.Ticks % 10000000L == 0L ? string.Format(CultureInfo.InvariantCulture, "{0:HH\\:mm\\:ss}", (object)v) : v.ToString("o")),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, TimeOnly>(
                    JsonTimeOnlyReaderWriter.Instance,
                    new ValueConverter<string, TimeOnly>(
                        (string v) => TimeOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None),
                        (TimeOnly v) => v.Ticks % 10000000L == 0L ? string.Format(CultureInfo.InvariantCulture, "{0:HH\\:mm\\:ss}", (object)v) : v.ToString("o"))));
            stringToTimeOnlyConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToTimeOnlyConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty", "TestNamespace") });

            var stringToTimeSpanConverterProperty = runtimeEntityType.AddProperty(
                "StringToTimeSpanConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToTimeSpanConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToTimeSpanConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToTimeSpanConverter());
            stringToTimeSpanConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(instance) == null);
            stringToTimeSpanConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(entity) = value);
            stringToTimeSpanConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(entity) = value);
            stringToTimeSpanConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToTimeSpanConverterProperty, 236),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToTimeSpanConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[236]);
            stringToTimeSpanConverterProperty.SetPropertyIndexes(
                index: 236,
                originalValueIndex: 236,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToTimeSpanConverterProperty.TypeMapping = SqlServerTimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    size: 48),
                converter: new ValueConverter<string, TimeSpan>(
                    (string v) => TimeSpan.Parse(v, CultureInfo.InvariantCulture),
                    (TimeSpan v) => v.ToString("c")),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, TimeSpan>(
                    JsonTimeSpanReaderWriter.Instance,
                    new ValueConverter<string, TimeSpan>(
                        (string v) => TimeSpan.Parse(v, CultureInfo.InvariantCulture),
                        (TimeSpan v) => v.ToString("c"))));
            stringToTimeSpanConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToTimeSpanConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty", "TestNamespace") });

            var stringToUriConverterProperty = runtimeEntityType.AddProperty(
                "StringToUriConverterProperty",
                typeof(string),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("StringToUriConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<StringToUriConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new StringToUriConverter());
            stringToUriConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(instance) == null);
            stringToUriConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(entity) = value);
            stringToUriConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, string value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(entity) = value);
            stringToUriConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(stringToUriConverterProperty, 237),
                (InternalEntityEntry entry) => entry.GetCurrentValue<string>(stringToUriConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[237]);
            stringToUriConverterProperty.SetPropertyIndexes(
                index: 237,
                originalValueIndex: 237,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            stringToUriConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                keyComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<string, string>(
                    (string v) => ((object)new Uri(v, UriKind.RelativeOrAbsolute)).ToString(),
                    (string v) => ((object)new Uri(v, UriKind.RelativeOrAbsolute)).ToString()),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<string, string>(
                        (string v) => ((object)new Uri(v, UriKind.RelativeOrAbsolute)).ToString(),
                        (string v) => ((object)new Uri(v, UriKind.RelativeOrAbsolute)).ToString())));
            stringToUriConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            stringToUriConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty", "TestNamespace") });

            var timeOnly = runtimeEntityType.AddProperty(
                "TimeOnly",
                typeof(TimeOnly),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeOnly", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeOnly>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeOnly(0, 0, 0));
            timeOnly.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(entity) == default(TimeOnly),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(instance) == default(TimeOnly));
            timeOnly.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(entity) = value);
            timeOnly.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(entity) = value);
            timeOnly.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeOnly>(timeOnly, 238),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeOnly>(timeOnly),
                (ValueBuffer valueBuffer) => valueBuffer[238]);
            timeOnly.SetPropertyIndexes(
                index: 238,
                originalValueIndex: 238,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeOnly.TypeMapping = SqlServerTimeOnlyTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                keyComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                providerValueComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v));
            timeOnly.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeOnly.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly", "TestNamespace") });

            var timeOnlyArray = runtimeEntityType.AddProperty(
                "TimeOnlyArray",
                typeof(TimeOnly[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeOnlyArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeOnlyArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            timeOnlyArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(instance) == null);
            timeOnlyArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(entity) = value);
            timeOnlyArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(entity) = value);
            timeOnlyArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeOnly[]>(timeOnlyArray, 239),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeOnly[]>(timeOnlyArray),
                (ValueBuffer valueBuffer) => valueBuffer[239]);
            timeOnlyArray.SetPropertyIndexes(
                index: 239,
                originalValueIndex: 239,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeOnlyArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<TimeOnly[], TimeOnly>(new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v)),
                keyComparer: new ListOfValueTypesComparer<TimeOnly[], TimeOnly>(new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<TimeOnly>(new JsonCollectionOfStructsReaderWriter<TimeOnly[], TimeOnly>(
                    JsonTimeOnlyReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<TimeOnly[], TimeOnly>(
                    JsonTimeOnlyReaderWriter.Instance),
                elementMapping: SqlServerTimeOnlyTypeMapping.Default.Clone(
                    comparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v),
                    keyComparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v),
                    providerValueComparer: new ValueComparer<TimeOnly>(
                        (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                        (TimeOnly v) => ((object)v).GetHashCode(),
                        (TimeOnly v) => v)));
            timeOnlyArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeOnlyArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray", "TestNamespace") });

            var timeOnlyToStringConverterProperty = runtimeEntityType.AddProperty(
                "TimeOnlyToStringConverterProperty",
                typeof(TimeOnly),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeOnlyToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeOnlyToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new TimeOnlyToStringConverter());
            timeOnlyToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(entity) == default(TimeOnly),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(instance) == default(TimeOnly));
            timeOnlyToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(entity) = value);
            timeOnlyToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(entity) = value);
            timeOnlyToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeOnly>(timeOnlyToStringConverterProperty, 240),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeOnly>(timeOnlyToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[240]);
            timeOnlyToStringConverterProperty.SetPropertyIndexes(
                index: 240,
                originalValueIndex: 240,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeOnlyToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                keyComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(48)",
                    size: 48,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<TimeOnly, string>(
                    (TimeOnly v) => v.Ticks % 10000000L == 0L ? string.Format(CultureInfo.InvariantCulture, "{0:HH\\:mm\\:ss}", (object)v) : v.ToString("o"),
                    (string v) => TimeOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<TimeOnly, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<TimeOnly, string>(
                        (TimeOnly v) => v.Ticks % 10000000L == 0L ? string.Format(CultureInfo.InvariantCulture, "{0:HH\\:mm\\:ss}", (object)v) : v.ToString("o"),
                        (string v) => TimeOnly.Parse(v, CultureInfo.InvariantCulture, DateTimeStyles.None))));
            timeOnlyToStringConverterProperty.SetSentinelFromProviderValue("00:00:00");
            timeOnlyToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeOnlyToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty", "TestNamespace") });

            var timeOnlyToTicksConverterProperty = runtimeEntityType.AddProperty(
                "TimeOnlyToTicksConverterProperty",
                typeof(TimeOnly),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeOnlyToTicksConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeOnlyToTicksConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new TimeOnlyToTicksConverter());
            timeOnlyToTicksConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(entity) == default(TimeOnly),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(instance) == default(TimeOnly));
            timeOnlyToTicksConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(entity) = value);
            timeOnlyToTicksConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeOnly value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(entity) = value);
            timeOnlyToTicksConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeOnly>(timeOnlyToTicksConverterProperty, 241),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeOnly>(timeOnlyToTicksConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[241]);
            timeOnlyToTicksConverterProperty.SetPropertyIndexes(
                index: 241,
                originalValueIndex: 241,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeOnlyToTicksConverterProperty.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                keyComparer: new ValueComparer<TimeOnly>(
                    (TimeOnly v1, TimeOnly v2) => v1.Equals(v2),
                    (TimeOnly v) => ((object)v).GetHashCode(),
                    (TimeOnly v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<TimeOnly, long>(
                    (TimeOnly v) => v.Ticks,
                    (long v) => new TimeOnly(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<TimeOnly, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<TimeOnly, long>(
                        (TimeOnly v) => v.Ticks,
                        (long v) => new TimeOnly(v))));
            timeOnlyToTicksConverterProperty.SetSentinelFromProviderValue(0L);
            timeOnlyToTicksConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeOnlyToTicksConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty", "TestNamespace") });

            var timeSpan = runtimeEntityType.AddProperty(
                "TimeSpan",
                typeof(TimeSpan),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeSpan", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeSpan>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeSpan(0, 0, 0, 0, 0));
            timeSpan.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(entity) == default(TimeSpan),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(instance) == default(TimeSpan));
            timeSpan.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(entity) = value);
            timeSpan.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(entity) = value);
            timeSpan.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan>(timeSpan, 242),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan>(timeSpan),
                (ValueBuffer valueBuffer) => valueBuffer[242]);
            timeSpan.SetPropertyIndexes(
                index: 242,
                originalValueIndex: 242,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeSpan.TypeMapping = SqlServerTimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v));
            timeSpan.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeSpan.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan", "TestNamespace") });

            var timeSpanArray = runtimeEntityType.AddProperty(
                "TimeSpanArray",
                typeof(TimeSpan[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeSpanArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeSpanArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            timeSpanArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(instance) == null);
            timeSpanArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(entity) = value);
            timeSpanArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(entity) = value);
            timeSpanArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan[]>(timeSpanArray, 243),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan[]>(timeSpanArray),
                (ValueBuffer valueBuffer) => valueBuffer[243]);
            timeSpanArray.SetPropertyIndexes(
                index: 243,
                originalValueIndex: 243,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeSpanArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<TimeSpan[], TimeSpan>(new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v)),
                keyComparer: new ListOfValueTypesComparer<TimeSpan[], TimeSpan>(new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<TimeSpan>(new JsonCollectionOfStructsReaderWriter<TimeSpan[], TimeSpan>(
                    JsonTimeSpanReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<TimeSpan[], TimeSpan>(
                    JsonTimeSpanReaderWriter.Instance),
                elementMapping: SqlServerTimeSpanTypeMapping.Default.Clone(
                    comparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v),
                    keyComparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v),
                    providerValueComparer: new ValueComparer<TimeSpan>(
                        (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                        (TimeSpan v) => ((object)v).GetHashCode(),
                        (TimeSpan v) => v)));
            timeSpanArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeSpanArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray", "TestNamespace") });

            var timeSpanToStringConverterProperty = runtimeEntityType.AddProperty(
                "TimeSpanToStringConverterProperty",
                typeof(TimeSpan),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeSpanToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeSpanToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new TimeSpanToStringConverter());
            timeSpanToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(entity) == default(TimeSpan),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(instance) == default(TimeSpan));
            timeSpanToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(entity) = value);
            timeSpanToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(entity) = value);
            timeSpanToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan>(timeSpanToStringConverterProperty, 244),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan>(timeSpanToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[244]);
            timeSpanToStringConverterProperty.SetPropertyIndexes(
                index: 244,
                originalValueIndex: 244,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeSpanToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(48)",
                    size: 48,
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<TimeSpan, string>(
                    (TimeSpan v) => v.ToString("c"),
                    (string v) => TimeSpan.Parse(v, CultureInfo.InvariantCulture)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<TimeSpan, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<TimeSpan, string>(
                        (TimeSpan v) => v.ToString("c"),
                        (string v) => TimeSpan.Parse(v, CultureInfo.InvariantCulture))));
            timeSpanToStringConverterProperty.SetSentinelFromProviderValue("00:00:00");
            timeSpanToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeSpanToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty", "TestNamespace") });

            var timeSpanToTicksConverterProperty = runtimeEntityType.AddProperty(
                "TimeSpanToTicksConverterProperty",
                typeof(TimeSpan),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("TimeSpanToTicksConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<TimeSpanToTicksConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new TimeSpanToTicksConverter());
            timeSpanToTicksConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(entity) == default(TimeSpan),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(instance) == default(TimeSpan));
            timeSpanToTicksConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(entity) = value);
            timeSpanToTicksConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, TimeSpan value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(entity) = value);
            timeSpanToTicksConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<TimeSpan>(timeSpanToTicksConverterProperty, 245),
                (InternalEntityEntry entry) => entry.GetCurrentValue<TimeSpan>(timeSpanToTicksConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[245]);
            timeSpanToTicksConverterProperty.SetPropertyIndexes(
                index: 245,
                originalValueIndex: 245,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            timeSpanToTicksConverterProperty.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => ((object)v).GetHashCode(),
                    (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<TimeSpan, long>(
                    (TimeSpan v) => v.Ticks,
                    (long v) => new TimeSpan(v)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<TimeSpan, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<TimeSpan, long>(
                        (TimeSpan v) => v.Ticks,
                        (long v) => new TimeSpan(v))));
            timeSpanToTicksConverterProperty.SetSentinelFromProviderValue(0L);
            timeSpanToTicksConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            timeSpanToTicksConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty", "TestNamespace") });

            var uInt16 = runtimeEntityType.AddProperty(
                "UInt16",
                typeof(ushort),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt16", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt16>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt16.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(instance) == 0);
            uInt16.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, ushort value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(entity) = value);
            uInt16.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, ushort value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(entity) = value);
            uInt16.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<ushort>(uInt16, 246),
                (InternalEntityEntry entry) => entry.GetCurrentValue<ushort>(uInt16),
                (ValueBuffer valueBuffer) => valueBuffer[246]);
            uInt16.SetPropertyIndexes(
                index: 246,
                originalValueIndex: 246,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt16.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                keyComparer: new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                converter: new ValueConverter<ushort, int>(
                    (ushort v) => (int)v,
                    (int v) => (ushort)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ushort, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<ushort, int>(
                        (ushort v) => (int)v,
                        (int v) => (ushort)v)));
            uInt16.SetSentinelFromProviderValue(0);
            uInt16.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt16.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16", "TestNamespace") });

            var uInt16Array = runtimeEntityType.AddProperty(
                "UInt16Array",
                typeof(ushort[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt16Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt16Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt16Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(instance) == null);
            uInt16Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, ushort[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(entity) = value);
            uInt16Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, ushort[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(entity) = value);
            uInt16Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<ushort[]>(uInt16Array, 247),
                (InternalEntityEntry entry) => entry.GetCurrentValue<ushort[]>(uInt16Array),
                (ValueBuffer valueBuffer) => valueBuffer[247]);
            uInt16Array.SetPropertyIndexes(
                index: 247,
                originalValueIndex: 247,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt16Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<ushort[], ushort>(new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v)),
                keyComparer: new ListOfValueTypesComparer<ushort[], ushort>(new ValueComparer<ushort>(
                    (ushort v1, ushort v2) => v1 == v2,
                    (ushort v) => (int)v,
                    (ushort v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<ushort>(new JsonCollectionOfStructsReaderWriter<ushort[], ushort>(
                    new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<ushort[], ushort>(
                    new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v))),
                elementMapping: IntTypeMapping.Default.Clone(
                    comparer: new ValueComparer<ushort>(
                        (ushort v1, ushort v2) => v1 == v2,
                        (ushort v) => (int)v,
                        (ushort v) => v),
                    keyComparer: new ValueComparer<ushort>(
                        (ushort v1, ushort v2) => v1 == v2,
                        (ushort v) => (int)v,
                        (ushort v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        (int v1, int v2) => v1 == v2,
                        (int v) => v,
                        (int v) => v),
                    converter: new ValueConverter<ushort, int>(
                        (ushort v) => (int)v,
                        (int v) => (ushort)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ushort, int>(
                        JsonInt32ReaderWriter.Instance,
                        new ValueConverter<ushort, int>(
                            (ushort v) => (int)v,
                            (int v) => (ushort)v))));
            uInt16Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt16Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array", "TestNamespace") });

            var uInt32 = runtimeEntityType.AddProperty(
                "UInt32",
                typeof(uint),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt32", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt32>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt32.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(entity) == 0U,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(instance) == 0U);
            uInt32.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, uint value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(entity) = value);
            uInt32.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, uint value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(entity) = value);
            uInt32.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(uInt32, 248),
                (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(uInt32),
                (ValueBuffer valueBuffer) => valueBuffer[248]);
            uInt32.SetPropertyIndexes(
                index: 248,
                originalValueIndex: 248,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt32.TypeMapping = SqlServerLongTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => ((object)v).GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<uint, long>(
                    (uint v) => (long)v,
                    (long v) => (uint)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<uint, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<uint, long>(
                        (uint v) => (long)v,
                        (long v) => (uint)v)));
            uInt32.SetSentinelFromProviderValue(0L);
            uInt32.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt32.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32", "TestNamespace") });

            var uInt32Array = runtimeEntityType.AddProperty(
                "UInt32Array",
                typeof(uint[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt32Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt32Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt32Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(instance) == null);
            uInt32Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, uint[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(entity) = value);
            uInt32Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, uint[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(entity) = value);
            uInt32Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<uint[]>(uInt32Array, 249),
                (InternalEntityEntry entry) => entry.GetCurrentValue<uint[]>(uInt32Array),
                (ValueBuffer valueBuffer) => valueBuffer[249]);
            uInt32Array.SetPropertyIndexes(
                index: 249,
                originalValueIndex: 249,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt32Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<uint[], uint>(new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v)),
                keyComparer: new ListOfValueTypesComparer<uint[], uint>(new ValueComparer<uint>(
                    (uint v1, uint v2) => v1 == v2,
                    (uint v) => (int)v,
                    (uint v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<uint>(new JsonCollectionOfStructsReaderWriter<uint[], uint>(
                    new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<uint[], uint>(
                    new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v))),
                elementMapping: SqlServerLongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<uint>(
                        (uint v1, uint v2) => v1 == v2,
                        (uint v) => (int)v,
                        (uint v) => v),
                    keyComparer: new ValueComparer<uint>(
                        (uint v1, uint v2) => v1 == v2,
                        (uint v) => (int)v,
                        (uint v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => ((object)v).GetHashCode(),
                        (long v) => v),
                    converter: new ValueConverter<uint, long>(
                        (uint v) => (long)v,
                        (long v) => (uint)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<uint, long>(
                        JsonInt64ReaderWriter.Instance,
                        new ValueConverter<uint, long>(
                            (uint v) => (long)v,
                            (long v) => (uint)v))));
            uInt32Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt32Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array", "TestNamespace") });

            var uInt64 = runtimeEntityType.AddProperty(
                "UInt64",
                typeof(ulong),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt64", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt64>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt64.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(entity) == 0UL,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(instance) == 0UL);
            uInt64.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, ulong value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(entity) = value);
            uInt64.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, ulong value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(entity) = value);
            uInt64.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong>(uInt64, 250),
                (InternalEntityEntry entry) => entry.GetCurrentValue<ulong>(uInt64),
                (ValueBuffer valueBuffer) => valueBuffer[250]);
            uInt64.SetPropertyIndexes(
                index: 250,
                originalValueIndex: 250,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt64.TypeMapping = SqlServerDecimalTypeMapping.Default.Clone(
                comparer: new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v),
                keyComparer: new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v),
                providerValueComparer: new ValueComparer<decimal>(
                    (decimal v1, decimal v2) => v1 == v2,
                    (decimal v) => ((object)v).GetHashCode(),
                    (decimal v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "decimal(20,0)",
                    precision: 20,
                    scale: 0),
                converter: new ValueConverter<ulong, decimal>(
                    (ulong v) => (decimal)v,
                    (decimal v) => (ulong)v),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                    JsonDecimalReaderWriter.Instance,
                    new ValueConverter<ulong, decimal>(
                        (ulong v) => (decimal)v,
                        (decimal v) => (ulong)v)));
            uInt64.SetSentinelFromProviderValue(0m);
            uInt64.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt64.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64", "TestNamespace") });

            var uInt64Array = runtimeEntityType.AddProperty(
                "UInt64Array",
                typeof(ulong[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt64Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt64Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt64Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(instance) == null);
            uInt64Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, ulong[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(entity) = value);
            uInt64Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, ulong[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(entity) = value);
            uInt64Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<ulong[]>(uInt64Array, 251),
                (InternalEntityEntry entry) => entry.GetCurrentValue<ulong[]>(uInt64Array),
                (ValueBuffer valueBuffer) => valueBuffer[251]);
            uInt64Array.SetPropertyIndexes(
                index: 251,
                originalValueIndex: 251,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt64Array.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<ulong[], ulong>(new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v)),
                keyComparer: new ListOfValueTypesComparer<ulong[], ulong>(new ValueComparer<ulong>(
                    (ulong v1, ulong v2) => v1 == v2,
                    (ulong v) => ((object)v).GetHashCode(),
                    (ulong v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<ulong>(new JsonCollectionOfStructsReaderWriter<ulong[], ulong>(
                    new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v)))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<ulong[], ulong>(
                    new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v))),
                elementMapping: SqlServerDecimalTypeMapping.Default.Clone(
                    comparer: new ValueComparer<ulong>(
                        (ulong v1, ulong v2) => v1 == v2,
                        (ulong v) => ((object)v).GetHashCode(),
                        (ulong v) => v),
                    keyComparer: new ValueComparer<ulong>(
                        (ulong v1, ulong v2) => v1 == v2,
                        (ulong v) => ((object)v).GetHashCode(),
                        (ulong v) => v),
                    providerValueComparer: new ValueComparer<decimal>(
                        (decimal v1, decimal v2) => v1 == v2,
                        (decimal v) => ((object)v).GetHashCode(),
                        (decimal v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "decimal(20,0)",
                        precision: 20,
                        scale: 0),
                    converter: new ValueConverter<ulong, decimal>(
                        (ulong v) => (decimal)v,
                        (decimal v) => (ulong)v),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<ulong, decimal>(
                        JsonDecimalReaderWriter.Instance,
                        new ValueConverter<ulong, decimal>(
                            (ulong v) => (decimal)v,
                            (decimal v) => (ulong)v))));
            uInt64Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt64Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array", "TestNamespace") });

            var uInt8 = runtimeEntityType.AddProperty(
                "UInt8",
                typeof(byte),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt8", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt8>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: (byte)0);
            uInt8.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(entity) == 0,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(instance) == 0);
            uInt8.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(entity) = value);
            uInt8.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(entity) = value);
            uInt8.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte>(uInt8, 252),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte>(uInt8),
                (ValueBuffer valueBuffer) => valueBuffer[252]);
            uInt8.SetPropertyIndexes(
                index: 252,
                originalValueIndex: 252,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt8.TypeMapping = SqlServerByteTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                keyComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v),
                providerValueComparer: new ValueComparer<byte>(
                    (byte v1, byte v2) => v1 == v2,
                    (byte v) => (int)v,
                    (byte v) => v));
            uInt8.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt8.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8", "TestNamespace") });

            var uInt8Array = runtimeEntityType.AddProperty(
                "UInt8Array",
                typeof(byte[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt8Array", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt8Array>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt8Array.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(instance) == null);
            uInt8Array.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(entity) = value);
            uInt8Array.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, byte[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(entity) = value);
            uInt8Array.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<byte[]>(uInt8Array, 253),
                (InternalEntityEntry entry) => entry.GetCurrentValue<byte[]>(uInt8Array),
                (ValueBuffer valueBuffer) => valueBuffer[253]);
            uInt8Array.SetPropertyIndexes(
                index: 253,
                originalValueIndex: 253,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt8Array.TypeMapping = SqlServerByteArrayTypeMapping.Default.Clone(
                comparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v),
                keyComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (byte[] source) => source.ToArray()),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "varbinary(max)"),
                storeTypePostfix: StoreTypePostfix.None);
            uInt8Array.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt8Array.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array", "TestNamespace") });

            var uInt8NestedCollection = runtimeEntityType.AddProperty(
                "UInt8NestedCollection",
                typeof(List<byte[]>),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UInt8NestedCollection", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UInt8NestedCollection>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uInt8NestedCollection.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(instance) == null);
            uInt8NestedCollection.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, List<byte[]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(entity) = value);
            uInt8NestedCollection.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, List<byte[]> value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(entity) = value);
            uInt8NestedCollection.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<List<byte[]>>(uInt8NestedCollection, 254),
                (InternalEntityEntry entry) => entry.GetCurrentValue<List<byte[]>>(uInt8NestedCollection),
                (ValueBuffer valueBuffer) => valueBuffer[254]);
            uInt8NestedCollection.SetPropertyIndexes(
                index: 254,
                originalValueIndex: 254,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uInt8NestedCollection.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<byte[]>, byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<List<byte[]>, byte[]>(new ValueComparer<byte[]>(
                    (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (byte[] v) => ((object)v).GetHashCode(),
                    (byte[] v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<byte[]>(new JsonCollectionOfReferencesReaderWriter<List<byte[]>, byte[]>(
                    JsonByteArrayReaderWriter.Instance)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<byte[]>, byte[]>(
                    JsonByteArrayReaderWriter.Instance),
                elementMapping: SqlServerByteArrayTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => ((object)v).GetHashCode(),
                        (byte[] v) => v),
                    keyComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    providerValueComparer: new ValueComparer<byte[]>(
                        (byte[] v1, byte[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                        (byte[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                        (byte[] source) => source.ToArray()),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "varbinary(max)"),
                    storeTypePostfix: StoreTypePostfix.None));
            uInt8NestedCollection.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uInt8NestedCollection.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection", "TestNamespace") });

            var uri = runtimeEntityType.AddProperty(
                "Uri",
                typeof(Uri),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("Uri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<Uri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uri.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(instance) == null);
            uri.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(entity) = value);
            uri.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(entity) = value);
            uri.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(uri, 255),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(uri),
                (ValueBuffer valueBuffer) => valueBuffer[255]);
            uri.SetPropertyIndexes(
                index: 255,
                originalValueIndex: 255,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uri.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => ((object)v).ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => ((object)v).ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
            uri.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uri.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri", "TestNamespace") });

            var uriArray = runtimeEntityType.AddProperty(
                "UriArray",
                typeof(Uri[]),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UriArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UriArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            uriArray.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(instance) == null);
            uriArray.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(entity) = value);
            uriArray.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri[] value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(entity) = value);
            uriArray.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri[]>(uriArray, 256),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Uri[]>(uriArray),
                (ValueBuffer valueBuffer) => valueBuffer[256]);
            uriArray.SetPropertyIndexes(
                index: 256,
                originalValueIndex: 256,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uriArray.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<Uri[], Uri>(new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v)),
                keyComparer: new ListOfReferenceTypesComparer<Uri[], Uri>(new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new CollectionToJsonStringConverter<Uri>(new JsonCollectionOfReferencesReaderWriter<Uri[], Uri>(
                    new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute))))),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<Uri[], Uri>(
                    new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute)))),
                elementMapping: SqlServerStringTypeMapping.Default.Clone(
                    comparer: new ValueComparer<Uri>(
                        (Uri v1, Uri v2) => v1 == v2,
                        (Uri v) => ((object)v).GetHashCode(),
                        (Uri v) => v),
                    keyComparer: new ValueComparer<Uri>(
                        (Uri v1, Uri v2) => v1 == v2,
                        (Uri v) => ((object)v).GetHashCode(),
                        (Uri v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        (string v1, string v2) => v1 == v2,
                        (string v) => ((object)v).GetHashCode(),
                        (string v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "nvarchar(max)",
                        unicode: true,
                        dbType: System.Data.DbType.String),
                    converter: new ValueConverter<Uri, string>(
                        (Uri v) => ((object)v).ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                    storeTypePostfix: StoreTypePostfix.None,
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                        JsonStringReaderWriter.Instance,
                        new ValueConverter<Uri, string>(
                            (Uri v) => ((object)v).ToString(),
                            (string v) => new Uri(v, UriKind.RelativeOrAbsolute)))));
            uriArray.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uriArray.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray", "TestNamespace") });

            var uriToStringConverterProperty = runtimeEntityType.AddProperty(
                "UriToStringConverterProperty",
                typeof(Uri),
                propertyInfo: typeof(CompiledModelTestBase.ManyTypes).GetProperty("UriToStringConverterProperty", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.ManyTypes).GetField("<UriToStringConverterProperty>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new UriToStringConverter());
            uriToStringConverterProperty.SetGetter(
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(entity),
                (CompiledModelTestBase.ManyTypes entity) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(entity) == null,
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(instance),
                (CompiledModelTestBase.ManyTypes instance) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(instance) == null);
            uriToStringConverterProperty.SetSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(entity) = value);
            uriToStringConverterProperty.SetMaterializationSetter(
                (CompiledModelTestBase.ManyTypes entity, Uri value) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(entity) = value);
            uriToStringConverterProperty.SetAccessors(
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty((CompiledModelTestBase.ManyTypes)entry.Entity),
                (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(uriToStringConverterProperty, 257),
                (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(uriToStringConverterProperty),
                (ValueBuffer valueBuffer) => valueBuffer[257]);
            uriToStringConverterProperty.SetPropertyIndexes(
                index: 257,
                originalValueIndex: 257,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            uriToStringConverterProperty.TypeMapping = SqlServerStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => ((object)v).GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => ((object)v).GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "nvarchar(max)",
                    unicode: true,
                    dbType: System.Data.DbType.String),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => ((object)v).ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                storeTypePostfix: StoreTypePostfix.None,
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => ((object)v).ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));
            uriToStringConverterProperty.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);
            uriToStringConverterProperty.AddRuntimeAnnotation("UnsafeAccessors", new[] { ("ManyTypesEntityType.UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty", "TestNamespace") });

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var @bool = runtimeEntityType.FindProperty("Bool")!;
            var boolArray = runtimeEntityType.FindProperty("BoolArray")!;
            var boolNestedCollection = runtimeEntityType.FindProperty("BoolNestedCollection")!;
            var boolToStringConverterProperty = runtimeEntityType.FindProperty("BoolToStringConverterProperty")!;
            var boolToTwoValuesConverterProperty = runtimeEntityType.FindProperty("BoolToTwoValuesConverterProperty")!;
            var boolToZeroOneConverterProperty = runtimeEntityType.FindProperty("BoolToZeroOneConverterProperty")!;
            var bytes = runtimeEntityType.FindProperty("Bytes")!;
            var bytesArray = runtimeEntityType.FindProperty("BytesArray")!;
            var bytesNestedCollection = runtimeEntityType.FindProperty("BytesNestedCollection")!;
            var bytesToStringConverterProperty = runtimeEntityType.FindProperty("BytesToStringConverterProperty")!;
            var castingConverterProperty = runtimeEntityType.FindProperty("CastingConverterProperty")!;
            var @char = runtimeEntityType.FindProperty("Char")!;
            var charArray = runtimeEntityType.FindProperty("CharArray")!;
            var charNestedCollection = runtimeEntityType.FindProperty("CharNestedCollection")!;
            var charToStringConverterProperty = runtimeEntityType.FindProperty("CharToStringConverterProperty")!;
            var dateOnly = runtimeEntityType.FindProperty("DateOnly")!;
            var dateOnlyArray = runtimeEntityType.FindProperty("DateOnlyArray")!;
            var dateOnlyToStringConverterProperty = runtimeEntityType.FindProperty("DateOnlyToStringConverterProperty")!;
            var dateTime = runtimeEntityType.FindProperty("DateTime")!;
            var dateTimeArray = runtimeEntityType.FindProperty("DateTimeArray")!;
            var dateTimeOffsetToBinaryConverterProperty = runtimeEntityType.FindProperty("DateTimeOffsetToBinaryConverterProperty")!;
            var dateTimeOffsetToBytesConverterProperty = runtimeEntityType.FindProperty("DateTimeOffsetToBytesConverterProperty")!;
            var dateTimeOffsetToStringConverterProperty = runtimeEntityType.FindProperty("DateTimeOffsetToStringConverterProperty")!;
            var dateTimeToBinaryConverterProperty = runtimeEntityType.FindProperty("DateTimeToBinaryConverterProperty")!;
            var dateTimeToStringConverterProperty = runtimeEntityType.FindProperty("DateTimeToStringConverterProperty")!;
            var dateTimeToTicksConverterProperty = runtimeEntityType.FindProperty("DateTimeToTicksConverterProperty")!;
            var @decimal = runtimeEntityType.FindProperty("Decimal")!;
            var decimalArray = runtimeEntityType.FindProperty("DecimalArray")!;
            var decimalNumberToBytesConverterProperty = runtimeEntityType.FindProperty("DecimalNumberToBytesConverterProperty")!;
            var decimalNumberToStringConverterProperty = runtimeEntityType.FindProperty("DecimalNumberToStringConverterProperty")!;
            var @double = runtimeEntityType.FindProperty("Double")!;
            var doubleArray = runtimeEntityType.FindProperty("DoubleArray")!;
            var doubleNumberToBytesConverterProperty = runtimeEntityType.FindProperty("DoubleNumberToBytesConverterProperty")!;
            var doubleNumberToStringConverterProperty = runtimeEntityType.FindProperty("DoubleNumberToStringConverterProperty")!;
            var enum16 = runtimeEntityType.FindProperty("Enum16")!;
            var enum16Array = runtimeEntityType.FindProperty("Enum16Array")!;
            var enum16AsString = runtimeEntityType.FindProperty("Enum16AsString")!;
            var enum16AsStringArray = runtimeEntityType.FindProperty("Enum16AsStringArray")!;
            var enum16AsStringCollection = runtimeEntityType.FindProperty("Enum16AsStringCollection")!;
            var enum16Collection = runtimeEntityType.FindProperty("Enum16Collection")!;
            var enum32 = runtimeEntityType.FindProperty("Enum32")!;
            var enum32Array = runtimeEntityType.FindProperty("Enum32Array")!;
            var enum32AsString = runtimeEntityType.FindProperty("Enum32AsString")!;
            var enum32AsStringArray = runtimeEntityType.FindProperty("Enum32AsStringArray")!;
            var enum32AsStringCollection = runtimeEntityType.FindProperty("Enum32AsStringCollection")!;
            var enum32Collection = runtimeEntityType.FindProperty("Enum32Collection")!;
            var enum32NestedCollection = runtimeEntityType.FindProperty("Enum32NestedCollection")!;
            var enum64 = runtimeEntityType.FindProperty("Enum64")!;
            var enum64Array = runtimeEntityType.FindProperty("Enum64Array")!;
            var enum64AsString = runtimeEntityType.FindProperty("Enum64AsString")!;
            var enum64AsStringArray = runtimeEntityType.FindProperty("Enum64AsStringArray")!;
            var enum64AsStringCollection = runtimeEntityType.FindProperty("Enum64AsStringCollection")!;
            var enum64Collection = runtimeEntityType.FindProperty("Enum64Collection")!;
            var enum8 = runtimeEntityType.FindProperty("Enum8")!;
            var enum8Array = runtimeEntityType.FindProperty("Enum8Array")!;
            var enum8AsString = runtimeEntityType.FindProperty("Enum8AsString")!;
            var enum8AsStringArray = runtimeEntityType.FindProperty("Enum8AsStringArray")!;
            var enum8AsStringCollection = runtimeEntityType.FindProperty("Enum8AsStringCollection")!;
            var enum8Collection = runtimeEntityType.FindProperty("Enum8Collection")!;
            var enum8NestedCollection = runtimeEntityType.FindProperty("Enum8NestedCollection")!;
            var enumToNumberConverterProperty = runtimeEntityType.FindProperty("EnumToNumberConverterProperty")!;
            var enumToStringConverterProperty = runtimeEntityType.FindProperty("EnumToStringConverterProperty")!;
            var enumU16 = runtimeEntityType.FindProperty("EnumU16")!;
            var enumU16Array = runtimeEntityType.FindProperty("EnumU16Array")!;
            var enumU16AsString = runtimeEntityType.FindProperty("EnumU16AsString")!;
            var enumU16AsStringArray = runtimeEntityType.FindProperty("EnumU16AsStringArray")!;
            var enumU16AsStringCollection = runtimeEntityType.FindProperty("EnumU16AsStringCollection")!;
            var enumU16Collection = runtimeEntityType.FindProperty("EnumU16Collection")!;
            var enumU32 = runtimeEntityType.FindProperty("EnumU32")!;
            var enumU32Array = runtimeEntityType.FindProperty("EnumU32Array")!;
            var enumU32AsString = runtimeEntityType.FindProperty("EnumU32AsString")!;
            var enumU32AsStringArray = runtimeEntityType.FindProperty("EnumU32AsStringArray")!;
            var enumU32AsStringCollection = runtimeEntityType.FindProperty("EnumU32AsStringCollection")!;
            var enumU32Collection = runtimeEntityType.FindProperty("EnumU32Collection")!;
            var enumU64 = runtimeEntityType.FindProperty("EnumU64")!;
            var enumU64Array = runtimeEntityType.FindProperty("EnumU64Array")!;
            var enumU64AsString = runtimeEntityType.FindProperty("EnumU64AsString")!;
            var enumU64AsStringArray = runtimeEntityType.FindProperty("EnumU64AsStringArray")!;
            var enumU64AsStringCollection = runtimeEntityType.FindProperty("EnumU64AsStringCollection")!;
            var enumU64Collection = runtimeEntityType.FindProperty("EnumU64Collection")!;
            var enumU64NestedCollection = runtimeEntityType.FindProperty("EnumU64NestedCollection")!;
            var enumU8 = runtimeEntityType.FindProperty("EnumU8")!;
            var enumU8Array = runtimeEntityType.FindProperty("EnumU8Array")!;
            var enumU8AsString = runtimeEntityType.FindProperty("EnumU8AsString")!;
            var enumU8AsStringArray = runtimeEntityType.FindProperty("EnumU8AsStringArray")!;
            var enumU8AsStringCollection = runtimeEntityType.FindProperty("EnumU8AsStringCollection")!;
            var enumU8Collection = runtimeEntityType.FindProperty("EnumU8Collection")!;
            var @float = runtimeEntityType.FindProperty("Float")!;
            var floatArray = runtimeEntityType.FindProperty("FloatArray")!;
            var guid = runtimeEntityType.FindProperty("Guid")!;
            var guidArray = runtimeEntityType.FindProperty("GuidArray")!;
            var guidNestedCollection = runtimeEntityType.FindProperty("GuidNestedCollection")!;
            var guidToBytesConverterProperty = runtimeEntityType.FindProperty("GuidToBytesConverterProperty")!;
            var guidToStringConverterProperty = runtimeEntityType.FindProperty("GuidToStringConverterProperty")!;
            var iPAddress = runtimeEntityType.FindProperty("IPAddress")!;
            var iPAddressArray = runtimeEntityType.FindProperty("IPAddressArray")!;
            var iPAddressToBytesConverterProperty = runtimeEntityType.FindProperty("IPAddressToBytesConverterProperty")!;
            var iPAddressToStringConverterProperty = runtimeEntityType.FindProperty("IPAddressToStringConverterProperty")!;
            var int16 = runtimeEntityType.FindProperty("Int16")!;
            var int16Array = runtimeEntityType.FindProperty("Int16Array")!;
            var int32 = runtimeEntityType.FindProperty("Int32")!;
            var int32Array = runtimeEntityType.FindProperty("Int32Array")!;
            var int32NestedCollection = runtimeEntityType.FindProperty("Int32NestedCollection")!;
            var int64 = runtimeEntityType.FindProperty("Int64")!;
            var int64Array = runtimeEntityType.FindProperty("Int64Array")!;
            var int64NestedCollection = runtimeEntityType.FindProperty("Int64NestedCollection")!;
            var int8 = runtimeEntityType.FindProperty("Int8")!;
            var int8Array = runtimeEntityType.FindProperty("Int8Array")!;
            var int8NestedCollection = runtimeEntityType.FindProperty("Int8NestedCollection")!;
            var intNumberToBytesConverterProperty = runtimeEntityType.FindProperty("IntNumberToBytesConverterProperty")!;
            var intNumberToStringConverterProperty = runtimeEntityType.FindProperty("IntNumberToStringConverterProperty")!;
            var nullIntToNullStringConverterProperty = runtimeEntityType.FindProperty("NullIntToNullStringConverterProperty")!;
            var nullableBool = runtimeEntityType.FindProperty("NullableBool")!;
            var nullableBoolArray = runtimeEntityType.FindProperty("NullableBoolArray")!;
            var nullableBytes = runtimeEntityType.FindProperty("NullableBytes")!;
            var nullableBytesArray = runtimeEntityType.FindProperty("NullableBytesArray")!;
            var nullableBytesNestedCollection = runtimeEntityType.FindProperty("NullableBytesNestedCollection")!;
            var nullableChar = runtimeEntityType.FindProperty("NullableChar")!;
            var nullableCharArray = runtimeEntityType.FindProperty("NullableCharArray")!;
            var nullableDateOnly = runtimeEntityType.FindProperty("NullableDateOnly")!;
            var nullableDateOnlyArray = runtimeEntityType.FindProperty("NullableDateOnlyArray")!;
            var nullableDateTime = runtimeEntityType.FindProperty("NullableDateTime")!;
            var nullableDateTimeArray = runtimeEntityType.FindProperty("NullableDateTimeArray")!;
            var nullableDecimal = runtimeEntityType.FindProperty("NullableDecimal")!;
            var nullableDecimalArray = runtimeEntityType.FindProperty("NullableDecimalArray")!;
            var nullableDouble = runtimeEntityType.FindProperty("NullableDouble")!;
            var nullableDoubleArray = runtimeEntityType.FindProperty("NullableDoubleArray")!;
            var nullableEnum16 = runtimeEntityType.FindProperty("NullableEnum16")!;
            var nullableEnum16Array = runtimeEntityType.FindProperty("NullableEnum16Array")!;
            var nullableEnum16AsString = runtimeEntityType.FindProperty("NullableEnum16AsString")!;
            var nullableEnum16AsStringArray = runtimeEntityType.FindProperty("NullableEnum16AsStringArray")!;
            var nullableEnum16AsStringCollection = runtimeEntityType.FindProperty("NullableEnum16AsStringCollection")!;
            var nullableEnum16Collection = runtimeEntityType.FindProperty("NullableEnum16Collection")!;
            var nullableEnum32 = runtimeEntityType.FindProperty("NullableEnum32")!;
            var nullableEnum32Array = runtimeEntityType.FindProperty("NullableEnum32Array")!;
            var nullableEnum32AsString = runtimeEntityType.FindProperty("NullableEnum32AsString")!;
            var nullableEnum32AsStringArray = runtimeEntityType.FindProperty("NullableEnum32AsStringArray")!;
            var nullableEnum32AsStringCollection = runtimeEntityType.FindProperty("NullableEnum32AsStringCollection")!;
            var nullableEnum32Collection = runtimeEntityType.FindProperty("NullableEnum32Collection")!;
            var nullableEnum32NestedCollection = runtimeEntityType.FindProperty("NullableEnum32NestedCollection")!;
            var nullableEnum64 = runtimeEntityType.FindProperty("NullableEnum64")!;
            var nullableEnum64Array = runtimeEntityType.FindProperty("NullableEnum64Array")!;
            var nullableEnum64AsString = runtimeEntityType.FindProperty("NullableEnum64AsString")!;
            var nullableEnum64AsStringArray = runtimeEntityType.FindProperty("NullableEnum64AsStringArray")!;
            var nullableEnum64AsStringCollection = runtimeEntityType.FindProperty("NullableEnum64AsStringCollection")!;
            var nullableEnum64Collection = runtimeEntityType.FindProperty("NullableEnum64Collection")!;
            var nullableEnum8 = runtimeEntityType.FindProperty("NullableEnum8")!;
            var nullableEnum8Array = runtimeEntityType.FindProperty("NullableEnum8Array")!;
            var nullableEnum8AsString = runtimeEntityType.FindProperty("NullableEnum8AsString")!;
            var nullableEnum8AsStringArray = runtimeEntityType.FindProperty("NullableEnum8AsStringArray")!;
            var nullableEnum8AsStringCollection = runtimeEntityType.FindProperty("NullableEnum8AsStringCollection")!;
            var nullableEnum8Collection = runtimeEntityType.FindProperty("NullableEnum8Collection")!;
            var nullableEnum8NestedCollection = runtimeEntityType.FindProperty("NullableEnum8NestedCollection")!;
            var nullableEnumU16 = runtimeEntityType.FindProperty("NullableEnumU16")!;
            var nullableEnumU16Array = runtimeEntityType.FindProperty("NullableEnumU16Array")!;
            var nullableEnumU16AsString = runtimeEntityType.FindProperty("NullableEnumU16AsString")!;
            var nullableEnumU16AsStringArray = runtimeEntityType.FindProperty("NullableEnumU16AsStringArray")!;
            var nullableEnumU16AsStringCollection = runtimeEntityType.FindProperty("NullableEnumU16AsStringCollection")!;
            var nullableEnumU16Collection = runtimeEntityType.FindProperty("NullableEnumU16Collection")!;
            var nullableEnumU32 = runtimeEntityType.FindProperty("NullableEnumU32")!;
            var nullableEnumU32Array = runtimeEntityType.FindProperty("NullableEnumU32Array")!;
            var nullableEnumU32AsString = runtimeEntityType.FindProperty("NullableEnumU32AsString")!;
            var nullableEnumU32AsStringArray = runtimeEntityType.FindProperty("NullableEnumU32AsStringArray")!;
            var nullableEnumU32AsStringCollection = runtimeEntityType.FindProperty("NullableEnumU32AsStringCollection")!;
            var nullableEnumU32Collection = runtimeEntityType.FindProperty("NullableEnumU32Collection")!;
            var nullableEnumU64 = runtimeEntityType.FindProperty("NullableEnumU64")!;
            var nullableEnumU64Array = runtimeEntityType.FindProperty("NullableEnumU64Array")!;
            var nullableEnumU64AsString = runtimeEntityType.FindProperty("NullableEnumU64AsString")!;
            var nullableEnumU64AsStringArray = runtimeEntityType.FindProperty("NullableEnumU64AsStringArray")!;
            var nullableEnumU64AsStringCollection = runtimeEntityType.FindProperty("NullableEnumU64AsStringCollection")!;
            var nullableEnumU64Collection = runtimeEntityType.FindProperty("NullableEnumU64Collection")!;
            var nullableEnumU64NestedCollection = runtimeEntityType.FindProperty("NullableEnumU64NestedCollection")!;
            var nullableEnumU8 = runtimeEntityType.FindProperty("NullableEnumU8")!;
            var nullableEnumU8Array = runtimeEntityType.FindProperty("NullableEnumU8Array")!;
            var nullableEnumU8AsString = runtimeEntityType.FindProperty("NullableEnumU8AsString")!;
            var nullableEnumU8AsStringArray = runtimeEntityType.FindProperty("NullableEnumU8AsStringArray")!;
            var nullableEnumU8AsStringCollection = runtimeEntityType.FindProperty("NullableEnumU8AsStringCollection")!;
            var nullableEnumU8Collection = runtimeEntityType.FindProperty("NullableEnumU8Collection")!;
            var nullableFloat = runtimeEntityType.FindProperty("NullableFloat")!;
            var nullableFloatArray = runtimeEntityType.FindProperty("NullableFloatArray")!;
            var nullableGuid = runtimeEntityType.FindProperty("NullableGuid")!;
            var nullableGuidArray = runtimeEntityType.FindProperty("NullableGuidArray")!;
            var nullableGuidNestedCollection = runtimeEntityType.FindProperty("NullableGuidNestedCollection")!;
            var nullableIPAddress = runtimeEntityType.FindProperty("NullableIPAddress")!;
            var nullableIPAddressArray = runtimeEntityType.FindProperty("NullableIPAddressArray")!;
            var nullableInt16 = runtimeEntityType.FindProperty("NullableInt16")!;
            var nullableInt16Array = runtimeEntityType.FindProperty("NullableInt16Array")!;
            var nullableInt32 = runtimeEntityType.FindProperty("NullableInt32")!;
            var nullableInt32Array = runtimeEntityType.FindProperty("NullableInt32Array")!;
            var nullableInt32NestedCollection = runtimeEntityType.FindProperty("NullableInt32NestedCollection")!;
            var nullableInt64 = runtimeEntityType.FindProperty("NullableInt64")!;
            var nullableInt64Array = runtimeEntityType.FindProperty("NullableInt64Array")!;
            var nullableInt64NestedCollection = runtimeEntityType.FindProperty("NullableInt64NestedCollection")!;
            var nullableInt8 = runtimeEntityType.FindProperty("NullableInt8")!;
            var nullableInt8Array = runtimeEntityType.FindProperty("NullableInt8Array")!;
            var nullablePhysicalAddress = runtimeEntityType.FindProperty("NullablePhysicalAddress")!;
            var nullablePhysicalAddressArray = runtimeEntityType.FindProperty("NullablePhysicalAddressArray")!;
            var nullablePhysicalAddressNestedCollection = runtimeEntityType.FindProperty("NullablePhysicalAddressNestedCollection")!;
            var nullableString = runtimeEntityType.FindProperty("NullableString")!;
            var nullableStringArray = runtimeEntityType.FindProperty("NullableStringArray")!;
            var nullableStringNestedCollection = runtimeEntityType.FindProperty("NullableStringNestedCollection")!;
            var nullableTimeOnly = runtimeEntityType.FindProperty("NullableTimeOnly")!;
            var nullableTimeOnlyArray = runtimeEntityType.FindProperty("NullableTimeOnlyArray")!;
            var nullableTimeSpan = runtimeEntityType.FindProperty("NullableTimeSpan")!;
            var nullableTimeSpanArray = runtimeEntityType.FindProperty("NullableTimeSpanArray")!;
            var nullableUInt16 = runtimeEntityType.FindProperty("NullableUInt16")!;
            var nullableUInt16Array = runtimeEntityType.FindProperty("NullableUInt16Array")!;
            var nullableUInt32 = runtimeEntityType.FindProperty("NullableUInt32")!;
            var nullableUInt32Array = runtimeEntityType.FindProperty("NullableUInt32Array")!;
            var nullableUInt64 = runtimeEntityType.FindProperty("NullableUInt64")!;
            var nullableUInt64Array = runtimeEntityType.FindProperty("NullableUInt64Array")!;
            var nullableUInt8 = runtimeEntityType.FindProperty("NullableUInt8")!;
            var nullableUInt8Array = runtimeEntityType.FindProperty("NullableUInt8Array")!;
            var nullableUInt8NestedCollection = runtimeEntityType.FindProperty("NullableUInt8NestedCollection")!;
            var nullableUri = runtimeEntityType.FindProperty("NullableUri")!;
            var nullableUriArray = runtimeEntityType.FindProperty("NullableUriArray")!;
            var physicalAddress = runtimeEntityType.FindProperty("PhysicalAddress")!;
            var physicalAddressArray = runtimeEntityType.FindProperty("PhysicalAddressArray")!;
            var physicalAddressToBytesConverterProperty = runtimeEntityType.FindProperty("PhysicalAddressToBytesConverterProperty")!;
            var physicalAddressToStringConverterProperty = runtimeEntityType.FindProperty("PhysicalAddressToStringConverterProperty")!;
            var @string = runtimeEntityType.FindProperty("String")!;
            var stringArray = runtimeEntityType.FindProperty("StringArray")!;
            var stringNestedCollection = runtimeEntityType.FindProperty("StringNestedCollection")!;
            var stringToBoolConverterProperty = runtimeEntityType.FindProperty("StringToBoolConverterProperty")!;
            var stringToBytesConverterProperty = runtimeEntityType.FindProperty("StringToBytesConverterProperty")!;
            var stringToCharConverterProperty = runtimeEntityType.FindProperty("StringToCharConverterProperty")!;
            var stringToDateOnlyConverterProperty = runtimeEntityType.FindProperty("StringToDateOnlyConverterProperty")!;
            var stringToDateTimeConverterProperty = runtimeEntityType.FindProperty("StringToDateTimeConverterProperty")!;
            var stringToDateTimeOffsetConverterProperty = runtimeEntityType.FindProperty("StringToDateTimeOffsetConverterProperty")!;
            var stringToDecimalNumberConverterProperty = runtimeEntityType.FindProperty("StringToDecimalNumberConverterProperty")!;
            var stringToDoubleNumberConverterProperty = runtimeEntityType.FindProperty("StringToDoubleNumberConverterProperty")!;
            var stringToEnumConverterProperty = runtimeEntityType.FindProperty("StringToEnumConverterProperty")!;
            var stringToGuidConverterProperty = runtimeEntityType.FindProperty("StringToGuidConverterProperty")!;
            var stringToIntNumberConverterProperty = runtimeEntityType.FindProperty("StringToIntNumberConverterProperty")!;
            var stringToTimeOnlyConverterProperty = runtimeEntityType.FindProperty("StringToTimeOnlyConverterProperty")!;
            var stringToTimeSpanConverterProperty = runtimeEntityType.FindProperty("StringToTimeSpanConverterProperty")!;
            var stringToUriConverterProperty = runtimeEntityType.FindProperty("StringToUriConverterProperty")!;
            var timeOnly = runtimeEntityType.FindProperty("TimeOnly")!;
            var timeOnlyArray = runtimeEntityType.FindProperty("TimeOnlyArray")!;
            var timeOnlyToStringConverterProperty = runtimeEntityType.FindProperty("TimeOnlyToStringConverterProperty")!;
            var timeOnlyToTicksConverterProperty = runtimeEntityType.FindProperty("TimeOnlyToTicksConverterProperty")!;
            var timeSpan = runtimeEntityType.FindProperty("TimeSpan")!;
            var timeSpanArray = runtimeEntityType.FindProperty("TimeSpanArray")!;
            var timeSpanToStringConverterProperty = runtimeEntityType.FindProperty("TimeSpanToStringConverterProperty")!;
            var timeSpanToTicksConverterProperty = runtimeEntityType.FindProperty("TimeSpanToTicksConverterProperty")!;
            var uInt16 = runtimeEntityType.FindProperty("UInt16")!;
            var uInt16Array = runtimeEntityType.FindProperty("UInt16Array")!;
            var uInt32 = runtimeEntityType.FindProperty("UInt32")!;
            var uInt32Array = runtimeEntityType.FindProperty("UInt32Array")!;
            var uInt64 = runtimeEntityType.FindProperty("UInt64")!;
            var uInt64Array = runtimeEntityType.FindProperty("UInt64Array")!;
            var uInt8 = runtimeEntityType.FindProperty("UInt8")!;
            var uInt8Array = runtimeEntityType.FindProperty("UInt8Array")!;
            var uInt8NestedCollection = runtimeEntityType.FindProperty("UInt8NestedCollection")!;
            var uri = runtimeEntityType.FindProperty("Uri")!;
            var uriArray = runtimeEntityType.FindProperty("UriArray")!;
            var uriToStringConverterProperty = runtimeEntityType.FindProperty("UriToStringConverterProperty")!;
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.Create<CompiledModelTestBase.ManyTypesId>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<CompiledModelTestBase.ManyTypesId>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                (InternalEntityEntry source) =>
                {
                    var entity = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg = (ISnapshot)new Snapshot<CompiledModelTestBase.ManyTypesId, bool, bool[], bool[][], bool, bool, bool, byte[], byte[][], byte[][][], byte[], int, char, char[], char[][], char, DateOnly, DateOnly[], DateOnly, DateTime, DateTime[], DateTimeOffset, DateTimeOffset, DateTimeOffset, DateTime, DateTime, DateTime, decimal, decimal[], decimal>(((ValueComparer<CompiledModelTestBase.ManyTypesId>)((IProperty)id).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.ManyTypesId>(id)), ((ValueComparer<bool>)((IProperty)@bool).GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(@bool)), (IEnumerable<bool>)source.GetCurrentValue<bool[]>(boolArray) == null ? null : (bool[])((ValueComparer<IEnumerable<bool>>)((IProperty)boolArray).GetValueComparer()).Snapshot((IEnumerable<bool>)source.GetCurrentValue<bool[]>(boolArray)), (object)source.GetCurrentValue<bool[][]>(boolNestedCollection) == null ? null : (bool[][])((ValueComparer<object>)((IProperty)boolNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<bool[][]>(boolNestedCollection)), ((ValueComparer<bool>)((IProperty)boolToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(boolToStringConverterProperty)), ((ValueComparer<bool>)((IProperty)boolToTwoValuesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(boolToTwoValuesConverterProperty)), ((ValueComparer<bool>)((IProperty)boolToZeroOneConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<bool>(boolToZeroOneConverterProperty)), source.GetCurrentValue<byte[]>(bytes) == null ? null : ((ValueComparer<byte[]>)((IProperty)bytes).GetValueComparer()).Snapshot(source.GetCurrentValue<byte[]>(bytes)), (object)source.GetCurrentValue<byte[][]>(bytesArray) == null ? null : (byte[][])((ValueComparer<object>)((IProperty)bytesArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<byte[][]>(bytesArray)), (object)source.GetCurrentValue<byte[][][]>(bytesNestedCollection) == null ? null : (byte[][][])((ValueComparer<object>)((IProperty)bytesNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<byte[][][]>(bytesNestedCollection)), source.GetCurrentValue<byte[]>(bytesToStringConverterProperty) == null ? null : ((ValueComparer<byte[]>)((IProperty)bytesToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<byte[]>(bytesToStringConverterProperty)), ((ValueComparer<int>)((IProperty)castingConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<int>(castingConverterProperty)), ((ValueComparer<char>)((IProperty)@char).GetValueComparer()).Snapshot(source.GetCurrentValue<char>(@char)), (IEnumerable<char>)source.GetCurrentValue<char[]>(charArray) == null ? null : (char[])((ValueComparer<IEnumerable<char>>)((IProperty)charArray).GetValueComparer()).Snapshot((IEnumerable<char>)source.GetCurrentValue<char[]>(charArray)), (object)source.GetCurrentValue<char[][]>(charNestedCollection) == null ? null : (char[][])((ValueComparer<object>)((IProperty)charNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<char[][]>(charNestedCollection)), ((ValueComparer<char>)((IProperty)charToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<char>(charToStringConverterProperty)), ((ValueComparer<DateOnly>)((IProperty)dateOnly).GetValueComparer()).Snapshot(source.GetCurrentValue<DateOnly>(dateOnly)), (IEnumerable<DateOnly>)source.GetCurrentValue<DateOnly[]>(dateOnlyArray) == null ? null : (DateOnly[])((ValueComparer<IEnumerable<DateOnly>>)((IProperty)dateOnlyArray).GetValueComparer()).Snapshot((IEnumerable<DateOnly>)source.GetCurrentValue<DateOnly[]>(dateOnlyArray)), ((ValueComparer<DateOnly>)((IProperty)dateOnlyToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateOnly>(dateOnlyToStringConverterProperty)), ((ValueComparer<DateTime>)((IProperty)dateTime).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTime>(dateTime)), (IEnumerable<DateTime>)source.GetCurrentValue<DateTime[]>(dateTimeArray) == null ? null : (DateTime[])((ValueComparer<IEnumerable<DateTime>>)((IProperty)dateTimeArray).GetValueComparer()).Snapshot((IEnumerable<DateTime>)source.GetCurrentValue<DateTime[]>(dateTimeArray)), ((ValueComparer<DateTimeOffset>)((IProperty)dateTimeOffsetToBinaryConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToBinaryConverterProperty)), ((ValueComparer<DateTimeOffset>)((IProperty)dateTimeOffsetToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToBytesConverterProperty)), ((ValueComparer<DateTimeOffset>)((IProperty)dateTimeOffsetToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTimeOffset>(dateTimeOffsetToStringConverterProperty)), ((ValueComparer<DateTime>)((IProperty)dateTimeToBinaryConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTime>(dateTimeToBinaryConverterProperty)), ((ValueComparer<DateTime>)((IProperty)dateTimeToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTime>(dateTimeToStringConverterProperty)), ((ValueComparer<DateTime>)((IProperty)dateTimeToTicksConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<DateTime>(dateTimeToTicksConverterProperty)), ((ValueComparer<decimal>)((IProperty)@decimal).GetValueComparer()).Snapshot(source.GetCurrentValue<decimal>(@decimal)), (IEnumerable<decimal>)source.GetCurrentValue<decimal[]>(decimalArray) == null ? null : (decimal[])((ValueComparer<IEnumerable<decimal>>)((IProperty)decimalArray).GetValueComparer()).Snapshot((IEnumerable<decimal>)source.GetCurrentValue<decimal[]>(decimalArray)), ((ValueComparer<decimal>)((IProperty)decimalNumberToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<decimal>(decimalNumberToBytesConverterProperty)));
                    var entity0 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg0 = (ISnapshot)new Snapshot<decimal, double, double[], double, double, CompiledModelTestBase.Enum16, CompiledModelTestBase.Enum16[], CompiledModelTestBase.Enum16, CompiledModelTestBase.Enum16[], List<CompiledModelTestBase.Enum16>, List<CompiledModelTestBase.Enum16>, CompiledModelTestBase.Enum32, CompiledModelTestBase.Enum32[], CompiledModelTestBase.Enum32, CompiledModelTestBase.Enum32[], List<CompiledModelTestBase.Enum32>, List<CompiledModelTestBase.Enum32>, List<CompiledModelTestBase.Enum32>[][], CompiledModelTestBase.Enum64, CompiledModelTestBase.Enum64[], CompiledModelTestBase.Enum64, CompiledModelTestBase.Enum64[], List<CompiledModelTestBase.Enum64>, List<CompiledModelTestBase.Enum64>, CompiledModelTestBase.Enum8, CompiledModelTestBase.Enum8[], CompiledModelTestBase.Enum8, CompiledModelTestBase.Enum8[], List<CompiledModelTestBase.Enum8>, List<CompiledModelTestBase.Enum8>>(((ValueComparer<decimal>)((IProperty)decimalNumberToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<decimal>(decimalNumberToStringConverterProperty)), ((ValueComparer<double>)((IProperty)@double).GetValueComparer()).Snapshot(source.GetCurrentValue<double>(@double)), (IEnumerable<double>)source.GetCurrentValue<double[]>(doubleArray) == null ? null : (double[])((ValueComparer<IEnumerable<double>>)((IProperty)doubleArray).GetValueComparer()).Snapshot((IEnumerable<double>)source.GetCurrentValue<double[]>(doubleArray)), ((ValueComparer<double>)((IProperty)doubleNumberToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<double>(doubleNumberToBytesConverterProperty)), ((ValueComparer<double>)((IProperty)doubleNumberToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<double>(doubleNumberToStringConverterProperty)), ((ValueComparer<CompiledModelTestBase.Enum16>)((IProperty)enum16).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum16>(enum16)), (IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16Array) == null ? null : (CompiledModelTestBase.Enum16[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum16>>)((IProperty)enum16Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16Array)), ((ValueComparer<CompiledModelTestBase.Enum16>)((IProperty)enum16AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum16>(enum16AsString)), (IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16AsStringArray) == null ? null : (CompiledModelTestBase.Enum16[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum16>>)((IProperty)enum16AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<CompiledModelTestBase.Enum16[]>(enum16AsStringArray)), (IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16AsStringCollection) == null ? null : (List<CompiledModelTestBase.Enum16>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum16>>)((IProperty)enum16AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16AsStringCollection)), (IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16Collection) == null ? null : (List<CompiledModelTestBase.Enum16>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum16>>)((IProperty)enum16Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum16>)source.GetCurrentValue<List<CompiledModelTestBase.Enum16>>(enum16Collection)), ((ValueComparer<CompiledModelTestBase.Enum32>)((IProperty)enum32).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum32>(enum32)), (IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32Array) == null ? null : (CompiledModelTestBase.Enum32[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum32>>)((IProperty)enum32Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32Array)), ((ValueComparer<CompiledModelTestBase.Enum32>)((IProperty)enum32AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum32>(enum32AsString)), (IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32AsStringArray) == null ? null : (CompiledModelTestBase.Enum32[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum32>>)((IProperty)enum32AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<CompiledModelTestBase.Enum32[]>(enum32AsStringArray)), (IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32AsStringCollection) == null ? null : (List<CompiledModelTestBase.Enum32>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum32>>)((IProperty)enum32AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32AsStringCollection)), (IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32Collection) == null ? null : (List<CompiledModelTestBase.Enum32>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum32>>)((IProperty)enum32Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum32>)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>>(enum32Collection)), (object)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>[][]>(enum32NestedCollection) == null ? null : (List<CompiledModelTestBase.Enum32>[][])((ValueComparer<object>)((IProperty)enum32NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<List<CompiledModelTestBase.Enum32>[][]>(enum32NestedCollection)), ((ValueComparer<CompiledModelTestBase.Enum64>)((IProperty)enum64).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum64>(enum64)), (IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64Array) == null ? null : (CompiledModelTestBase.Enum64[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum64>>)((IProperty)enum64Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64Array)), ((ValueComparer<CompiledModelTestBase.Enum64>)((IProperty)enum64AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum64>(enum64AsString)), (IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64AsStringArray) == null ? null : (CompiledModelTestBase.Enum64[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum64>>)((IProperty)enum64AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<CompiledModelTestBase.Enum64[]>(enum64AsStringArray)), (IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64AsStringCollection) == null ? null : (List<CompiledModelTestBase.Enum64>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum64>>)((IProperty)enum64AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64AsStringCollection)), (IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64Collection) == null ? null : (List<CompiledModelTestBase.Enum64>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum64>>)((IProperty)enum64Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum64>)source.GetCurrentValue<List<CompiledModelTestBase.Enum64>>(enum64Collection)), ((ValueComparer<CompiledModelTestBase.Enum8>)((IProperty)enum8).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum8>(enum8)), (IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8Array) == null ? null : (CompiledModelTestBase.Enum8[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum8>>)((IProperty)enum8Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8Array)), ((ValueComparer<CompiledModelTestBase.Enum8>)((IProperty)enum8AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum8>(enum8AsString)), (IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8AsStringArray) == null ? null : (CompiledModelTestBase.Enum8[])((ValueComparer<IEnumerable<CompiledModelTestBase.Enum8>>)((IProperty)enum8AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<CompiledModelTestBase.Enum8[]>(enum8AsStringArray)), (IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8AsStringCollection) == null ? null : (List<CompiledModelTestBase.Enum8>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum8>>)((IProperty)enum8AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8AsStringCollection)), (IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8Collection) == null ? null : (List<CompiledModelTestBase.Enum8>)((ValueComparer<IEnumerable<CompiledModelTestBase.Enum8>>)((IProperty)enum8Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.Enum8>)source.GetCurrentValue<List<CompiledModelTestBase.Enum8>>(enum8Collection)));
                    var entity1 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg1 = (ISnapshot)new Snapshot<CompiledModelTestBase.Enum8[][], CompiledModelTestBase.Enum32, CompiledModelTestBase.Enum32, CompiledModelTestBase.EnumU16, CompiledModelTestBase.EnumU16[], CompiledModelTestBase.EnumU16, CompiledModelTestBase.EnumU16[], List<CompiledModelTestBase.EnumU16>, List<CompiledModelTestBase.EnumU16>, CompiledModelTestBase.EnumU32, CompiledModelTestBase.EnumU32[], CompiledModelTestBase.EnumU32, CompiledModelTestBase.EnumU32[], List<CompiledModelTestBase.EnumU32>, List<CompiledModelTestBase.EnumU32>, CompiledModelTestBase.EnumU64, CompiledModelTestBase.EnumU64[], CompiledModelTestBase.EnumU64, CompiledModelTestBase.EnumU64[], List<CompiledModelTestBase.EnumU64>, List<CompiledModelTestBase.EnumU64>, CompiledModelTestBase.EnumU64[][], CompiledModelTestBase.EnumU8, CompiledModelTestBase.EnumU8[], CompiledModelTestBase.EnumU8, CompiledModelTestBase.EnumU8[], List<CompiledModelTestBase.EnumU8>, List<CompiledModelTestBase.EnumU8>, float, float[]>((object)source.GetCurrentValue<CompiledModelTestBase.Enum8[][]>(enum8NestedCollection) == null ? null : (CompiledModelTestBase.Enum8[][])((ValueComparer<object>)((IProperty)enum8NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<CompiledModelTestBase.Enum8[][]>(enum8NestedCollection)), ((ValueComparer<CompiledModelTestBase.Enum32>)((IProperty)enumToNumberConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum32>(enumToNumberConverterProperty)), ((ValueComparer<CompiledModelTestBase.Enum32>)((IProperty)enumToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.Enum32>(enumToStringConverterProperty)), ((ValueComparer<CompiledModelTestBase.EnumU16>)((IProperty)enumU16).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU16>(enumU16)), (IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16Array) == null ? null : (CompiledModelTestBase.EnumU16[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU16>>)((IProperty)enumU16Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16Array)), ((ValueComparer<CompiledModelTestBase.EnumU16>)((IProperty)enumU16AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU16>(enumU16AsString)), (IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16AsStringArray) == null ? null : (CompiledModelTestBase.EnumU16[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU16>>)((IProperty)enumU16AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<CompiledModelTestBase.EnumU16[]>(enumU16AsStringArray)), (IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16AsStringCollection) == null ? null : (List<CompiledModelTestBase.EnumU16>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU16>>)((IProperty)enumU16AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16AsStringCollection)), (IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16Collection) == null ? null : (List<CompiledModelTestBase.EnumU16>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU16>>)((IProperty)enumU16Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU16>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU16>>(enumU16Collection)), ((ValueComparer<CompiledModelTestBase.EnumU32>)((IProperty)enumU32).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU32>(enumU32)), (IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32Array) == null ? null : (CompiledModelTestBase.EnumU32[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU32>>)((IProperty)enumU32Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32Array)), ((ValueComparer<CompiledModelTestBase.EnumU32>)((IProperty)enumU32AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU32>(enumU32AsString)), (IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32AsStringArray) == null ? null : (CompiledModelTestBase.EnumU32[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU32>>)((IProperty)enumU32AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<CompiledModelTestBase.EnumU32[]>(enumU32AsStringArray)), (IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32AsStringCollection) == null ? null : (List<CompiledModelTestBase.EnumU32>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU32>>)((IProperty)enumU32AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32AsStringCollection)), (IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32Collection) == null ? null : (List<CompiledModelTestBase.EnumU32>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU32>>)((IProperty)enumU32Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU32>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU32>>(enumU32Collection)), ((ValueComparer<CompiledModelTestBase.EnumU64>)((IProperty)enumU64).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU64>(enumU64)), (IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64Array) == null ? null : (CompiledModelTestBase.EnumU64[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU64>>)((IProperty)enumU64Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64Array)), ((ValueComparer<CompiledModelTestBase.EnumU64>)((IProperty)enumU64AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU64>(enumU64AsString)), (IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64AsStringArray) == null ? null : (CompiledModelTestBase.EnumU64[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU64>>)((IProperty)enumU64AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<CompiledModelTestBase.EnumU64[]>(enumU64AsStringArray)), (IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64AsStringCollection) == null ? null : (List<CompiledModelTestBase.EnumU64>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU64>>)((IProperty)enumU64AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64AsStringCollection)), (IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64Collection) == null ? null : (List<CompiledModelTestBase.EnumU64>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU64>>)((IProperty)enumU64Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU64>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU64>>(enumU64Collection)), (object)source.GetCurrentValue<CompiledModelTestBase.EnumU64[][]>(enumU64NestedCollection) == null ? null : (CompiledModelTestBase.EnumU64[][])((ValueComparer<object>)((IProperty)enumU64NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<CompiledModelTestBase.EnumU64[][]>(enumU64NestedCollection)), ((ValueComparer<CompiledModelTestBase.EnumU8>)((IProperty)enumU8).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU8>(enumU8)), (IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8Array) == null ? null : (CompiledModelTestBase.EnumU8[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU8>>)((IProperty)enumU8Array).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8Array)), ((ValueComparer<CompiledModelTestBase.EnumU8>)((IProperty)enumU8AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.EnumU8>(enumU8AsString)), (IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8AsStringArray) == null ? null : (CompiledModelTestBase.EnumU8[])((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU8>>)((IProperty)enumU8AsStringArray).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<CompiledModelTestBase.EnumU8[]>(enumU8AsStringArray)), (IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8AsStringCollection) == null ? null : (List<CompiledModelTestBase.EnumU8>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU8>>)((IProperty)enumU8AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8AsStringCollection)), (IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8Collection) == null ? null : (List<CompiledModelTestBase.EnumU8>)((ValueComparer<IEnumerable<CompiledModelTestBase.EnumU8>>)((IProperty)enumU8Collection).GetValueComparer()).Snapshot((IEnumerable<CompiledModelTestBase.EnumU8>)source.GetCurrentValue<List<CompiledModelTestBase.EnumU8>>(enumU8Collection)), ((ValueComparer<float>)((IProperty)@float).GetValueComparer()).Snapshot(source.GetCurrentValue<float>(@float)), (IEnumerable<float>)source.GetCurrentValue<float[]>(floatArray) == null ? null : (float[])((ValueComparer<IEnumerable<float>>)((IProperty)floatArray).GetValueComparer()).Snapshot((IEnumerable<float>)source.GetCurrentValue<float[]>(floatArray)));
                    var entity2 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg2 = (ISnapshot)new Snapshot<Guid, Guid[], ICollection<Guid[][]>, Guid, Guid, IPAddress, IPAddress[], IPAddress, IPAddress, short, short[], int, int[], int[][], long, long[], IList<long[]>[], sbyte, sbyte[], sbyte[][][], int, int, Nullable<int>, Nullable<bool>, Nullable<bool>[], byte[], byte[][], byte[][][], Nullable<char>, Nullable<char>[]>(((ValueComparer<Guid>)((IProperty)guid).GetValueComparer()).Snapshot(source.GetCurrentValue<Guid>(guid)), (IEnumerable<Guid>)source.GetCurrentValue<Guid[]>(guidArray) == null ? null : (Guid[])((ValueComparer<IEnumerable<Guid>>)((IProperty)guidArray).GetValueComparer()).Snapshot((IEnumerable<Guid>)source.GetCurrentValue<Guid[]>(guidArray)), (object)source.GetCurrentValue<ICollection<Guid[][]>>(guidNestedCollection) == null ? null : (ICollection<Guid[][]>)((ValueComparer<object>)((IProperty)guidNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<ICollection<Guid[][]>>(guidNestedCollection)), ((ValueComparer<Guid>)((IProperty)guidToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<Guid>(guidToBytesConverterProperty)), ((ValueComparer<Guid>)((IProperty)guidToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<Guid>(guidToStringConverterProperty)), source.GetCurrentValue<IPAddress>(iPAddress) == null ? null : ((ValueComparer<IPAddress>)((IProperty)iPAddress).GetValueComparer()).Snapshot(source.GetCurrentValue<IPAddress>(iPAddress)), (object)source.GetCurrentValue<IPAddress[]>(iPAddressArray) == null ? null : (IPAddress[])((ValueComparer<object>)((IProperty)iPAddressArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IPAddress[]>(iPAddressArray)), source.GetCurrentValue<IPAddress>(iPAddressToBytesConverterProperty) == null ? null : ((ValueComparer<IPAddress>)((IProperty)iPAddressToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<IPAddress>(iPAddressToBytesConverterProperty)), source.GetCurrentValue<IPAddress>(iPAddressToStringConverterProperty) == null ? null : ((ValueComparer<IPAddress>)((IProperty)iPAddressToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<IPAddress>(iPAddressToStringConverterProperty)), ((ValueComparer<short>)((IProperty)int16).GetValueComparer()).Snapshot(source.GetCurrentValue<short>(int16)), (IEnumerable<short>)source.GetCurrentValue<short[]>(int16Array) == null ? null : (short[])((ValueComparer<IEnumerable<short>>)((IProperty)int16Array).GetValueComparer()).Snapshot((IEnumerable<short>)source.GetCurrentValue<short[]>(int16Array)), ((ValueComparer<int>)((IProperty)int32).GetValueComparer()).Snapshot(source.GetCurrentValue<int>(int32)), (IEnumerable<int>)source.GetCurrentValue<int[]>(int32Array) == null ? null : (int[])((ValueComparer<IEnumerable<int>>)((IProperty)int32Array).GetValueComparer()).Snapshot((IEnumerable<int>)source.GetCurrentValue<int[]>(int32Array)), (object)source.GetCurrentValue<int[][]>(int32NestedCollection) == null ? null : (int[][])((ValueComparer<object>)((IProperty)int32NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<int[][]>(int32NestedCollection)), ((ValueComparer<long>)((IProperty)int64).GetValueComparer()).Snapshot(source.GetCurrentValue<long>(int64)), (IEnumerable<long>)source.GetCurrentValue<long[]>(int64Array) == null ? null : (long[])((ValueComparer<IEnumerable<long>>)((IProperty)int64Array).GetValueComparer()).Snapshot((IEnumerable<long>)source.GetCurrentValue<long[]>(int64Array)), (object)source.GetCurrentValue<IList<long[]>[]>(int64NestedCollection) == null ? null : (IList<long[]>[])((ValueComparer<object>)((IProperty)int64NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IList<long[]>[]>(int64NestedCollection)), ((ValueComparer<sbyte>)((IProperty)int8).GetValueComparer()).Snapshot(source.GetCurrentValue<sbyte>(int8)), (IEnumerable<sbyte>)source.GetCurrentValue<sbyte[]>(int8Array) == null ? null : (sbyte[])((ValueComparer<IEnumerable<sbyte>>)((IProperty)int8Array).GetValueComparer()).Snapshot((IEnumerable<sbyte>)source.GetCurrentValue<sbyte[]>(int8Array)), (object)source.GetCurrentValue<sbyte[][][]>(int8NestedCollection) == null ? null : (sbyte[][][])((ValueComparer<object>)((IProperty)int8NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<sbyte[][][]>(int8NestedCollection)), ((ValueComparer<int>)((IProperty)intNumberToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<int>(intNumberToBytesConverterProperty)), ((ValueComparer<int>)((IProperty)intNumberToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<int>(intNumberToStringConverterProperty)), source.GetCurrentValue<Nullable<int>>(nullIntToNullStringConverterProperty) == null ? null : ((ValueComparer<Nullable<int>>)((IProperty)nullIntToNullStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<int>>(nullIntToNullStringConverterProperty)), source.GetCurrentValue<Nullable<bool>>(nullableBool) == null ? null : ((ValueComparer<Nullable<bool>>)((IProperty)nullableBool).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<bool>>(nullableBool)), (IEnumerable<Nullable<bool>>)source.GetCurrentValue<Nullable<bool>[]>(nullableBoolArray) == null ? null : (Nullable<bool>[])((ValueComparer<IEnumerable<Nullable<bool>>>)((IProperty)nullableBoolArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<bool>>)source.GetCurrentValue<Nullable<bool>[]>(nullableBoolArray)), source.GetCurrentValue<byte[]>(nullableBytes) == null ? null : ((ValueComparer<byte[]>)((IProperty)nullableBytes).GetValueComparer()).Snapshot(source.GetCurrentValue<byte[]>(nullableBytes)), (object)source.GetCurrentValue<byte[][]>(nullableBytesArray) == null ? null : (byte[][])((ValueComparer<object>)((IProperty)nullableBytesArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<byte[][]>(nullableBytesArray)), (object)source.GetCurrentValue<byte[][][]>(nullableBytesNestedCollection) == null ? null : (byte[][][])((ValueComparer<object>)((IProperty)nullableBytesNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<byte[][][]>(nullableBytesNestedCollection)), source.GetCurrentValue<Nullable<char>>(nullableChar) == null ? null : ((ValueComparer<Nullable<char>>)((IProperty)nullableChar).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<char>>(nullableChar)), (IEnumerable<Nullable<char>>)source.GetCurrentValue<Nullable<char>[]>(nullableCharArray) == null ? null : (Nullable<char>[])((ValueComparer<IEnumerable<Nullable<char>>>)((IProperty)nullableCharArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<char>>)source.GetCurrentValue<Nullable<char>[]>(nullableCharArray)));
                    var entity3 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg3 = (ISnapshot)new Snapshot<Nullable<DateOnly>, Nullable<DateOnly>[], Nullable<DateTime>, Nullable<DateTime>[], Nullable<decimal>, Nullable<decimal>[], Nullable<double>, Nullable<double>[], Nullable<CompiledModelTestBase.Enum16>, Nullable<CompiledModelTestBase.Enum16>[], Nullable<CompiledModelTestBase.Enum16>, Nullable<CompiledModelTestBase.Enum16>[], List<Nullable<CompiledModelTestBase.Enum16>>, List<Nullable<CompiledModelTestBase.Enum16>>, Nullable<CompiledModelTestBase.Enum32>, Nullable<CompiledModelTestBase.Enum32>[], Nullable<CompiledModelTestBase.Enum32>, Nullable<CompiledModelTestBase.Enum32>[], List<Nullable<CompiledModelTestBase.Enum32>>, List<Nullable<CompiledModelTestBase.Enum32>>, Nullable<CompiledModelTestBase.Enum32>[][][], Nullable<CompiledModelTestBase.Enum64>, Nullable<CompiledModelTestBase.Enum64>[], Nullable<CompiledModelTestBase.Enum64>, Nullable<CompiledModelTestBase.Enum64>[], List<Nullable<CompiledModelTestBase.Enum64>>, List<Nullable<CompiledModelTestBase.Enum64>>, Nullable<CompiledModelTestBase.Enum8>, Nullable<CompiledModelTestBase.Enum8>[], Nullable<CompiledModelTestBase.Enum8>>(source.GetCurrentValue<Nullable<DateOnly>>(nullableDateOnly) == null ? null : ((ValueComparer<Nullable<DateOnly>>)((IProperty)nullableDateOnly).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<DateOnly>>(nullableDateOnly)), (IEnumerable<Nullable<DateOnly>>)source.GetCurrentValue<Nullable<DateOnly>[]>(nullableDateOnlyArray) == null ? null : (Nullable<DateOnly>[])((ValueComparer<IEnumerable<Nullable<DateOnly>>>)((IProperty)nullableDateOnlyArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<DateOnly>>)source.GetCurrentValue<Nullable<DateOnly>[]>(nullableDateOnlyArray)), source.GetCurrentValue<Nullable<DateTime>>(nullableDateTime) == null ? null : ((ValueComparer<Nullable<DateTime>>)((IProperty)nullableDateTime).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<DateTime>>(nullableDateTime)), (IEnumerable<Nullable<DateTime>>)source.GetCurrentValue<Nullable<DateTime>[]>(nullableDateTimeArray) == null ? null : (Nullable<DateTime>[])((ValueComparer<IEnumerable<Nullable<DateTime>>>)((IProperty)nullableDateTimeArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<DateTime>>)source.GetCurrentValue<Nullable<DateTime>[]>(nullableDateTimeArray)), source.GetCurrentValue<Nullable<decimal>>(nullableDecimal) == null ? null : ((ValueComparer<Nullable<decimal>>)((IProperty)nullableDecimal).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<decimal>>(nullableDecimal)), (IEnumerable<Nullable<decimal>>)source.GetCurrentValue<Nullable<decimal>[]>(nullableDecimalArray) == null ? null : (Nullable<decimal>[])((ValueComparer<IEnumerable<Nullable<decimal>>>)((IProperty)nullableDecimalArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<decimal>>)source.GetCurrentValue<Nullable<decimal>[]>(nullableDecimalArray)), source.GetCurrentValue<Nullable<double>>(nullableDouble) == null ? null : ((ValueComparer<Nullable<double>>)((IProperty)nullableDouble).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<double>>(nullableDouble)), (IEnumerable<Nullable<double>>)source.GetCurrentValue<Nullable<double>[]>(nullableDoubleArray) == null ? null : (Nullable<double>[])((ValueComparer<IEnumerable<Nullable<double>>>)((IProperty)nullableDoubleArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<double>>)source.GetCurrentValue<Nullable<double>[]>(nullableDoubleArray)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum16>>)((IProperty)nullableEnum16).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16)), (IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16Array) == null ? null : (Nullable<CompiledModelTestBase.Enum16>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum16>>>)((IProperty)nullableEnum16Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum16>>)((IProperty)nullableEnum16AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>>(nullableEnum16AsString)), (IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.Enum16>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum16>>>)((IProperty)nullableEnum16AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum16>[]>(nullableEnum16AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum16>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum16>>>)((IProperty)nullableEnum16AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16Collection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum16>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum16>>>)((IProperty)nullableEnum16Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum16>>>(nullableEnum16Collection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum32>>)((IProperty)nullableEnum32).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32)), (IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32Array) == null ? null : (Nullable<CompiledModelTestBase.Enum32>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum32>>>)((IProperty)nullableEnum32Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum32>>)((IProperty)nullableEnum32AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>>(nullableEnum32AsString)), (IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.Enum32>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum32>>>)((IProperty)nullableEnum32AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[]>(nullableEnum32AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum32>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum32>>>)((IProperty)nullableEnum32AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32Collection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum32>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum32>>>)((IProperty)nullableEnum32Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum32>>>(nullableEnum32Collection)), (object)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[][][]>(nullableEnum32NestedCollection) == null ? null : (Nullable<CompiledModelTestBase.Enum32>[][][])((ValueComparer<object>)((IProperty)nullableEnum32NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum32>[][][]>(nullableEnum32NestedCollection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum64>>)((IProperty)nullableEnum64).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64)), (IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64Array) == null ? null : (Nullable<CompiledModelTestBase.Enum64>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum64>>>)((IProperty)nullableEnum64Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum64>>)((IProperty)nullableEnum64AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>>(nullableEnum64AsString)), (IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.Enum64>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum64>>>)((IProperty)nullableEnum64AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum64>[]>(nullableEnum64AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum64>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum64>>>)((IProperty)nullableEnum64AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64Collection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum64>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum64>>>)((IProperty)nullableEnum64Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum64>>>(nullableEnum64Collection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum8>>)((IProperty)nullableEnum8).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8)), (IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8Array) == null ? null : (Nullable<CompiledModelTestBase.Enum8>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum8>>>)((IProperty)nullableEnum8Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.Enum8>>)((IProperty)nullableEnum8AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>>(nullableEnum8AsString)));
                    var entity4 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg4 = (ISnapshot)new Snapshot<Nullable<CompiledModelTestBase.Enum8>[], List<Nullable<CompiledModelTestBase.Enum8>>, List<Nullable<CompiledModelTestBase.Enum8>>, Nullable<CompiledModelTestBase.Enum8>[][], Nullable<CompiledModelTestBase.EnumU16>, Nullable<CompiledModelTestBase.EnumU16>[], Nullable<CompiledModelTestBase.EnumU16>, Nullable<CompiledModelTestBase.EnumU16>[], List<Nullable<CompiledModelTestBase.EnumU16>>, List<Nullable<CompiledModelTestBase.EnumU16>>, Nullable<CompiledModelTestBase.EnumU32>, Nullable<CompiledModelTestBase.EnumU32>[], Nullable<CompiledModelTestBase.EnumU32>, Nullable<CompiledModelTestBase.EnumU32>[], List<Nullable<CompiledModelTestBase.EnumU32>>, List<Nullable<CompiledModelTestBase.EnumU32>>, Nullable<CompiledModelTestBase.EnumU64>, Nullable<CompiledModelTestBase.EnumU64>[], Nullable<CompiledModelTestBase.EnumU64>, Nullable<CompiledModelTestBase.EnumU64>[], List<Nullable<CompiledModelTestBase.EnumU64>>, List<Nullable<CompiledModelTestBase.EnumU64>>, Nullable<CompiledModelTestBase.EnumU64>[][], Nullable<CompiledModelTestBase.EnumU8>, Nullable<CompiledModelTestBase.EnumU8>[], Nullable<CompiledModelTestBase.EnumU8>, Nullable<CompiledModelTestBase.EnumU8>[], List<Nullable<CompiledModelTestBase.EnumU8>>, List<Nullable<CompiledModelTestBase.EnumU8>>, Nullable<float>>((IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.Enum8>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum8>>>)((IProperty)nullableEnum8AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[]>(nullableEnum8AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum8>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum8>>>)((IProperty)nullableEnum8AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8Collection) == null ? null : (List<Nullable<CompiledModelTestBase.Enum8>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.Enum8>>>)((IProperty)nullableEnum8Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.Enum8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.Enum8>>>(nullableEnum8Collection)), (object)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[][]>(nullableEnum8NestedCollection) == null ? null : (Nullable<CompiledModelTestBase.Enum8>[][])((ValueComparer<object>)((IProperty)nullableEnum8NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<CompiledModelTestBase.Enum8>[][]>(nullableEnum8NestedCollection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU16>>)((IProperty)nullableEnumU16).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16Array) == null ? null : (Nullable<CompiledModelTestBase.EnumU16>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>>)((IProperty)nullableEnumU16Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU16>>)((IProperty)nullableEnumU16AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>>(nullableEnumU16AsString)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.EnumU16>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>>)((IProperty)nullableEnumU16AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU16>[]>(nullableEnumU16AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU16>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>>)((IProperty)nullableEnumU16AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16Collection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU16>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>>)((IProperty)nullableEnumU16Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU16>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU16>>>(nullableEnumU16Collection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU32>>)((IProperty)nullableEnumU32).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32Array) == null ? null : (Nullable<CompiledModelTestBase.EnumU32>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>>)((IProperty)nullableEnumU32Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU32>>)((IProperty)nullableEnumU32AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>>(nullableEnumU32AsString)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.EnumU32>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>>)((IProperty)nullableEnumU32AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU32>[]>(nullableEnumU32AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU32>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>>)((IProperty)nullableEnumU32AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32Collection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU32>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>>)((IProperty)nullableEnumU32Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU32>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU32>>>(nullableEnumU32Collection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU64>>)((IProperty)nullableEnumU64).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64Array) == null ? null : (Nullable<CompiledModelTestBase.EnumU64>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>>)((IProperty)nullableEnumU64Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU64>>)((IProperty)nullableEnumU64AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>>(nullableEnumU64AsString)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.EnumU64>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>>)((IProperty)nullableEnumU64AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[]>(nullableEnumU64AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU64>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>>)((IProperty)nullableEnumU64AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64Collection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU64>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>>)((IProperty)nullableEnumU64Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU64>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU64>>>(nullableEnumU64Collection)), (object)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[][]>(nullableEnumU64NestedCollection) == null ? null : (Nullable<CompiledModelTestBase.EnumU64>[][])((ValueComparer<object>)((IProperty)nullableEnumU64NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU64>[][]>(nullableEnumU64NestedCollection)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU8>>)((IProperty)nullableEnumU8).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8Array) == null ? null : (Nullable<CompiledModelTestBase.EnumU8>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>>)((IProperty)nullableEnumU8Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8Array)), source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8AsString) == null ? null : ((ValueComparer<Nullable<CompiledModelTestBase.EnumU8>>)((IProperty)nullableEnumU8AsString).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>>(nullableEnumU8AsString)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8AsStringArray) == null ? null : (Nullable<CompiledModelTestBase.EnumU8>[])((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>>)((IProperty)nullableEnumU8AsStringArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<Nullable<CompiledModelTestBase.EnumU8>[]>(nullableEnumU8AsStringArray)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8AsStringCollection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU8>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>>)((IProperty)nullableEnumU8AsStringCollection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8AsStringCollection)), (IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8Collection) == null ? null : (List<Nullable<CompiledModelTestBase.EnumU8>>)((ValueComparer<IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>>)((IProperty)nullableEnumU8Collection).GetValueComparer()).Snapshot((IEnumerable<Nullable<CompiledModelTestBase.EnumU8>>)source.GetCurrentValue<List<Nullable<CompiledModelTestBase.EnumU8>>>(nullableEnumU8Collection)), source.GetCurrentValue<Nullable<float>>(nullableFloat) == null ? null : ((ValueComparer<Nullable<float>>)((IProperty)nullableFloat).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<float>>(nullableFloat)));
                    var entity5 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg5 = (ISnapshot)new Snapshot<Nullable<float>[], Nullable<Guid>, Nullable<Guid>[], Nullable<Guid>[][], IPAddress, IPAddress[], Nullable<short>, Nullable<short>[], Nullable<int>, Nullable<int>[], Nullable<int>[][], Nullable<long>, Nullable<long>[], List<Nullable<long>[][]>, Nullable<sbyte>, Nullable<sbyte>[], PhysicalAddress, PhysicalAddress[], IEnumerable<PhysicalAddress[][]>, string, string[], string[][], Nullable<TimeOnly>, Nullable<TimeOnly>[], Nullable<TimeSpan>, Nullable<TimeSpan>[], Nullable<ushort>, Nullable<ushort>[], Nullable<uint>, Nullable<uint>[]>((IEnumerable<Nullable<float>>)source.GetCurrentValue<Nullable<float>[]>(nullableFloatArray) == null ? null : (Nullable<float>[])((ValueComparer<IEnumerable<Nullable<float>>>)((IProperty)nullableFloatArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<float>>)source.GetCurrentValue<Nullable<float>[]>(nullableFloatArray)), source.GetCurrentValue<Nullable<Guid>>(nullableGuid) == null ? null : ((ValueComparer<Nullable<Guid>>)((IProperty)nullableGuid).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<Guid>>(nullableGuid)), (IEnumerable<Nullable<Guid>>)source.GetCurrentValue<Nullable<Guid>[]>(nullableGuidArray) == null ? null : (Nullable<Guid>[])((ValueComparer<IEnumerable<Nullable<Guid>>>)((IProperty)nullableGuidArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<Guid>>)source.GetCurrentValue<Nullable<Guid>[]>(nullableGuidArray)), (object)source.GetCurrentValue<Nullable<Guid>[][]>(nullableGuidNestedCollection) == null ? null : (Nullable<Guid>[][])((ValueComparer<object>)((IProperty)nullableGuidNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<Guid>[][]>(nullableGuidNestedCollection)), source.GetCurrentValue<IPAddress>(nullableIPAddress) == null ? null : ((ValueComparer<IPAddress>)((IProperty)nullableIPAddress).GetValueComparer()).Snapshot(source.GetCurrentValue<IPAddress>(nullableIPAddress)), (object)source.GetCurrentValue<IPAddress[]>(nullableIPAddressArray) == null ? null : (IPAddress[])((ValueComparer<object>)((IProperty)nullableIPAddressArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IPAddress[]>(nullableIPAddressArray)), source.GetCurrentValue<Nullable<short>>(nullableInt16) == null ? null : ((ValueComparer<Nullable<short>>)((IProperty)nullableInt16).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<short>>(nullableInt16)), (IEnumerable<Nullable<short>>)source.GetCurrentValue<Nullable<short>[]>(nullableInt16Array) == null ? null : (Nullable<short>[])((ValueComparer<IEnumerable<Nullable<short>>>)((IProperty)nullableInt16Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<short>>)source.GetCurrentValue<Nullable<short>[]>(nullableInt16Array)), source.GetCurrentValue<Nullable<int>>(nullableInt32) == null ? null : ((ValueComparer<Nullable<int>>)((IProperty)nullableInt32).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<int>>(nullableInt32)), (IEnumerable<Nullable<int>>)source.GetCurrentValue<Nullable<int>[]>(nullableInt32Array) == null ? null : (Nullable<int>[])((ValueComparer<IEnumerable<Nullable<int>>>)((IProperty)nullableInt32Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<int>>)source.GetCurrentValue<Nullable<int>[]>(nullableInt32Array)), (object)source.GetCurrentValue<Nullable<int>[][]>(nullableInt32NestedCollection) == null ? null : (Nullable<int>[][])((ValueComparer<object>)((IProperty)nullableInt32NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<int>[][]>(nullableInt32NestedCollection)), source.GetCurrentValue<Nullable<long>>(nullableInt64) == null ? null : ((ValueComparer<Nullable<long>>)((IProperty)nullableInt64).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<long>>(nullableInt64)), (IEnumerable<Nullable<long>>)source.GetCurrentValue<Nullable<long>[]>(nullableInt64Array) == null ? null : (Nullable<long>[])((ValueComparer<IEnumerable<Nullable<long>>>)((IProperty)nullableInt64Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<long>>)source.GetCurrentValue<Nullable<long>[]>(nullableInt64Array)), (object)source.GetCurrentValue<List<Nullable<long>[][]>>(nullableInt64NestedCollection) == null ? null : (List<Nullable<long>[][]>)((ValueComparer<object>)((IProperty)nullableInt64NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<List<Nullable<long>[][]>>(nullableInt64NestedCollection)), source.GetCurrentValue<Nullable<sbyte>>(nullableInt8) == null ? null : ((ValueComparer<Nullable<sbyte>>)((IProperty)nullableInt8).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<sbyte>>(nullableInt8)), (IEnumerable<Nullable<sbyte>>)source.GetCurrentValue<Nullable<sbyte>[]>(nullableInt8Array) == null ? null : (Nullable<sbyte>[])((ValueComparer<IEnumerable<Nullable<sbyte>>>)((IProperty)nullableInt8Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<sbyte>>)source.GetCurrentValue<Nullable<sbyte>[]>(nullableInt8Array)), source.GetCurrentValue<PhysicalAddress>(nullablePhysicalAddress) == null ? null : ((ValueComparer<PhysicalAddress>)((IProperty)nullablePhysicalAddress).GetValueComparer()).Snapshot(source.GetCurrentValue<PhysicalAddress>(nullablePhysicalAddress)), (object)source.GetCurrentValue<PhysicalAddress[]>(nullablePhysicalAddressArray) == null ? null : (PhysicalAddress[])((ValueComparer<object>)((IProperty)nullablePhysicalAddressArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<PhysicalAddress[]>(nullablePhysicalAddressArray)), (object)source.GetCurrentValue<IEnumerable<PhysicalAddress[][]>>(nullablePhysicalAddressNestedCollection) == null ? null : (IEnumerable<PhysicalAddress[][]>)((ValueComparer<object>)((IProperty)nullablePhysicalAddressNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<IEnumerable<PhysicalAddress[][]>>(nullablePhysicalAddressNestedCollection)), source.GetCurrentValue<string>(nullableString) == null ? null : ((ValueComparer<string>)((IProperty)nullableString).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(nullableString)), (object)source.GetCurrentValue<string[]>(nullableStringArray) == null ? null : (string[])((ValueComparer<object>)((IProperty)nullableStringArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<string[]>(nullableStringArray)), (object)source.GetCurrentValue<string[][]>(nullableStringNestedCollection) == null ? null : (string[][])((ValueComparer<object>)((IProperty)nullableStringNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<string[][]>(nullableStringNestedCollection)), source.GetCurrentValue<Nullable<TimeOnly>>(nullableTimeOnly) == null ? null : ((ValueComparer<Nullable<TimeOnly>>)((IProperty)nullableTimeOnly).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<TimeOnly>>(nullableTimeOnly)), (IEnumerable<Nullable<TimeOnly>>)source.GetCurrentValue<Nullable<TimeOnly>[]>(nullableTimeOnlyArray) == null ? null : (Nullable<TimeOnly>[])((ValueComparer<IEnumerable<Nullable<TimeOnly>>>)((IProperty)nullableTimeOnlyArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<TimeOnly>>)source.GetCurrentValue<Nullable<TimeOnly>[]>(nullableTimeOnlyArray)), source.GetCurrentValue<Nullable<TimeSpan>>(nullableTimeSpan) == null ? null : ((ValueComparer<Nullable<TimeSpan>>)((IProperty)nullableTimeSpan).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<TimeSpan>>(nullableTimeSpan)), (IEnumerable<Nullable<TimeSpan>>)source.GetCurrentValue<Nullable<TimeSpan>[]>(nullableTimeSpanArray) == null ? null : (Nullable<TimeSpan>[])((ValueComparer<IEnumerable<Nullable<TimeSpan>>>)((IProperty)nullableTimeSpanArray).GetValueComparer()).Snapshot((IEnumerable<Nullable<TimeSpan>>)source.GetCurrentValue<Nullable<TimeSpan>[]>(nullableTimeSpanArray)), source.GetCurrentValue<Nullable<ushort>>(nullableUInt16) == null ? null : ((ValueComparer<Nullable<ushort>>)((IProperty)nullableUInt16).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<ushort>>(nullableUInt16)), (IEnumerable<Nullable<ushort>>)source.GetCurrentValue<Nullable<ushort>[]>(nullableUInt16Array) == null ? null : (Nullable<ushort>[])((ValueComparer<IEnumerable<Nullable<ushort>>>)((IProperty)nullableUInt16Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<ushort>>)source.GetCurrentValue<Nullable<ushort>[]>(nullableUInt16Array)), source.GetCurrentValue<Nullable<uint>>(nullableUInt32) == null ? null : ((ValueComparer<Nullable<uint>>)((IProperty)nullableUInt32).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<uint>>(nullableUInt32)), (IEnumerable<Nullable<uint>>)source.GetCurrentValue<Nullable<uint>[]>(nullableUInt32Array) == null ? null : (Nullable<uint>[])((ValueComparer<IEnumerable<Nullable<uint>>>)((IProperty)nullableUInt32Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<uint>>)source.GetCurrentValue<Nullable<uint>[]>(nullableUInt32Array)));
                    var entity6 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    var liftedArg6 = (ISnapshot)new Snapshot<Nullable<ulong>, Nullable<ulong>[], Nullable<byte>, Nullable<byte>[], Nullable<byte>[][], Uri, Uri[], PhysicalAddress, PhysicalAddress[], PhysicalAddress, PhysicalAddress, string, string[], string[][], string, string, string, string, string, string, string, string, string, string, string, string, string, string, TimeOnly, TimeOnly[]>(source.GetCurrentValue<Nullable<ulong>>(nullableUInt64) == null ? null : ((ValueComparer<Nullable<ulong>>)((IProperty)nullableUInt64).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<ulong>>(nullableUInt64)), (IEnumerable<Nullable<ulong>>)source.GetCurrentValue<Nullable<ulong>[]>(nullableUInt64Array) == null ? null : (Nullable<ulong>[])((ValueComparer<IEnumerable<Nullable<ulong>>>)((IProperty)nullableUInt64Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<ulong>>)source.GetCurrentValue<Nullable<ulong>[]>(nullableUInt64Array)), source.GetCurrentValue<Nullable<byte>>(nullableUInt8) == null ? null : ((ValueComparer<Nullable<byte>>)((IProperty)nullableUInt8).GetValueComparer()).Snapshot(source.GetCurrentValue<Nullable<byte>>(nullableUInt8)), (IEnumerable<Nullable<byte>>)source.GetCurrentValue<Nullable<byte>[]>(nullableUInt8Array) == null ? null : (Nullable<byte>[])((ValueComparer<IEnumerable<Nullable<byte>>>)((IProperty)nullableUInt8Array).GetValueComparer()).Snapshot((IEnumerable<Nullable<byte>>)source.GetCurrentValue<Nullable<byte>[]>(nullableUInt8Array)), (object)source.GetCurrentValue<Nullable<byte>[][]>(nullableUInt8NestedCollection) == null ? null : (Nullable<byte>[][])((ValueComparer<object>)((IProperty)nullableUInt8NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Nullable<byte>[][]>(nullableUInt8NestedCollection)), source.GetCurrentValue<Uri>(nullableUri) == null ? null : ((ValueComparer<Uri>)((IProperty)nullableUri).GetValueComparer()).Snapshot(source.GetCurrentValue<Uri>(nullableUri)), (object)source.GetCurrentValue<Uri[]>(nullableUriArray) == null ? null : (Uri[])((ValueComparer<object>)((IProperty)nullableUriArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Uri[]>(nullableUriArray)), source.GetCurrentValue<PhysicalAddress>(physicalAddress) == null ? null : ((ValueComparer<PhysicalAddress>)((IProperty)physicalAddress).GetValueComparer()).Snapshot(source.GetCurrentValue<PhysicalAddress>(physicalAddress)), (object)source.GetCurrentValue<PhysicalAddress[]>(physicalAddressArray) == null ? null : (PhysicalAddress[])((ValueComparer<object>)((IProperty)physicalAddressArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<PhysicalAddress[]>(physicalAddressArray)), source.GetCurrentValue<PhysicalAddress>(physicalAddressToBytesConverterProperty) == null ? null : ((ValueComparer<PhysicalAddress>)((IProperty)physicalAddressToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<PhysicalAddress>(physicalAddressToBytesConverterProperty)), source.GetCurrentValue<PhysicalAddress>(physicalAddressToStringConverterProperty) == null ? null : ((ValueComparer<PhysicalAddress>)((IProperty)physicalAddressToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<PhysicalAddress>(physicalAddressToStringConverterProperty)), source.GetCurrentValue<string>(@string) == null ? null : ((ValueComparer<string>)((IProperty)@string).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(@string)), (object)source.GetCurrentValue<string[]>(stringArray) == null ? null : (string[])((ValueComparer<object>)((IProperty)stringArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<string[]>(stringArray)), (object)source.GetCurrentValue<string[][]>(stringNestedCollection) == null ? null : (string[][])((ValueComparer<object>)((IProperty)stringNestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<string[][]>(stringNestedCollection)), source.GetCurrentValue<string>(stringToBoolConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToBoolConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToBoolConverterProperty)), source.GetCurrentValue<string>(stringToBytesConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToBytesConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToBytesConverterProperty)), source.GetCurrentValue<string>(stringToCharConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToCharConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToCharConverterProperty)), source.GetCurrentValue<string>(stringToDateOnlyConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToDateOnlyConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToDateOnlyConverterProperty)), source.GetCurrentValue<string>(stringToDateTimeConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToDateTimeConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToDateTimeConverterProperty)), source.GetCurrentValue<string>(stringToDateTimeOffsetConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToDateTimeOffsetConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToDateTimeOffsetConverterProperty)), source.GetCurrentValue<string>(stringToDecimalNumberConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToDecimalNumberConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToDecimalNumberConverterProperty)), source.GetCurrentValue<string>(stringToDoubleNumberConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToDoubleNumberConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToDoubleNumberConverterProperty)), source.GetCurrentValue<string>(stringToEnumConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToEnumConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToEnumConverterProperty)), source.GetCurrentValue<string>(stringToGuidConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToGuidConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToGuidConverterProperty)), source.GetCurrentValue<string>(stringToIntNumberConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToIntNumberConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToIntNumberConverterProperty)), source.GetCurrentValue<string>(stringToTimeOnlyConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToTimeOnlyConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToTimeOnlyConverterProperty)), source.GetCurrentValue<string>(stringToTimeSpanConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToTimeSpanConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToTimeSpanConverterProperty)), source.GetCurrentValue<string>(stringToUriConverterProperty) == null ? null : ((ValueComparer<string>)((IProperty)stringToUriConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<string>(stringToUriConverterProperty)), ((ValueComparer<TimeOnly>)((IProperty)timeOnly).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeOnly>(timeOnly)), (IEnumerable<TimeOnly>)source.GetCurrentValue<TimeOnly[]>(timeOnlyArray) == null ? null : (TimeOnly[])((ValueComparer<IEnumerable<TimeOnly>>)((IProperty)timeOnlyArray).GetValueComparer()).Snapshot((IEnumerable<TimeOnly>)source.GetCurrentValue<TimeOnly[]>(timeOnlyArray)));
                    var entity7 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    return (ISnapshot)new MultiSnapshot(new ISnapshot[] { liftedArg, liftedArg0, liftedArg1, liftedArg2, liftedArg3, liftedArg4, liftedArg5, liftedArg6, (ISnapshot)new Snapshot<TimeOnly, TimeOnly, TimeSpan, TimeSpan[], TimeSpan, TimeSpan, ushort, ushort[], uint, uint[], ulong, ulong[], byte, byte[], List<byte[]>, Uri, Uri[], Uri>(((ValueComparer<TimeOnly>)((IProperty)timeOnlyToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeOnly>(timeOnlyToStringConverterProperty)), ((ValueComparer<TimeOnly>)((IProperty)timeOnlyToTicksConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeOnly>(timeOnlyToTicksConverterProperty)), ((ValueComparer<TimeSpan>)((IProperty)timeSpan).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeSpan>(timeSpan)), (IEnumerable<TimeSpan>)source.GetCurrentValue<TimeSpan[]>(timeSpanArray) == null ? null : (TimeSpan[])((ValueComparer<IEnumerable<TimeSpan>>)((IProperty)timeSpanArray).GetValueComparer()).Snapshot((IEnumerable<TimeSpan>)source.GetCurrentValue<TimeSpan[]>(timeSpanArray)), ((ValueComparer<TimeSpan>)((IProperty)timeSpanToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeSpan>(timeSpanToStringConverterProperty)), ((ValueComparer<TimeSpan>)((IProperty)timeSpanToTicksConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<TimeSpan>(timeSpanToTicksConverterProperty)), ((ValueComparer<ushort>)((IProperty)uInt16).GetValueComparer()).Snapshot(source.GetCurrentValue<ushort>(uInt16)), (IEnumerable<ushort>)source.GetCurrentValue<ushort[]>(uInt16Array) == null ? null : (ushort[])((ValueComparer<IEnumerable<ushort>>)((IProperty)uInt16Array).GetValueComparer()).Snapshot((IEnumerable<ushort>)source.GetCurrentValue<ushort[]>(uInt16Array)), ((ValueComparer<uint>)((IProperty)uInt32).GetValueComparer()).Snapshot(source.GetCurrentValue<uint>(uInt32)), (IEnumerable<uint>)source.GetCurrentValue<uint[]>(uInt32Array) == null ? null : (uint[])((ValueComparer<IEnumerable<uint>>)((IProperty)uInt32Array).GetValueComparer()).Snapshot((IEnumerable<uint>)source.GetCurrentValue<uint[]>(uInt32Array)), ((ValueComparer<ulong>)((IProperty)uInt64).GetValueComparer()).Snapshot(source.GetCurrentValue<ulong>(uInt64)), (IEnumerable<ulong>)source.GetCurrentValue<ulong[]>(uInt64Array) == null ? null : (ulong[])((ValueComparer<IEnumerable<ulong>>)((IProperty)uInt64Array).GetValueComparer()).Snapshot((IEnumerable<ulong>)source.GetCurrentValue<ulong[]>(uInt64Array)), ((ValueComparer<byte>)((IProperty)uInt8).GetValueComparer()).Snapshot(source.GetCurrentValue<byte>(uInt8)), source.GetCurrentValue<byte[]>(uInt8Array) == null ? null : ((ValueComparer<byte[]>)((IProperty)uInt8Array).GetValueComparer()).Snapshot(source.GetCurrentValue<byte[]>(uInt8Array)), (object)source.GetCurrentValue<List<byte[]>>(uInt8NestedCollection) == null ? null : (List<byte[]>)((ValueComparer<object>)((IProperty)uInt8NestedCollection).GetValueComparer()).Snapshot((object)source.GetCurrentValue<List<byte[]>>(uInt8NestedCollection)), source.GetCurrentValue<Uri>(uri) == null ? null : ((ValueComparer<Uri>)((IProperty)uri).GetValueComparer()).Snapshot(source.GetCurrentValue<Uri>(uri)), (object)source.GetCurrentValue<Uri[]>(uriArray) == null ? null : (Uri[])((ValueComparer<object>)((IProperty)uriArray).GetValueComparer()).Snapshot((object)source.GetCurrentValue<Uri[]>(uriArray)), source.GetCurrentValue<Uri>(uriToStringConverterProperty) == null ? null : ((ValueComparer<Uri>)((IProperty)uriToStringConverterProperty).GetValueComparer()).Snapshot(source.GetCurrentValue<Uri>(uriToStringConverterProperty))) });
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                () => (ISnapshot)new Snapshot<CompiledModelTestBase.ManyTypesId>(((ValueComparer<CompiledModelTestBase.ManyTypesId>)((IProperty)id).GetValueComparer()).Snapshot(default(CompiledModelTestBase.ManyTypesId))));
            runtimeEntityType.SetTemporaryValuesFactory(
                (InternalEntityEntry source) => (ISnapshot)new Snapshot<CompiledModelTestBase.ManyTypesId>(default(CompiledModelTestBase.ManyTypesId)));
            runtimeEntityType.SetShadowValuesFactory(
                (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                (InternalEntityEntry source) =>
                {
                    var entity8 = (CompiledModelTestBase.ManyTypes)source.Entity;
                    return (ISnapshot)new Snapshot<CompiledModelTestBase.ManyTypesId>(((ValueComparer<CompiledModelTestBase.ManyTypesId>)((IProperty)id).GetKeyValueComparer()).Snapshot(source.GetCurrentValue<CompiledModelTestBase.ManyTypesId>(id)));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 258,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 258,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 1);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ManyTypes");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        public static extern ref CompiledModelTestBase.ManyTypesId UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Id(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Bool>k__BackingField")]
        public static extern ref bool UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bool(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BoolArray>k__BackingField")]
        public static extern ref bool[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BoolNestedCollection>k__BackingField")]
        public static extern ref bool[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BoolToStringConverterProperty>k__BackingField")]
        public static extern ref bool UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BoolToTwoValuesConverterProperty>k__BackingField")]
        public static extern ref bool UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToTwoValuesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BoolToZeroOneConverterProperty>k__BackingField")]
        public static extern ref bool UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BoolToZeroOneConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Bytes>k__BackingField")]
        public static extern ref byte[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Bytes(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BytesArray>k__BackingField")]
        public static extern ref byte[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BytesNestedCollection>k__BackingField")]
        public static extern ref byte[][][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<BytesToStringConverterProperty>k__BackingField")]
        public static extern ref byte[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_BytesToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<CastingConverterProperty>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CastingConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Char>k__BackingField")]
        public static extern ref char UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Char(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<CharArray>k__BackingField")]
        public static extern ref char[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<CharNestedCollection>k__BackingField")]
        public static extern ref char[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<CharToStringConverterProperty>k__BackingField")]
        public static extern ref char UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_CharToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateOnly>k__BackingField")]
        public static extern ref DateOnly UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnly(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateOnlyArray>k__BackingField")]
        public static extern ref DateOnly[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateOnlyToStringConverterProperty>k__BackingField")]
        public static extern ref DateOnly UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateOnlyToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTime>k__BackingField")]
        public static extern ref DateTime UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTime(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeArray>k__BackingField")]
        public static extern ref DateTime[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeOffsetToBinaryConverterProperty>k__BackingField")]
        public static extern ref DateTimeOffset UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBinaryConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeOffsetToBytesConverterProperty>k__BackingField")]
        public static extern ref DateTimeOffset UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeOffsetToStringConverterProperty>k__BackingField")]
        public static extern ref DateTimeOffset UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeOffsetToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeToBinaryConverterProperty>k__BackingField")]
        public static extern ref DateTime UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToBinaryConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeToStringConverterProperty>k__BackingField")]
        public static extern ref DateTime UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DateTimeToTicksConverterProperty>k__BackingField")]
        public static extern ref DateTime UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DateTimeToTicksConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Decimal>k__BackingField")]
        public static extern ref decimal UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Decimal(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DecimalArray>k__BackingField")]
        public static extern ref decimal[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DecimalNumberToBytesConverterProperty>k__BackingField")]
        public static extern ref decimal UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DecimalNumberToStringConverterProperty>k__BackingField")]
        public static extern ref decimal UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DecimalNumberToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Double>k__BackingField")]
        public static extern ref double UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Double(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DoubleArray>k__BackingField")]
        public static extern ref double[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DoubleNumberToBytesConverterProperty>k__BackingField")]
        public static extern ref double UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<DoubleNumberToStringConverterProperty>k__BackingField")]
        public static extern ref double UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_DoubleNumberToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum16> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum16Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum16> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum16Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum32> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum32> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum32NestedCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum32>[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum32NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum64> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum64Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum64> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum64Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum8> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum8> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Enum8NestedCollection>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Enum8NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumToNumberConverterProperty>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToNumberConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumToStringConverterProperty>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU16> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU16Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU16> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU16Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU32> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU32Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU32> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU32Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU64> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU64> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU64NestedCollection>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU64NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8 UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU8> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<EnumU8Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU8> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_EnumU8Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Float>k__BackingField")]
        public static extern ref float UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Float(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<FloatArray>k__BackingField")]
        public static extern ref float[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_FloatArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Guid>k__BackingField")]
        public static extern ref Guid UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Guid(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<GuidArray>k__BackingField")]
        public static extern ref Guid[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<GuidNestedCollection>k__BackingField")]
        public static extern ref ICollection<Guid[][]> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<GuidToBytesConverterProperty>k__BackingField")]
        public static extern ref Guid UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<GuidToStringConverterProperty>k__BackingField")]
        public static extern ref Guid UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_GuidToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IPAddress>k__BackingField")]
        public static extern ref IPAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddress(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IPAddressArray>k__BackingField")]
        public static extern ref IPAddress[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IPAddressToBytesConverterProperty>k__BackingField")]
        public static extern ref IPAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IPAddressToStringConverterProperty>k__BackingField")]
        public static extern ref IPAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IPAddressToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int16>k__BackingField")]
        public static extern ref short UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int16Array>k__BackingField")]
        public static extern ref short[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int32>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int32Array>k__BackingField")]
        public static extern ref int[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int32NestedCollection>k__BackingField")]
        public static extern ref int[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int32NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int64>k__BackingField")]
        public static extern ref long UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int64Array>k__BackingField")]
        public static extern ref long[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int64NestedCollection>k__BackingField")]
        public static extern ref IList<long[]>[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int64NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int8>k__BackingField")]
        public static extern ref sbyte UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int8Array>k__BackingField")]
        public static extern ref sbyte[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Int8NestedCollection>k__BackingField")]
        public static extern ref sbyte[][][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Int8NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IntNumberToBytesConverterProperty>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<IntNumberToStringConverterProperty>k__BackingField")]
        public static extern ref int UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_IntNumberToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullIntToNullStringConverterProperty>k__BackingField")]
        public static extern ref int? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullIntToNullStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableBool>k__BackingField")]
        public static extern ref bool? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBool(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableBoolArray>k__BackingField")]
        public static extern ref bool?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBoolArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableBytes>k__BackingField")]
        public static extern ref byte[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytes(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableBytesArray>k__BackingField")]
        public static extern ref byte[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableBytesNestedCollection>k__BackingField")]
        public static extern ref byte[][][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableBytesNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableChar>k__BackingField")]
        public static extern ref char? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableChar(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableCharArray>k__BackingField")]
        public static extern ref char?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableCharArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDateOnly>k__BackingField")]
        public static extern ref DateOnly? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnly(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDateOnlyArray>k__BackingField")]
        public static extern ref DateOnly?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateOnlyArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDateTime>k__BackingField")]
        public static extern ref DateTime? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTime(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDateTimeArray>k__BackingField")]
        public static extern ref DateTime?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDateTimeArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDecimal>k__BackingField")]
        public static extern ref decimal? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimal(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDecimalArray>k__BackingField")]
        public static extern ref decimal?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDecimalArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDouble>k__BackingField")]
        public static extern ref double? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDouble(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableDoubleArray>k__BackingField")]
        public static extern ref double?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableDoubleArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum16?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum16?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum16Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum16?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum16Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum32?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum32?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum32NestedCollection>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum32?[][][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum32NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum64?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum64?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum64Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum64?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum64Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum8?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.Enum8?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnum8NestedCollection>k__BackingField")]
        public static extern ref CompiledModelTestBase.Enum8?[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnum8NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU16?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU16?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU16Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU16?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU16Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU32?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU32?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU32Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU32?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU32Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU64?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU64?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU64NestedCollection>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU64?[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU64NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8Array>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8AsString>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8AsStringArray>k__BackingField")]
        public static extern ref CompiledModelTestBase.EnumU8?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8AsStringCollection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU8?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8AsStringCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableEnumU8Collection>k__BackingField")]
        public static extern ref List<CompiledModelTestBase.EnumU8?> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableEnumU8Collection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableFloat>k__BackingField")]
        public static extern ref float? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloat(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableFloatArray>k__BackingField")]
        public static extern ref float?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableFloatArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableGuid>k__BackingField")]
        public static extern ref Guid? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuid(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableGuidArray>k__BackingField")]
        public static extern ref Guid?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableGuidNestedCollection>k__BackingField")]
        public static extern ref Guid?[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableGuidNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableIPAddress>k__BackingField")]
        public static extern ref IPAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddress(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableIPAddressArray>k__BackingField")]
        public static extern ref IPAddress[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableIPAddressArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt16>k__BackingField")]
        public static extern ref short? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt16Array>k__BackingField")]
        public static extern ref short?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt32>k__BackingField")]
        public static extern ref int? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt32Array>k__BackingField")]
        public static extern ref int?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt32NestedCollection>k__BackingField")]
        public static extern ref int?[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt32NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt64>k__BackingField")]
        public static extern ref long? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt64Array>k__BackingField")]
        public static extern ref long?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt64NestedCollection>k__BackingField")]
        public static extern ref List<long?[][]> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt64NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt8>k__BackingField")]
        public static extern ref sbyte? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableInt8Array>k__BackingField")]
        public static extern ref sbyte?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableInt8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullablePhysicalAddress>k__BackingField")]
        public static extern ref PhysicalAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddress(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullablePhysicalAddressArray>k__BackingField")]
        public static extern ref PhysicalAddress[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullablePhysicalAddressNestedCollection>k__BackingField")]
        public static extern ref IEnumerable<PhysicalAddress[][]> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullablePhysicalAddressNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableString>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableString(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableStringArray>k__BackingField")]
        public static extern ref string[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableStringNestedCollection>k__BackingField")]
        public static extern ref string[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableStringNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableTimeOnly>k__BackingField")]
        public static extern ref TimeOnly? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnly(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableTimeOnlyArray>k__BackingField")]
        public static extern ref TimeOnly?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeOnlyArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableTimeSpan>k__BackingField")]
        public static extern ref TimeSpan? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpan(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableTimeSpanArray>k__BackingField")]
        public static extern ref TimeSpan?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableTimeSpanArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt16>k__BackingField")]
        public static extern ref ushort? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt16Array>k__BackingField")]
        public static extern ref ushort?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt32>k__BackingField")]
        public static extern ref uint? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt32Array>k__BackingField")]
        public static extern ref uint?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt64>k__BackingField")]
        public static extern ref ulong? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt64Array>k__BackingField")]
        public static extern ref ulong?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt8>k__BackingField")]
        public static extern ref byte? UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt8Array>k__BackingField")]
        public static extern ref byte?[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUInt8NestedCollection>k__BackingField")]
        public static extern ref byte?[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUInt8NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUri>k__BackingField")]
        public static extern ref Uri UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUri(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<NullableUriArray>k__BackingField")]
        public static extern ref Uri[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_NullableUriArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhysicalAddress>k__BackingField")]
        public static extern ref PhysicalAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddress(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhysicalAddressArray>k__BackingField")]
        public static extern ref PhysicalAddress[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhysicalAddressToBytesConverterProperty>k__BackingField")]
        public static extern ref PhysicalAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<PhysicalAddressToStringConverterProperty>k__BackingField")]
        public static extern ref PhysicalAddress UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_PhysicalAddressToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<String>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_String(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringArray>k__BackingField")]
        public static extern ref string[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringNestedCollection>k__BackingField")]
        public static extern ref string[][] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringNestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToBoolConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBoolConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToBytesConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToBytesConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToCharConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToCharConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToDateOnlyConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateOnlyConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToDateTimeConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToDateTimeOffsetConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDateTimeOffsetConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToDecimalNumberConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDecimalNumberConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToDoubleNumberConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToDoubleNumberConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToEnumConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToEnumConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToGuidConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToGuidConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToIntNumberConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToIntNumberConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToTimeOnlyConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeOnlyConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToTimeSpanConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToTimeSpanConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<StringToUriConverterProperty>k__BackingField")]
        public static extern ref string UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_StringToUriConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeOnly>k__BackingField")]
        public static extern ref TimeOnly UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnly(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeOnlyArray>k__BackingField")]
        public static extern ref TimeOnly[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeOnlyToStringConverterProperty>k__BackingField")]
        public static extern ref TimeOnly UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeOnlyToTicksConverterProperty>k__BackingField")]
        public static extern ref TimeOnly UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeOnlyToTicksConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeSpan>k__BackingField")]
        public static extern ref TimeSpan UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpan(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeSpanArray>k__BackingField")]
        public static extern ref TimeSpan[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeSpanToStringConverterProperty>k__BackingField")]
        public static extern ref TimeSpan UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<TimeSpanToTicksConverterProperty>k__BackingField")]
        public static extern ref TimeSpan UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_TimeSpanToTicksConverterProperty(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt16>k__BackingField")]
        public static extern ref ushort UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt16Array>k__BackingField")]
        public static extern ref ushort[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt16Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt32>k__BackingField")]
        public static extern ref uint UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt32Array>k__BackingField")]
        public static extern ref uint[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt32Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt64>k__BackingField")]
        public static extern ref ulong UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt64Array>k__BackingField")]
        public static extern ref ulong[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt64Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt8>k__BackingField")]
        public static extern ref byte UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt8Array>k__BackingField")]
        public static extern ref byte[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8Array(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UInt8NestedCollection>k__BackingField")]
        public static extern ref List<byte[]> UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UInt8NestedCollection(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Uri>k__BackingField")]
        public static extern ref Uri UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_Uri(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UriArray>k__BackingField")]
        public static extern ref Uri[] UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriArray(CompiledModelTestBase.ManyTypes @this);

        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<UriToStringConverterProperty>k__BackingField")]
        public static extern ref Uri UnsafeAccessor_Microsoft_EntityFrameworkCore_Scaffolding_ManyTypes_UriToStringConverterProperty(CompiledModelTestBase.ManyTypes @this);
    }
}
