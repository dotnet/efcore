// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.EntityFrameworkCore.Design.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations.Design;
using Microsoft.EntityFrameworkCore.Migrations.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Design.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Xunit.Sdk;

namespace Microsoft.EntityFrameworkCore.Migrations.Design;

public class CSharpMigrationsGeneratorSqliteTest
{
    protected virtual string AddBoilerPlate(string code, bool usingSystem = false)
        => $$"""
// <auto-generated />
{{(usingSystem
    ? @"using System;
"
    : "")}}using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RootNamespace
{
    [DbContext(typeof(DbContext))]
    partial class Snapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
{{code}}
#pragma warning restore 612, 618
        }
    }
}

""";

    [ConditionalFact]
    public void Autoincrement_annotation_is_replaced_by_extension_method_call_in_snapshot()
    {
        Test(
            builder =>
            {
                builder.Entity<EntityWithAutoincrement>(e =>
                {
                    e.Property(p => p.Id).UseAutoincrement();
                });
            },
            AddBoilerPlate(
                """
                        modelBuilder.HasAnnotation("ProductVersion", "10.0.0");

                        modelBuilder.Entity("Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorSqliteTest+EntityWithAutoincrement", b =>
                            {
                                b.Property<int>("Id")
                                    .ValueGeneratedOnAdd()
                                    .HasColumnType("INTEGER");

                                SqlitePropertyBuilderExtensions.UseAutoincrement(b.Property<int>("Id"));

                                b.HasKey("Id");

                                b.ToTable("EntityWithAutoincrement");
                            });
                """),
            model =>
            {
                var entity = model.FindEntityType(typeof(EntityWithAutoincrement));
                var property = entity!.FindProperty("Id");
                Assert.Equal(SqliteValueGenerationStrategy.Autoincrement, property!.GetValueGenerationStrategy());
            });
    }

    [ConditionalFact]
    public void Autoincrement_works_with_value_converter_to_int()
    {
        Test(
            builder =>
            {
                builder.Entity<EntityWithConverterPk>(e =>
                {
                    e.Property(p => p.Id).HasConversion<int>().UseAutoincrement();
                });
            },
            AddBoilerPlate(
                """
                        modelBuilder.HasAnnotation("ProductVersion", "10.0.0");

                        modelBuilder.Entity("Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorSqliteTest+EntityWithConverterPk", b =>
                            {
                                b.Property<long>("Id")
                                    .ValueGeneratedOnAdd()
                                    .HasColumnType("INTEGER")
                                    .HasConversion<int>();

                                SqlitePropertyBuilderExtensions.UseAutoincrement(b.Property<long>("Id"));

                                b.HasKey("Id");

                                b.ToTable("EntityWithConverterPk");
                            });
                """),
            model =>
            {
                var entity = model.FindEntityType(typeof(EntityWithConverterPk));
                var property = entity!.FindProperty("Id");
                Assert.Equal(SqliteValueGenerationStrategy.Autoincrement, property!.GetValueGenerationStrategy());
            });
    }

    [ConditionalFact]
    public void No_autoincrement_annotation_generated_for_non_autoincrement_property()
    {
        Test(
            builder =>
            {
                builder.Entity<EntityWithAutoincrement>(e =>
                {
                    e.Property(p => p.Id).ValueGeneratedNever();
                });
            },
            AddBoilerPlate(
                """
                        modelBuilder.HasAnnotation("ProductVersion", "10.0.0");

                        modelBuilder.Entity("Microsoft.EntityFrameworkCore.Migrations.Design.CSharpMigrationsGeneratorSqliteTest+EntityWithAutoincrement", b =>
                            {
                                b.Property<int>("Id")
                                    .ValueGeneratedNever()
                                    .HasColumnType("INTEGER");

                                b.HasKey("Id");

                                b.ToTable("EntityWithAutoincrement");
                            });
                """),
            model =>
            {
                var entity = model.FindEntityType(typeof(EntityWithAutoincrement));
                var property = entity!.FindProperty("Id");
                Assert.Equal(SqliteValueGenerationStrategy.None, property!.GetValueGenerationStrategy());
            });
    }

    protected void Test(Action<ModelBuilder> buildModel, string expectedCode, Action<IModel> assert)
        => Test(buildModel, expectedCode, (m, _) => assert(m));

    protected void Test(Action<ModelBuilder> buildModel, string expectedCode, Action<IModel, IModel> assert, bool validate = false)
    {
        var modelBuilder = CreateConventionalModelBuilder();
        modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
        buildModel(modelBuilder);

        var model = modelBuilder.FinalizeModel(designTime: true, skipValidation: !validate);

        Test(model, expectedCode, assert);
    }

    protected void Test(IModel model, string expectedCode, Action<IModel, IModel> assert)
    {
        var generator = CreateMigrationsGenerator();
        var code = generator.GenerateSnapshot("RootNamespace", typeof(DbContext), "Snapshot", model);

        var modelFromSnapshot = BuildModelFromSnapshotSource(code);
        assert(modelFromSnapshot, model);

        try
        {
            Assert.Equal(expectedCode, code, ignoreLineEndingDifferences: true);
        }
        catch (EqualException e)
        {
            throw new Exception(e.Message + Environment.NewLine + Environment.NewLine + "-- Actual code:" + Environment.NewLine + code);
        }
    }

    protected SqliteTestHelpers.TestModelBuilder CreateConventionalModelBuilder()
        => SqliteTestHelpers.Instance.CreateConventionBuilder();

    protected CSharpMigrationsGenerator CreateMigrationsGenerator()
    {
        var sqliteTypeMappingSource = new SqliteTypeMappingSource(
            TestServiceFactory.Instance.Create<TypeMappingSourceDependencies>(),
            TestServiceFactory.Instance.Create<RelationalTypeMappingSourceDependencies>(),
            new SqliteSingletonOptions());

        var codeHelper = new CSharpHelper(sqliteTypeMappingSource);

        var sqliteAnnotationCodeGenerator = new SqliteAnnotationCodeGenerator(
            new AnnotationCodeGeneratorDependencies(sqliteTypeMappingSource));

        var generator = new CSharpMigrationsGenerator(
            new MigrationsCodeGeneratorDependencies(
                sqliteTypeMappingSource,
                sqliteAnnotationCodeGenerator),
            new CSharpMigrationsGeneratorDependencies(
                codeHelper,
                new CSharpMigrationOperationGenerator(
                    new CSharpMigrationOperationGeneratorDependencies(
                        codeHelper)),
                new CSharpSnapshotGenerator(
                    new CSharpSnapshotGeneratorDependencies(
                        codeHelper, sqliteTypeMappingSource, sqliteAnnotationCodeGenerator))));

        return generator;
    }

    protected IModel BuildModelFromSnapshotSource(string code)
    {
        var compilation = CSharpCompilation.Create(
            nameof(BuildModelFromSnapshotSource),
            [CSharpSyntaxTree.ParseText(code)],
            BuildReferences(),
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        var assembly = compilation.EmitToImageReference();

        var snapshotType = assembly.GetType("RootNamespace.Snapshot");
        var snapshot = (ModelSnapshot)Activator.CreateInstance(snapshotType)!;

        var modelBuilder = CreateConventionalModelBuilder();
        snapshot.BuildModel(modelBuilder);
        return modelBuilder.FinalizeModel(designTime: true);
    }

    protected IEnumerable<MetadataReference> BuildReferences()
        => [.. TestHelpers.GetReferenceAssemblies(), .. TestHelpers.GetProviderReferenceAssemblies()];

    protected TestHelpers TestHelpers
        => SqliteTestHelpers.Instance;

    private class EntityWithAutoincrement
    {
        public int Id { get; set; }
    }

    private class EntityWithConverterPk
    {
        public long Id { get; set; }
    }
}