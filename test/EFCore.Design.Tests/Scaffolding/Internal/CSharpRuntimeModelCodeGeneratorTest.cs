// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.InMemory.Storage.Internal;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
using Microsoft.EntityFrameworkCore.Sqlite.Design.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Design.Internal;
using Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Microsoft.EntityFrameworkCore.ValueGeneration.Internal;
using Microsoft.Extensions.DependencyInjection;
using NetTopologySuite;
using NetTopologySuite.Geometries;
using Newtonsoft.Json.Linq;
using Xunit;

namespace Microsoft.EntityFrameworkCore.Scaffolding.Internal
{
    public class CSharpRuntimeModelCodeGeneratorTest
    {
        [ConditionalFact]
        public void Empty_model()
        {
            Test(
                new EmptyContext(),
                new CompiledModelCodeGenerationOptions(),
                code =>
                    Assert.Collection(code,
                    c => AssertFileContents(
                    "EmptyContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.EmptyContext))]
    partial class EmptyContextModel : RuntimeModel
    {
        private static EmptyContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new EmptyContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                        c),
                    c => AssertFileContents(
                    "EmptyContextModelBuilder.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class EmptyContextModel
    {
        partial void Initialize()
        {
        }
    }
}
",
                        c)),
                model => {
                    Assert.Empty(model.GetEntityTypes());
                    Assert.Same(model, model.FindRuntimeAnnotationValue("ReadOnlyModel"));
                });
        }

        public class EmptyContext : ContextBase
        {
        }

        [ConditionalFact]
        public void Global_namespace_works()
        {
            Test(
                new GlobalNamespaceContext(),
                new CompiledModelCodeGenerationOptions
                {
                    ModelNamespace = string.Empty
                },
                code =>
                {
                    Assert.All(code, f => Assert.DoesNotContain("namespace ", f.Code));
                },
                model =>
                {
                    Assert.NotNull(model.FindEntityType("1"));
                });
        }

        public class GlobalNamespaceContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("1", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_constructor_binding()
        {
            Test(
                new LazyLoadingProxiesContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelConstructorBinding("Lazy", "Customize()", "LazyEntityType"));
        }

        public class LazyLoadingProxiesContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("Lazy", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                });
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => base.OnConfiguring(options.UseLazyLoadingProxies());
        }

        [ConditionalFact]
        public void Manual_lazy_loading()
        {
            Test(
                new LazyLoadingContext(),
                new CompiledModelCodeGenerationOptions(),
                assertModel: model =>
                {
                    var lazyConstructorEntity = model.FindEntityType(typeof(LazyConstructorEntity));
                    var lazyParameterBinding = lazyConstructorEntity.ConstructorBinding.ParameterBindings.Single();
                    Assert.Equal(typeof(ILazyLoader), lazyParameterBinding.ParameterType);
                    var lazyPropertyEntity = model.FindEntityType(typeof(LazyPropertyEntity));
                    var lazyServiceProperty = lazyPropertyEntity.GetServiceProperties().Single();
                    Assert.Equal(typeof(ILazyLoader), lazyServiceProperty.ClrType);
                });
        }

        public class LazyLoadingContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity<LazyConstructorEntity>();
            }
        }

        public class LazyConstructorEntity
        {
            private readonly ILazyLoader _loader;

            public LazyConstructorEntity(ILazyLoader loader)
            {
                _loader = loader;
            }

            public int Id { get; set; }

            public LazyPropertyEntity LazyPropertyEntity { get; set; }
        }

        public class LazyPropertyEntity
        {
            public ILazyLoader Loader { get; set; }

            public LazyPropertyEntity()
            {
            }

            public int Id { get; set; }
            public int LazyConstructorEntityId { get; set; }

            public LazyConstructorEntity LazyConstructorEntity { get; set; }
        }

        [ConditionalFact]
        public void Throws_for_query_filter()
        {
            Test(
                new QueryFilterContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelQueryFilter("QueryFilter"));
        }

        public class QueryFilterContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("QueryFilter", e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                    e.HasQueryFilter((Expression<Func<Dictionary<string, object>, bool>>)(e => e != null));
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_defining_query()
        {
            Test(
                new DefiningQueryContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelDefiningQuery("object"));
        }

        public class DefiningQueryContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity<object>(e =>
                {
                    e.Property<int>("Id");
                    e.HasKey("Id");
                    e.Metadata.SetInMemoryQuery((Expression<Func<IQueryable<object>>>)
                        (() => Set<object>()));
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_generator()
        {
            Test(
                new ValueGeneratorContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueGenerator(
                    "MyEntity", "Id", nameof(PropertyBuilder.HasValueGeneratorFactory)));
        }

        public class ValueGeneratorContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasValueGenerator((p, e) => null);
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_converter()
        {
            Test(
                new ValueConverterContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueConverter(
                    "MyEntity", "Id", nameof(PropertyBuilder.HasConversion)));
        }

        public class ValueConverterContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasConversion(i => i, i => i);
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_value_comparer()
        {
            Test(
                new ValueComparerContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelValueComparer(
                    "MyEntity", "Id", nameof(PropertyBuilder.HasConversion)));
        }

        public class ValueComparerContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").HasConversion(typeof(int), new FakeValueComparer());
                    e.HasKey("Id");
                });
            }
        }

        private class FakeValueComparer : ValueComparer<int>
        {
            public FakeValueComparer()
                : base(false)
            {
            }

            public override Type Type { get; } = typeof(int);

            public override bool Equals(object left, object right) => throw new NotImplementedException();

            public override int GetHashCode(object instance) => throw new NotImplementedException();

            public override object Snapshot(object instance) => throw new NotImplementedException();
        }

        [ConditionalFact]
        public void Throws_for_custom_type_mapping()
        {
            Test(
                new TypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: DesignStrings.CompiledModelTypeMapping(
                    "MyEntity", "Id", "Customize()", "MyEntityEntityType"));
        }

        public class TypeMappingContext : ContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity("MyEntity", e =>
                {
                    e.Property<int>("Id").Metadata.SetTypeMapping(new InMemoryTypeMapping(typeof(int[])));
                    e.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_translation()
        {
            Test(
                new FunctionTranslationContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionTranslation("GetSqlFragmentStatic"));
        }

        public class FunctionTranslationContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic()
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionTranslationContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .HasTranslation(args => new SqlFragmentExpression("NULL"));
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_type_mapping()
        {
            Test(
                new FunctionTypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionTypeMapping(
                    "GetSqlFragmentStatic", "Customize()", "FunctionTypeMappingContextModel"));
        }

        public class FunctionTypeMappingContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic(string param)
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionTypeMappingContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .Metadata.TypeMapping = new StringTypeMapping("varchar");
            }
        }

        [ConditionalFact]
        public void Throws_for_custom_function_parameter_type_mapping()
        {
            Test(
                new FunctionParameterTypeMappingContext(),
                new CompiledModelCodeGenerationOptions(),
                expectedExceptionMessage: RelationalStrings.CompiledModelFunctionParameterTypeMapping(
                    "GetSqlFragmentStatic", "param", "Customize()", "FunctionParameterTypeMappingContextModel"));
        }

        public class FunctionParameterTypeMappingContext : SqlServerContextBase
        {
            public static string GetSqlFragmentStatic(string param)
                => throw new NotImplementedException();

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(FunctionParameterTypeMappingContext).GetMethod(nameof(GetSqlFragmentStatic)))
                    .HasParameter("param").Metadata.TypeMapping = new StringTypeMapping("varchar");
            }
        }

        [ConditionalFact]
        public void BigModel()
        {
            Test(
                new BigContext(),
                new CompiledModelCodeGenerationOptions { UseNullableReferenceTypes = true },
                code =>
                    Assert.Collection(code,
                        c => AssertFileContents("BigContextModel.cs",
                        @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.BigContext))]
    partial class BigContextModel : RuntimeModel
    {
        private static BigContextModel? _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new BigContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
", c),
                        c => AssertFileContents("BigContextModelBuilder.cs",
                        @"// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class BigContextModel
    {
        partial void Initialize()
        {
            var dependentBasebyte = DependentBasebyteEntityType.Create(this);
            var principalBase = PrincipalBaseEntityType.Create(this);
            var ownedType = OwnedTypeEntityType.Create(this);
            var ownedType0 = OwnedType0EntityType.Create(this);
            var principalBasePrincipalDerivedDependentBasebyte = PrincipalBasePrincipalDerivedDependentBasebyteEntityType.Create(this);
            var dependentDerivedbyte = DependentDerivedbyteEntityType.Create(this, dependentBasebyte);
            var principalDerivedDependentBasebyte = PrincipalDerivedDependentBasebyteEntityType.Create(this, principalBase);

            DependentBasebyteEntityType.CreateForeignKey1(dependentBasebyte, principalBase);
            DependentBasebyteEntityType.CreateForeignKey2(dependentBasebyte, principalDerivedDependentBasebyte);
            OwnedTypeEntityType.CreateForeignKey1(ownedType, principalBase);
            OwnedType0EntityType.CreateForeignKey1(ownedType0, principalDerivedDependentBasebyte);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalBasePrincipalDerivedDependentBasebyte, principalDerivedDependentBasebyte);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateForeignKey2(principalBasePrincipalDerivedDependentBasebyte, principalBase);
            PrincipalDerivedDependentBasebyteEntityType.CreateForeignKey1(principalDerivedDependentBasebyte, principalBase);

            PrincipalBaseEntityType.CreateSkipNavigation1(principalBase, principalDerivedDependentBasebyte, principalBasePrincipalDerivedDependentBasebyte);
            PrincipalDerivedDependentBasebyteEntityType.CreateSkipNavigation1(principalDerivedDependentBasebyte, principalBase, principalBasePrincipalDerivedDependentBasebyte);

            DependentBasebyteEntityType.CreateAnnotations(dependentBasebyte);
            PrincipalBaseEntityType.CreateAnnotations(principalBase);
            OwnedTypeEntityType.CreateAnnotations(ownedType);
            OwnedType0EntityType.CreateAnnotations(ownedType0);
            PrincipalBasePrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalBasePrincipalDerivedDependentBasebyte);
            DependentDerivedbyteEntityType.CreateAnnotations(dependentDerivedbyte);
            PrincipalDerivedDependentBasebyteEntityType.CreateAnnotations(principalDerivedDependentBasebyte);

            AddAnnotation(""Relational:MaxIdentifierLength"", 128);
            AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);
        }
    }
}
", c),
                        c => AssertFileContents("DependentBasebyteEntityType.cs", @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class DependentBasebyteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DependentBase<byte?>"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>),
                baseEntityType,
                discriminatorProperty: ""EnumDiscriminator"");

            var principalId = runtimeEntityType.AddProperty(
                ""PrincipalId"",
                typeof(long),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var principalAlternateId = runtimeEntityType.AddProperty(
                ""PrincipalAlternateId"",
                typeof(Point),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalAlternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var enumDiscriminator = runtimeEntityType.AddProperty(
                ""EnumDiscriminator"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Discriminator),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create);
            enumDiscriminator.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(byte?),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>).GetProperty(""Id"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>).GetField(""<Id>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            id.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { principalId, principalAlternateId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { principalId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""PrincipalId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true);

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""PrincipalId"")!, declaringEntityType.FindProperty(""PrincipalAlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.ClientNoAction,
                unique: true,
                required: true);

            var principal = declaringEntityType.AddNavigation(""Principal"",
                runtimeForeignKey,
                onDependent: true,
                typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>).GetProperty(""Principal"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>).GetField(""<Principal>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var dependent = principalEntityType.AddNavigation(""Dependent"",
                runtimeForeignKey,
                onDependent: false,
                typeof(CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>).GetProperty(""Dependent"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>).GetField(""<Dependent>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""DiscriminatorValue"", CSharpRuntimeModelCodeGeneratorTest.Discriminator.Base);
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalDerived"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("PrincipalBaseEntityType.cs", @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class PrincipalBaseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+PrincipalBase"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(long?),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty(""Id"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetField(""<Id>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            var overrides = new SortedDictionary<StoreObjectIdentifier, object>();
            var idPrincipalDerived = new RuntimeRelationalPropertyOverrides(
                id,
                true,
                ""DerivedId"");
            overrides[StoreObjectIdentifier.Table(""PrincipalDerived"", null)] = idPrincipalDerived;
            id.AddAnnotation(""Relational:RelationalOverrides"", overrides);
            id.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);

            var alternateId = runtimeEntityType.AddProperty(
                ""AlternateId"",
                typeof(Point),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetField(""AlternateId"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.FieldDuringConstruction,
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueConverter: new CastingConverter<Point, Point>(),
                valueComparer: new CSharpRuntimeModelCodeGeneratorTest.CustomValueComparer<Point>());
            alternateId.AddAnnotation(""Relational:ColumnType"", ""geometry"");
            alternateId.AddAnnotation(""Relational:DefaultValue"", (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read(""SRID=0;POINT Z(0 0 0)""));
            alternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });

            var key0 = runtimeEntityType.AddKey(
                new[] { id, alternateId });
            runtimeEntityType.SetPrimaryKey(key0);
            key0.AddAnnotation(""Relational:Name"", ""PK"");

            var index = runtimeEntityType.AddIndex(
                new[] { alternateId, id });

            var alternateIndex = runtimeEntityType.AddIndex(
                new[] { alternateId },
                name: ""AlternateIndex"",
                unique: true);
            alternateIndex.AddAnnotation(""Relational:Name"", ""AIX"");

            return runtimeEntityType;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                ""Deriveds"",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty(""PrincipalsId"")!, joinEntityType.FindProperty(""PrincipalsAlternateId"")! },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty(""Id"")!, declaringEntityType.FindProperty(""AlternateId"")! })!,
                    declaringEntityType)!,
                true,
                false,
                typeof(ICollection<CSharpRuntimeModelCodeGeneratorTest.PrincipalBase>),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty(""Deriveds"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetField(""<Deriveds>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var inverse = targetEntityType.FindSkipNavigation(""Principals"");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", ""mySchema"");
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalBase"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("OwnedTypeEntityType.cs", @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class OwnedTypeEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+PrincipalBase.Owned#OwnedType"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType: true,
                changeTrackingStrategy: ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues);

            var principalBaseId = runtimeEntityType.AddProperty(
                ""PrincipalBaseId"",
                typeof(long),
                propertyAccessMode: PropertyAccessMode.Field,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalBaseId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var principalBaseAlternateId = runtimeEntityType.AddProperty(
                ""PrincipalBaseAlternateId"",
                typeof(Point),
                propertyAccessMode: PropertyAccessMode.Field,
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalBaseAlternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var context = runtimeEntityType.AddServiceProperty(
                ""Context"",
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.OwnedType).GetProperty(""Context"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { principalBaseId, principalBaseAlternateId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""PrincipalBaseId"")!, declaringEntityType.FindProperty(""PrincipalBaseAlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                unique: true,
                required: true,
                requiredDependent: true,
                ownership: true);

            var owned = principalEntityType.AddNavigation(""Owned"",
                runtimeForeignKey,
                onDependent: false,
                typeof(CSharpRuntimeModelCodeGeneratorTest.OwnedType),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetProperty(""Owned"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalBase).GetField(""_ownedField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                propertyAccessMode: PropertyAccessMode.Field,
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", ""mySchema"");
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalBase"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("OwnedType0EntityType.cs", @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class OwnedType0EntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DependentBase<byte?>>.ManyOwned#OwnedType"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.OwnedType),
                baseEntityType,
                sharedClrType: true);

            var principalDerivedDependentBasebyteId = runtimeEntityType.AddProperty(
                ""PrincipalDerived<DependentBase<byte?>>Id"",
                typeof(long),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalDerivedDependentBasebyteId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var principalDerivedDependentBasebyteAlternateId = runtimeEntityType.AddProperty(
                ""PrincipalDerived<DependentBase<byte?>>AlternateId"",
                typeof(Point),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalDerivedDependentBasebyteAlternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);

            var context = runtimeEntityType.AddServiceProperty(
                ""Context"",
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.OwnedType).GetProperty(""Context"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { principalDerivedDependentBasebyteId, principalDerivedDependentBasebyteAlternateId, id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""PrincipalDerived<DependentBase<byte?>>Id"")!, declaringEntityType.FindProperty(""PrincipalDerived<DependentBase<byte?>>AlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var manyOwned = principalEntityType.AddNavigation(""ManyOwned"",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CSharpRuntimeModelCodeGeneratorTest.OwnedType>),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>).GetField(""ManyOwned"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""ManyOwned"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);
            runtimeEntityType.AddAnnotation(""SqlServer:MemoryOptimized"", true);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("PrincipalBasePrincipalDerivedDependentBasebyteEntityType.cs", @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class PrincipalBasePrincipalDerivedDependentBasebyteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""PrincipalBasePrincipalDerived<DependentBase<byte?>>"",
                typeof(Dictionary<string, object>),
                baseEntityType,
                sharedClrType: true,
                indexerPropertyInfo: RuntimeEntityType.FindIndexerProperty(typeof(Dictionary<string, object>)),
                propertyBag: true);

            var derivedsId = runtimeEntityType.AddProperty(
                ""DerivedsId"",
                typeof(long),
                propertyInfo: runtimeEntityType.FindIndexerPropertyInfo(),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            derivedsId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var derivedsAlternateId = runtimeEntityType.AddProperty(
                ""DerivedsAlternateId"",
                typeof(Point),
                propertyInfo: runtimeEntityType.FindIndexerPropertyInfo(),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            derivedsAlternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var principalsId = runtimeEntityType.AddProperty(
                ""PrincipalsId"",
                typeof(long),
                propertyInfo: runtimeEntityType.FindIndexerPropertyInfo(),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalsId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var principalsAlternateId = runtimeEntityType.AddProperty(
                ""PrincipalsAlternateId"",
                typeof(Point),
                propertyInfo: runtimeEntityType.FindIndexerPropertyInfo(),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            principalsAlternateId.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var rowid = runtimeEntityType.AddProperty(
                ""rowid"",
                typeof(byte[]),
                propertyInfo: runtimeEntityType.FindIndexerPropertyInfo(),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            rowid.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { derivedsId, derivedsAlternateId, principalsId, principalsAlternateId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { principalsId, principalsAlternateId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""DerivedsId"")!, declaringEntityType.FindProperty(""DerivedsAlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""PrincipalsId"")!, declaringEntityType.FindProperty(""PrincipalsAlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalBasePrincipalDerived<DependentBase<byte?>>"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("DependentDerivedbyteEntityType.cs", @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class DependentDerivedbyteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DependentDerived<byte?>"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.DependentDerived<byte?>),
                baseEntityType,
                discriminatorProperty: ""EnumDiscriminator"");

            var data = runtimeEntityType.AddProperty(
                ""Data"",
                typeof(string),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentDerived<byte?>).GetProperty(""Data"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DependentDerived<byte?>).GetField(""<Data>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                maxLength: 20,
                unicode: false);
            data.AddAnnotation(""Relational:IsFixedLength"", true);
            data.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var money = runtimeEntityType.AddProperty(
                ""Money"",
                typeof(decimal),
                precision: 9,
                scale: 3);
            money.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""DiscriminatorValue"", CSharpRuntimeModelCodeGeneratorTest.Discriminator.Derived);
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalDerived"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c),
                        c => AssertFileContents("PrincipalDerivedDependentBasebyteEntityType.cs", @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable enable

namespace TestNamespace
{
    partial class PrincipalDerivedDependentBasebyteEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DependentBase<byte?>>"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>),
                baseEntityType);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty(""Id"")!, declaringEntityType.FindProperty(""AlternateId"")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty(""Id"")!, principalEntityType.FindProperty(""AlternateId"")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.ClientCascade,
                unique: true,
                required: true);

            return runtimeForeignKey;
        }

        public static RuntimeSkipNavigation CreateSkipNavigation1(RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeEntityType joinEntityType)
        {
            var skipNavigation = declaringEntityType.AddSkipNavigation(
                ""Principals"",
                targetEntityType,
                joinEntityType.FindForeignKey(
                    new[] { joinEntityType.FindProperty(""DerivedsId"")!, joinEntityType.FindProperty(""DerivedsAlternateId"")! },
                    declaringEntityType.FindKey(new[] { declaringEntityType.FindProperty(""Id"")!, declaringEntityType.FindProperty(""AlternateId"")! })!,
                    declaringEntityType)!,
                true,
                false,
                typeof(ICollection<CSharpRuntimeModelCodeGeneratorTest.PrincipalBase>),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>).GetProperty(""Principals"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.PrincipalDerived<CSharpRuntimeModelCodeGeneratorTest.DependentBase<byte?>>).GetField(""<Principals>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            var inverse = targetEntityType.FindSkipNavigation(""Deriveds"");
            if (inverse != null)
            {
                skipNavigation.Inverse = inverse;
                inverse.Inverse = skipNavigation;
            }

            return skipNavigation;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""PrincipalDerived"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
", c)),
                model =>
                {
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetCollation()).Message);
                    Assert.Null(model[RelationalAnnotationNames.Collation]);
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, model.GetValueGenerationStrategy());
                    Assert.Null(model[CoreAnnotationNames.PropertyAccessMode]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetPropertyAccessMode()).Message);
                    Assert.Null(model[SqlServerAnnotationNames.MaxDatabaseSize]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetDatabaseMaxSize()).Message);
                    Assert.Null(model[SqlServerAnnotationNames.PerformanceLevelSql]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetPerformanceLevelSql()).Message);
                    Assert.Null(model[SqlServerAnnotationNames.ServiceTierSql]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetServiceTierSql()).Message);
                    Assert.Null(model[SqlServerAnnotationNames.IdentitySeed]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetIdentitySeed()).Message);
                    Assert.Null(model[SqlServerAnnotationNames.IdentityIncrement]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => model.GetIdentityIncrement()).Message);

                    Assert.Null(model.FindEntityType(typeof(AbstractBase)));
                    var principalBase = model.FindEntityType(typeof(PrincipalBase));
                    Assert.Equal(typeof(PrincipalBase).FullName, principalBase.Name);
                    Assert.False(principalBase.HasSharedClrType);
                    Assert.False(principalBase.IsPropertyBag);
                    Assert.False(principalBase.IsOwned());
                    Assert.Null(principalBase.BaseType);
                    Assert.IsType<ConstructorBinding>(principalBase.ConstructorBinding);
                    Assert.Null(principalBase.FindIndexerPropertyInfo());
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalBase.GetChangeTrackingStrategy());
                    Assert.Null(principalBase.GetQueryFilter());
                    Assert.Equal("PrincipalBase", principalBase.GetTableName());
                    Assert.Equal("mySchema", principalBase.GetSchema());
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => principalBase.GetSeedData()).Message);

                    var principalId = principalBase.FindProperty(nameof(PrincipalBase.Id));
                    Assert.Equal(typeof(long?), principalId.ClrType);
                    Assert.Equal(typeof(long?), principalId.PropertyInfo.PropertyType);
                    Assert.Equal(typeof(long?), principalId.FieldInfo.FieldType);
                    Assert.False(principalId.IsNullable);
                    Assert.Equal(ValueGenerated.OnAdd, principalId.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Throw, principalId.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Save, principalId.GetBeforeSaveBehavior());
                    Assert.Null(principalId[CoreAnnotationNames.BeforeSaveBehavior]);
                    Assert.Null(principalId[CoreAnnotationNames.AfterSaveBehavior]);
                    Assert.Equal("Id", principalId.GetColumnBaseName());
                    Assert.Equal("Id", principalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalBase", "mySchema")));
                    Assert.Equal("DerivedId", principalId.GetColumnName(StoreObjectIdentifier.Table("PrincipalDerived")));
                    Assert.Equal("bigint", principalId.GetColumnType());
                    Assert.Null(principalId.GetValueConverter());
                    Assert.NotNull(principalId.GetValueComparer());
                    Assert.NotNull(principalId.GetKeyValueComparer());
                    Assert.Equal(SqlServerValueGenerationStrategy.IdentityColumn, principalId.GetValueGenerationStrategy());
                    Assert.Null(principalId[SqlServerAnnotationNames.IdentitySeed]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => principalId.GetIdentitySeed()).Message);
                    Assert.Null(principalId[SqlServerAnnotationNames.IdentityIncrement]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => principalId.GetIdentityIncrement()).Message);
                    Assert.Null(principalId[SqlServerAnnotationNames.Sparse]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => principalId.IsSparse()).Message);

                    var principalAlternateId = principalBase.FindProperty(nameof(PrincipalBase.AlternateId));
                    Assert.Equal(typeof(Point), principalAlternateId.ClrType);
                    Assert.False(principalAlternateId.IsNullable);
                    Assert.Equal(ValueGenerated.OnAdd, principalAlternateId.ValueGenerated);
                    Assert.Equal("AlternateId", principalAlternateId.GetColumnBaseName());
                    Assert.Equal("geometry", principalAlternateId.GetColumnType());
                    Assert.Equal(0, ((Point)principalAlternateId.GetDefaultValue()).SRID);
                    Assert.IsType<CastingConverter<Point, Point>>(principalAlternateId.GetValueConverter());
                    Assert.IsType<CustomValueComparer<Point>>(principalAlternateId.GetValueComparer());
                    Assert.IsType<CustomValueComparer<Point>>(principalAlternateId.GetKeyValueComparer());
                    Assert.Equal(SqlServerValueGenerationStrategy.None, principalAlternateId.GetValueGenerationStrategy());
                    Assert.Equal(PropertyAccessMode.FieldDuringConstruction, principalAlternateId.GetPropertyAccessMode());
                    Assert.Null(principalAlternateId[CoreAnnotationNames.PropertyAccessMode]);

                    Assert.Null(principalBase.FindDiscriminatorProperty());

                    Assert.Equal(2, principalBase.GetIndexes().Count());

                    var compositeIndex = principalBase.GetIndexes().First();
                    Assert.Equal(new[] { principalAlternateId, principalId }, compositeIndex.Properties);
                    Assert.False(compositeIndex.IsUnique);
                    Assert.Null(compositeIndex.Name);
                    Assert.Equal("IX_PrincipalBase_AlternateId_Id", compositeIndex.GetDatabaseName());
                    Assert.Null(compositeIndex[SqlServerAnnotationNames.Clustered]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => compositeIndex.IsClustered()).Message);
                    Assert.Null(compositeIndex[SqlServerAnnotationNames.CreatedOnline]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => compositeIndex.IsCreatedOnline()).Message);
                    Assert.Null(compositeIndex[SqlServerAnnotationNames.FillFactor]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => compositeIndex.GetFillFactor()).Message);
                    Assert.Null(compositeIndex[SqlServerAnnotationNames.Include]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => compositeIndex.GetIncludeProperties()).Message);

                    var alternateIndex = principalBase.GetIndexes().Last();
                    Assert.Same(principalAlternateId, alternateIndex.Properties.Single());
                    Assert.True(alternateIndex.IsUnique);
                    Assert.Equal("AlternateIndex", alternateIndex.Name);
                    Assert.Equal("AIX", alternateIndex.GetDatabaseName());
                    Assert.Null(alternateIndex[RelationalAnnotationNames.Filter]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => alternateIndex.GetFilter()).Message);

                    Assert.Equal(new[] { compositeIndex, alternateIndex }, principalAlternateId.GetContainingIndexes());

                    Assert.Equal(2, principalBase.GetKeys().Count());

                    var principalAlternateKey = principalBase.GetKeys().First();
                    Assert.Same(principalId, principalAlternateKey.Properties.Single());
                    Assert.False(principalAlternateKey.IsPrimaryKey());
                    Assert.Equal("AK_PrincipalBase_Id", principalAlternateKey.GetName());

                    var principalKey = principalBase.GetKeys().Last();
                    Assert.Equal(new[] { principalId, principalAlternateId }, principalKey.Properties);
                    Assert.True(principalKey.IsPrimaryKey());
                    Assert.Equal("PK", principalKey.GetName());
                    Assert.Null(principalKey[SqlServerAnnotationNames.Clustered]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => principalKey.IsClustered()).Message);

                    Assert.Equal(new[] { principalAlternateKey, principalKey }, principalId.GetContainingKeys());

                    var referenceOwnedNavigation = principalBase.GetNavigations().Single();
                    Assert.Equal(nameof(PrincipalBase.Owned), referenceOwnedNavigation.Name);
                    Assert.False(referenceOwnedNavigation.IsCollection);
                    Assert.True(referenceOwnedNavigation.IsEagerLoaded);
                    Assert.False(referenceOwnedNavigation.IsOnDependent);
                    Assert.Equal(typeof(OwnedType), referenceOwnedNavigation.ClrType);
                    Assert.Equal("_ownedField", referenceOwnedNavigation.FieldInfo.Name);
                    Assert.Equal(nameof(PrincipalBase.Owned), referenceOwnedNavigation.PropertyInfo.Name);
                    Assert.Null(referenceOwnedNavigation.Inverse);
                    Assert.Equal(principalBase, referenceOwnedNavigation.DeclaringEntityType);
                    Assert.Equal(PropertyAccessMode.Field, referenceOwnedNavigation.GetPropertyAccessMode());
                    Assert.Null(referenceOwnedNavigation[CoreAnnotationNames.PropertyAccessMode]);

                    var referenceOwnedType = referenceOwnedNavigation.TargetEntityType;
                    Assert.Equal(typeof(PrincipalBase).FullName + ".Owned#OwnedType", referenceOwnedType.Name);
                    Assert.Equal(typeof(OwnedType), referenceOwnedType.ClrType);
                    Assert.True(referenceOwnedType.HasSharedClrType);
                    Assert.False(referenceOwnedType.IsPropertyBag);
                    Assert.True(referenceOwnedType.IsOwned());
                    Assert.Null(referenceOwnedType.BaseType);
                    Assert.False(referenceOwnedType.IsMemoryOptimized());
                    Assert.IsType<ConstructorBinding>(referenceOwnedType.ConstructorBinding);
                    Assert.Null(referenceOwnedType.FindIndexerPropertyInfo());
                    Assert.Equal(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues, referenceOwnedType.GetChangeTrackingStrategy());
                    Assert.Null(referenceOwnedType.GetQueryFilter());
                    Assert.Null(referenceOwnedType[CoreAnnotationNames.PropertyAccessMode]);
                    Assert.Null(referenceOwnedType[CoreAnnotationNames.NavigationAccessMode]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => referenceOwnedType.GetPropertyAccessMode()).Message);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => referenceOwnedType.GetNavigationAccessMode()).Message);

                    var referenceOwnership = referenceOwnedNavigation.ForeignKey;
                    Assert.Same(referenceOwnership, referenceOwnedType.FindOwnership());
                    Assert.True(referenceOwnership.IsOwnership);
                    Assert.True(referenceOwnership.IsRequired);
                    Assert.True(referenceOwnership.IsRequiredDependent);
                    Assert.True(referenceOwnership.IsUnique);
                    Assert.Null(referenceOwnership.DependentToPrincipal);
                    Assert.Same(referenceOwnedNavigation, referenceOwnership.PrincipalToDependent);
                    Assert.Equal(DeleteBehavior.Cascade, referenceOwnership.DeleteBehavior);
                    Assert.Equal(2, referenceOwnership.Properties.Count());
                    Assert.Same(principalKey, referenceOwnership.PrincipalKey);

                    var ownedServiceProperty = referenceOwnedType.GetServiceProperties().Single();
                    Assert.Equal(typeof(DbContext), ownedServiceProperty.ClrType);
                    Assert.Equal(typeof(DbContext), ownedServiceProperty.PropertyInfo.PropertyType);
                    Assert.Null(ownedServiceProperty.FieldInfo);
                    Assert.Same(referenceOwnedType, ownedServiceProperty.DeclaringEntityType);
                    var ownedServicePropertyBinding = ownedServiceProperty.ParameterBinding;
                    Assert.IsType<ContextParameterBinding>(ownedServicePropertyBinding);
                    Assert.Equal(typeof(DbContext), ownedServicePropertyBinding.ServiceType);
                    Assert.Equal(ownedServiceProperty, ownedServicePropertyBinding.ConsumedProperties.Single());
                    Assert.Equal(PropertyAccessMode.PreferField, ownedServiceProperty.GetPropertyAccessMode());
                    Assert.Null(ownedServiceProperty[CoreAnnotationNames.PropertyAccessMode]);

                    var principalDerived = model.FindEntityType(typeof(PrincipalDerived<DependentBase<byte?>>));
                    Assert.Equal(principalBase, principalDerived.BaseType);
                    Assert.Equal("Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+"+
                        "PrincipalDerived<Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DependentBase<byte?>>",
                        principalDerived.Name);
                    Assert.False(principalDerived.IsOwned());
                    Assert.IsType<ConstructorBinding>(principalDerived.ConstructorBinding);
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, principalDerived.GetChangeTrackingStrategy());
                    Assert.Null(principalDerived.GetDiscriminatorValue());

                    var tptForeignKey = principalDerived.GetForeignKeys().Single();
                    Assert.False(tptForeignKey.IsOwnership);
                    Assert.True(tptForeignKey.IsRequired);
                    Assert.False(tptForeignKey.IsRequiredDependent);
                    Assert.True(tptForeignKey.IsUnique);
                    Assert.Null(tptForeignKey.DependentToPrincipal);
                    Assert.Null(tptForeignKey.PrincipalToDependent);
                    Assert.Equal(DeleteBehavior.ClientCascade, tptForeignKey.DeleteBehavior);
                    Assert.Equal(principalKey.Properties, tptForeignKey.Properties);
                    Assert.Same(principalKey, tptForeignKey.PrincipalKey);

                    Assert.Equal(2, principalDerived.GetDeclaredNavigations().Count());
                    var dependentNavigation = principalDerived.GetDeclaredNavigations().First();
                    Assert.Equal("Dependent", dependentNavigation.Name);
                    Assert.Equal("Dependent", dependentNavigation.PropertyInfo.Name);
                    Assert.Equal("<Dependent>k__BackingField", dependentNavigation.FieldInfo.Name);
                    Assert.False(dependentNavigation.IsCollection);
                    Assert.True(dependentNavigation.IsEagerLoaded);
                    Assert.False(dependentNavigation.IsOnDependent);
                    Assert.Equal(principalDerived, dependentNavigation.DeclaringEntityType);
                    Assert.Equal("Principal", dependentNavigation.Inverse.Name);

                    var ownedCollectionNavigation = principalDerived.GetDeclaredNavigations().Last();
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.Name);
                    Assert.Null(ownedCollectionNavigation.PropertyInfo);
                    Assert.Equal("ManyOwned", ownedCollectionNavigation.FieldInfo.Name);
                    Assert.Equal(typeof(ICollection<OwnedType>), ownedCollectionNavigation.ClrType);
                    Assert.True(ownedCollectionNavigation.IsCollection);
                    Assert.True(ownedCollectionNavigation.IsEagerLoaded);
                    Assert.False(ownedCollectionNavigation.IsOnDependent);
                    Assert.Null(ownedCollectionNavigation.Inverse);
                    Assert.Equal(principalDerived, ownedCollectionNavigation.DeclaringEntityType);

                    var collectionOwnedType = ownedCollectionNavigation.TargetEntityType;
                    Assert.Equal(principalDerived.Name + ".ManyOwned#OwnedType", collectionOwnedType.Name);
                    Assert.Equal(typeof(OwnedType), collectionOwnedType.ClrType);
                    Assert.True(collectionOwnedType.HasSharedClrType);
                    Assert.False(collectionOwnedType.IsPropertyBag);
                    Assert.True(collectionOwnedType.IsOwned());
                    Assert.True(collectionOwnedType.IsMemoryOptimized());
                    Assert.Null(collectionOwnedType[RelationalAnnotationNames.IsTableExcludedFromMigrations]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => collectionOwnedType.IsTableExcludedFromMigrations()).Message);
                    Assert.Null(collectionOwnedType.BaseType);
                    Assert.IsType<ConstructorBinding>(collectionOwnedType.ConstructorBinding);
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, collectionOwnedType.GetChangeTrackingStrategy());

                    var collectionOwnership = ownedCollectionNavigation.ForeignKey;
                    Assert.Same(collectionOwnership, collectionOwnedType.FindOwnership());
                    Assert.True(collectionOwnership.IsOwnership);
                    Assert.True(collectionOwnership.IsRequired);
                    Assert.False(collectionOwnership.IsRequiredDependent);
                    Assert.False(collectionOwnership.IsUnique);
                    Assert.Null(collectionOwnership.DependentToPrincipal);
                    Assert.Same(ownedCollectionNavigation, collectionOwnership.PrincipalToDependent);
                    Assert.Equal(DeleteBehavior.Cascade, collectionOwnership.DeleteBehavior);
                    Assert.Equal(2, collectionOwnership.Properties.Count());

                    var derivedSkipNavigation = principalDerived.GetDeclaredSkipNavigations().Single();
                    Assert.Equal("Principals", derivedSkipNavigation.Name);
                    Assert.Equal("Principals", derivedSkipNavigation.PropertyInfo.Name);
                    Assert.Equal("<Principals>k__BackingField", derivedSkipNavigation.FieldInfo.Name);
                    Assert.Equal(typeof(ICollection<PrincipalBase>), derivedSkipNavigation.ClrType);
                    Assert.True(derivedSkipNavigation.IsCollection);
                    Assert.True(derivedSkipNavigation.IsEagerLoaded);
                    Assert.False(derivedSkipNavigation.IsOnDependent);
                    Assert.Equal(principalDerived, derivedSkipNavigation.DeclaringEntityType);
                    Assert.Equal("Deriveds", derivedSkipNavigation.Inverse.Name);
                    Assert.Same(principalBase.GetSkipNavigations().Single(), derivedSkipNavigation.Inverse);

                    Assert.Same(derivedSkipNavigation, derivedSkipNavigation.ForeignKey.GetReferencingSkipNavigations().Single());
                    Assert.Same(derivedSkipNavigation.Inverse, derivedSkipNavigation.Inverse.ForeignKey.GetReferencingSkipNavigations().Single());

                    Assert.Equal(new[] { derivedSkipNavigation.Inverse, derivedSkipNavigation }, principalDerived.GetSkipNavigations());

                    var joinType = derivedSkipNavigation.JoinEntityType;

                    Assert.Equal("PrincipalBasePrincipalDerived<DependentBase<byte?>>", joinType.Name);
                    Assert.Equal(typeof(Dictionary<string, object>), joinType.ClrType);
                    Assert.True(joinType.HasSharedClrType);
                    Assert.True(joinType.IsPropertyBag);
                    Assert.False(joinType.IsOwned());
                    Assert.Null(joinType.BaseType);
                    Assert.IsType<ConstructorBinding>(joinType.ConstructorBinding);
                    Assert.Equal("Item", joinType.FindIndexerPropertyInfo().Name);
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, joinType.GetChangeTrackingStrategy());
                    Assert.Null(joinType[RelationalAnnotationNames.Comment]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => joinType.GetComment()).Message);
                    Assert.Null(joinType.GetQueryFilter());

                    var rowid = joinType.GetProperties().Single(p => !p.IsForeignKey());
                    Assert.Equal(typeof(byte[]), rowid.ClrType);
                    Assert.True(rowid.IsIndexerProperty());
                    Assert.Same(joinType.FindIndexerPropertyInfo(), rowid.PropertyInfo);
                    Assert.Null(rowid.FieldInfo);
                    Assert.True(rowid.IsNullable);
                    Assert.False(rowid.IsShadowProperty());
                    Assert.True(rowid.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, rowid.ValueGenerated);
                    Assert.Equal("rowid", rowid.GetColumnBaseName());
                    Assert.Equal("rowversion", rowid.GetColumnType());
                    Assert.Null(rowid[RelationalAnnotationNames.Comment]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => rowid.GetComment()).Message);
                    Assert.Null(rowid[RelationalAnnotationNames.Collation]);
                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => rowid.GetCollation()).Message);
                    Assert.Null(rowid.GetValueConverter());
                    Assert.NotNull(rowid.GetValueComparer());
                    Assert.NotNull(rowid.GetKeyValueComparer());
                    Assert.Equal(SqlServerValueGenerationStrategy.None, rowid.GetValueGenerationStrategy());

                    var dependentForeignKey = dependentNavigation.ForeignKey;
                    Assert.False(dependentForeignKey.IsOwnership);
                    Assert.True(dependentForeignKey.IsRequired);
                    Assert.False(dependentForeignKey.IsRequiredDependent);
                    Assert.True(dependentForeignKey.IsUnique);
                    Assert.Same(dependentNavigation.Inverse, dependentForeignKey.DependentToPrincipal);
                    Assert.Same(dependentNavigation, dependentForeignKey.PrincipalToDependent);
                    Assert.Equal(DeleteBehavior.ClientNoAction, dependentForeignKey.DeleteBehavior);
                    Assert.Equal(new[] { "PrincipalId", "PrincipalAlternateId" }, dependentForeignKey.Properties.Select(p => p.Name));
                    Assert.Same(principalKey, dependentForeignKey.PrincipalKey);

                    var dependentBase = dependentNavigation.TargetEntityType;

                    Assert.True(dependentBase.GetIsDiscriminatorMappingComplete());
                    var principalDiscriminator = dependentBase.FindDiscriminatorProperty();
                    Assert.IsType<DiscriminatorValueGenerator>(
                        principalDiscriminator.GetValueGeneratorFactory()(principalDiscriminator, dependentBase));
                    Assert.Equal(Discriminator.Base, dependentBase.GetDiscriminatorValue());

                    var dependentBaseForeignKey = dependentBase.GetForeignKeys().Single(fk => fk != dependentForeignKey);
                    var dependentForeignKeyProperty = dependentBaseForeignKey.Properties.Single();

                    Assert.Equal(new[] { dependentBaseForeignKey, dependentForeignKey }, dependentForeignKeyProperty.GetContainingForeignKeys());

                    var dependentDerived = dependentBase.GetDerivedTypes().Single();
                    Assert.Equal(Discriminator.Derived, dependentDerived.GetDiscriminatorValue());

                    Assert.Equal(2, dependentDerived.GetDeclaredProperties().Count());

                    var dependentData = dependentDerived.GetDeclaredProperties().First();
                    Assert.Equal(typeof(string), dependentData.ClrType);
                    Assert.Equal("Data", dependentData.Name);
                    Assert.Equal("Data", dependentData.PropertyInfo.Name);
                    Assert.Equal("<Data>k__BackingField", dependentData.FieldInfo.Name);
                    Assert.True(dependentData.IsNullable);
                    Assert.False(dependentData.IsShadowProperty());
                    Assert.False(dependentData.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, dependentData.ValueGenerated);
                    Assert.Equal("Data", dependentData.GetColumnBaseName());
                    Assert.Equal("char(20)", dependentData.GetColumnType());
                    Assert.Equal(20, dependentData.GetMaxLength());
                    Assert.False(dependentData.IsUnicode());
                    Assert.True(dependentData.IsFixedLength());
                    Assert.Null(dependentData.GetPrecision());
                    Assert.Null(dependentData.GetScale());

                    var dependentMoney = dependentDerived.GetDeclaredProperties().Last();
                    Assert.Equal(typeof(decimal), dependentMoney.ClrType);
                    Assert.Equal("Money", dependentMoney.Name);
                    Assert.Null(dependentMoney.PropertyInfo);
                    Assert.Null(dependentMoney.FieldInfo);
                    Assert.False(dependentMoney.IsNullable);
                    Assert.True(dependentMoney.IsShadowProperty());
                    Assert.False(dependentMoney.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, dependentMoney.ValueGenerated);
                    Assert.Equal("Money", dependentMoney.GetColumnBaseName());
                    Assert.Equal("decimal(9,3)", dependentMoney.GetColumnType());
                    Assert.Null(dependentMoney.GetMaxLength());
                    Assert.Null(dependentMoney.IsUnicode());
                    Assert.Null(dependentMoney.IsFixedLength());
                    Assert.Equal(9, dependentMoney.GetPrecision());
                    Assert.Equal(3, dependentMoney.GetScale());

                    Assert.Equal(new[]
                        {
                            derivedSkipNavigation.ForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            collectionOwnership,
                            dependentForeignKey,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        principalKey.GetReferencingForeignKeys());

                    Assert.Equal(new[]
                        {
                            dependentBaseForeignKey,
                            tptForeignKey,
                            referenceOwnership,
                            derivedSkipNavigation.Inverse.ForeignKey
                        },
                        principalBase.GetReferencingForeignKeys());

                    Assert.Equal(new[]
                        {
                            derivedSkipNavigation.ForeignKey,
                            collectionOwnership,
                            dependentForeignKey
                        },
                        principalDerived.GetDeclaredReferencingForeignKeys());

                    Assert.Equal(new[]
                        {
                            dependentBase,
                            dependentDerived,
                            principalBase,
                            referenceOwnedType,
                            principalDerived,
                            collectionOwnedType,
                            joinType
                        },
                        model.GetEntityTypes());
                },
                typeof(SqlServerNetTopologySuiteDesignTimeServices));
        }

        public class BigContext : SqlServerContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDatabaseMaxSize("20TB")
                    .HasPerformanceLevel("High")
                    .HasServiceTier("AB")
                    .UseCollation("pi-PI")
                    .UseIdentityColumns(3, 2);

                modelBuilder.Entity<PrincipalBase>(eb =>
                {
                    eb.Property(e => e.Id).UseIdentityColumn(2, 3).IsSparse()
                        .Metadata.SetColumnName("DerivedId", StoreObjectIdentifier.Table("PrincipalDerived"));
                    eb.Property(e => e.AlternateId)
                        .IsRequired()
                        .UsePropertyAccessMode(PropertyAccessMode.FieldDuringConstruction)
                        .HasColumnType("geometry")
                        .HasDefaultValue(NtsGeometryServices.Instance.CreateGeometryFactory(srid: 0).CreatePoint(new CoordinateZM(0, 0, 0, 0)))
                        .HasConversion<CastingConverter<Point, Point>, CustomValueComparer<Point>>();

                    eb.HasIndex(e => e.AlternateId, "AlternateIndex")
                        .IsUnique()
                        .HasDatabaseName("AIX")
                        .HasFilter("AlternateId <> NULL")
                        .IsClustered()
                        .IsCreatedOnline()
                        .HasFillFactor(40)
                        .IncludeProperties(e => e.Id);

                    eb.HasIndex(e => new { e.AlternateId, e.Id});

                    eb.HasKey(e => new { e.Id, e.AlternateId })
                        .HasName("PK")
                        .IsClustered();

                    eb.HasAlternateKey(e => e.Id);

                    eb.OwnsOne(e => e.Owned, ob =>
                    {
                        ob.HasChangeTrackingStrategy(ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues);
                        ob.UsePropertyAccessMode(PropertyAccessMode.Field);
                    });

                    eb.Navigation(e => e.Owned).IsRequired().HasField("_ownedField")
                        .UsePropertyAccessMode(PropertyAccessMode.Field);

                    eb.HasData(new PrincipalBase { Id = 1, AlternateId = new Point(0, 0) });

                    eb.ToTable("PrincipalBase", "mySchema");
                });

                modelBuilder.Entity<PrincipalDerived<DependentBase<byte?>>>(eb =>
                {
                    eb.HasOne(e => e.Dependent).WithOne(e => e.Principal)
                        .HasForeignKey<DependentBase<byte?>>()
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    eb.Navigation(e => e.Dependent).AutoInclude();

                    eb.OwnsMany(typeof(OwnedType).FullName, "ManyOwned", ob =>
                    {
                        ob.IsMemoryOptimized();
                        ob.ToTable("ManyOwned", excludedFromMigrations: true);
                    });

                    eb.HasMany(e => e.Principals).WithMany(e => (ICollection<PrincipalDerived<DependentBase<byte?>>>)e.Deriveds)
                        .UsingEntity(jb =>
                        {
                            jb.HasComment("Join table");
                            jb.Property<byte[]>("rowid")
                                .IsRowVersion()
                                .HasComment("RowVersion")
                                .UseCollation("ri");
                        });

                    eb.Navigation(e => e.Principals).AutoInclude();

                    eb.ToTable("PrincipalDerived");
                });

                modelBuilder.Entity<DependentBase<byte?>>(eb =>
                {
                    eb.Property<byte?>("Id");

                    eb.HasKey(new[] { "PrincipalId", "PrincipalAlternateId" });

                    eb.HasOne<PrincipalBase>().WithOne()
                        .HasForeignKey<DependentBase<byte?>>("PrincipalId")
                        .HasPrincipalKey<PrincipalBase>(e => e.Id);

                    eb.ToTable("PrincipalDerived");

                    eb.HasDiscriminator<Discriminator>("EnumDiscriminator")
                        .HasValue(Discriminator.Base)
                        .HasValue<DependentDerived<byte?>>(Discriminator.Derived);
                });

                modelBuilder.Entity<DependentDerived<byte?>>(eb =>
                {
                    eb.Property<string>("Data")
                        .HasMaxLength(20)
                        .IsFixedLength()
                        .IsUnicode(false);

                    eb.Property<decimal>("Money")
                        .HasPrecision(9, 3);
                });
            }
        }

        public class CustomValueComparer<T> : ValueComparer<T>
        {
            public CustomValueComparer()
                : base(false)
            {
            }
        }

        public abstract class AbstractBase
        {
            public int Id { get; set; }
        }

        public class PrincipalBase : AbstractBase
        {
            public new long? Id { get; set; }
            public Point AlternateId;

            private OwnedType _ownedField;
            public OwnedType Owned { get => _ownedField; set => _ownedField = value; }
            public ICollection<PrincipalBase> Deriveds { get; set; }
        }

        public class PrincipalDerived<TDependent> : PrincipalBase
        {
            public TDependent Dependent { get; set; }
            protected ICollection<OwnedType> ManyOwned;
            public ICollection<PrincipalBase> Principals { get; set; }
        }

        public class DependentBase<TKey> : AbstractBase
        {
            private new TKey Id { get; set; }
            public PrincipalDerived<DependentBase<TKey>> Principal { get; set; }
        }

        public class DependentDerived<TKey> : DependentBase<TKey>
        {
            private string Data { get; set; }
        }

        public enum Discriminator
        {
            Base,
            Derived
        }

        public class OwnedType : INotifyPropertyChanged, INotifyPropertyChanging
        {
            private DbContext _context;

            public OwnedType(DbContext context)
            {
                Context = context;
            }

            public DbContext Context
            {
                get => _context; set
                {
                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("Context"));
                    _context = value;
                    PropertyChanging?.Invoke(this, new PropertyChangingEventArgs("Context"));
                }
            }

            public event PropertyChangedEventHandler PropertyChanged;
            public event PropertyChangingEventHandler PropertyChanging;
        }

        [ConditionalFact]
        public void DbFunctions()
        {
            Test(
                new DbFunctionContext(),
                new CompiledModelCodeGenerationOptions(),
                code => Assert.Collection(code,
                    c => AssertFileContents("DbFunctionContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.DbFunctionContext))]
    partial class DbFunctionContextModel : RuntimeModel
    {
        private static DbFunctionContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new DbFunctionContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                    c),
                    c => AssertFileContents("DbFunctionContextModelBuilder.cs",
                    @"// <auto-generated />
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DbFunctionContextModel
    {
        partial void Initialize()
        {
            var data = DataEntityType.Create(this);
            var @object = ObjectEntityType.Create(this);

            DataEntityType.CreateAnnotations(data);
            ObjectEntityType.CreateAnnotations(@object);

            var functions = new SortedDictionary<string, IDbFunction>();
            var getBlobs = new RuntimeDbFunction(
                ""GetBlobs()"",
                this,
                typeof(IQueryable<object>),
                ""GetBlobs"",
                schema: ""dbo"");

            functions[""GetBlobs()""] = getBlobs;

            var getCount = new RuntimeDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)"",
                this,
                typeof(int),
                ""CustomerOrderCount"",
                schema: ""dbf"",
                storeType: ""int"",
                methodInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetCount"",
                    BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(Guid?), typeof(string) },
                    null),
                scalar: true);

            var id = getCount.AddParameter(
                ""id"",
                typeof(Guid?),
                true,
                ""uniqueidentifier"");
            id.AddAnnotation(""MyAnnotation"", new[] { 1L });

            var condition = getCount.AddParameter(
                ""condition"",
                typeof(string),
                false,
                ""nvarchar(max)"");

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetCount(System.Guid?,string)""] = getCount;

            var getData = new RuntimeDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()"",
                this,
                typeof(IQueryable<CSharpRuntimeModelCodeGeneratorTest.Data>),
                ""GetAllData"",
                schema: ""dbo"",
                methodInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetData"",
                    BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] {  },
                    null));

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()""] = getData;

            var getData0 = new RuntimeDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)"",
                this,
                typeof(IQueryable<CSharpRuntimeModelCodeGeneratorTest.Data>),
                ""GetData"",
                schema: ""dbo"",
                methodInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""GetData"",
                    BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(int) },
                    null));

            var id0 = getData0.AddParameter(
                ""id"",
                typeof(int),
                false,
                ""int"");

            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData(int)""] = getData0;

            var isDateStatic = new RuntimeDbFunction(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateStatic(string)"",
                this,
                typeof(bool),
                ""IsDate"",
                storeType: ""bit"",
                methodInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.DbFunctionContext).GetMethod(
                    ""IsDateStatic"",
                    BindingFlags.Public | BindingFlags.Static | BindingFlags.DeclaredOnly,
                    null,
                    new Type[] { typeof(string) },
                    null),
                scalar: true,
                nullable: true,
                builtIn: true);

            var date = isDateStatic.AddParameter(
                ""date"",
                typeof(string),
                false,
                ""nvarchar(max)"");

            isDateStatic.AddAnnotation(""MyGuid"", new Guid(""00000000-0000-0000-0000-000000000000""));
            functions[""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.IsDateStatic(string)""] = isDateStatic;

            AddAnnotation(""Relational:DbFunctions"", functions);
            AddAnnotation(""Relational:MaxIdentifierLength"", 128);
            AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);
        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+Data"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Data),
                baseEntityType);

            var blob = runtimeEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            blob.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+DbFunctionContext.GetData()"");
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                    c),
                    c => AssertFileContents("ObjectEntityType.cs",
                     @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class ObjectEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""object"",
                typeof(object),
                baseEntityType);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", ""GetBlobs()"");
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                     c)),
                model =>
                {
                    Assert.Equal(5, model.GetDbFunctions().Count());

                    var getCount = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetCount", BindingFlags.NonPublic | BindingFlags.Instance));
                    Assert.Equal("CustomerOrderCount", getCount.Name);
                    Assert.Same(model, getCount.Model);
                    Assert.Same(model, ((IReadOnlyDbFunction)getCount).Model);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetCount(System.Guid?,string)", getCount.ModelName);
                    Assert.Equal("dbf", getCount.Schema);
                    Assert.False(getCount.IsNullable);
                    Assert.True(getCount.IsScalar);
                    Assert.False(getCount.IsBuiltIn);
                    Assert.False(getCount.IsAggregate);
                    Assert.Null(getCount.Translation);
                    Assert.Equal("int", getCount.TypeMapping?.StoreType);
                    Assert.Equal(typeof(int), getCount.ReturnType);
                    Assert.Equal("GetCount", getCount.MethodInfo.Name);
                    Assert.Empty(getCount.GetAnnotations());
                    Assert.Empty(getCount.GetRuntimeAnnotations());
                    Assert.Equal("CustomerOrderCount", getCount.StoreFunction.Name);
                    Assert.False(getCount.StoreFunction.IsShared);
                    Assert.NotNull(getCount.ToString());
                    Assert.Equal(getCount.Parameters, ((IReadOnlyDbFunction)getCount).Parameters);
                    Assert.Equal(2, getCount.Parameters.Count);

                    var getCountParameter1 = getCount.Parameters[0];
                    Assert.Same(getCount, getCountParameter1.Function);
                    Assert.Same(getCount, ((IReadOnlyDbFunctionParameter)getCountParameter1).Function);
                    Assert.Equal("id", getCountParameter1.Name);
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreType);
                    Assert.Equal("uniqueidentifier", ((IReadOnlyDbFunctionParameter)getCountParameter1).StoreType);
                    Assert.True(getCountParameter1.PropagatesNullability);
                    Assert.Equal(typeof(Guid?), getCountParameter1.ClrType);
                    Assert.Equal("uniqueidentifier", getCountParameter1.TypeMapping.StoreType);
                    Assert.Single(getCountParameter1.GetAnnotations());
                    Assert.Equal(new[] { 1L }, getCountParameter1["MyAnnotation"]);
                    Assert.Equal("id", getCountParameter1.StoreFunctionParameter.Name);
                    Assert.Equal("uniqueidentifier", getCountParameter1.StoreFunctionParameter.Type);
                    Assert.NotNull(getCountParameter1.ToString());

                    var getCountParameter2 = getCount.Parameters[1];
                    Assert.Same(getCount, getCountParameter2.Function);
                    Assert.Equal("condition", getCountParameter2.Name);
                    Assert.Equal("nvarchar(max)", getCountParameter2.StoreType);
                    Assert.False(getCountParameter2.PropagatesNullability);
                    Assert.Equal(typeof(string), getCountParameter2.ClrType);
                    Assert.Equal("nvarchar(max)", getCountParameter2.TypeMapping.StoreType);
                    Assert.Equal("condition", getCountParameter2.StoreFunctionParameter.Name);
                    Assert.Equal("nvarchar(max)", getCountParameter2.StoreFunctionParameter.Type);
                    Assert.NotNull(getCountParameter2.ToString());

                    var isDate = model.FindDbFunction(typeof(DbFunctionContext).GetMethod("IsDateStatic"));
                    Assert.Equal("IsDate", isDate.Name);
                    Assert.Null(isDate.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".IsDateStatic(string)", isDate.ModelName);
                    Assert.True(isDate.IsNullable);
                    Assert.True(isDate.IsScalar);
                    Assert.True(isDate.IsBuiltIn);
                    Assert.False(isDate.IsAggregate);
                    Assert.Null(isDate.Translation);
                    Assert.Equal(typeof(bool), isDate.ReturnType);
                    Assert.Equal("IsDateStatic", isDate.MethodInfo.Name);
                    Assert.Single(isDate.GetAnnotations());
                    Assert.Equal(new Guid(), isDate["MyGuid"]);
                    Assert.Empty(isDate.GetRuntimeAnnotations());
                    Assert.Equal("bit", isDate.StoreFunction.ReturnType);
                    Assert.Empty(isDate.StoreFunction.EntityTypeMappings);
                    Assert.Single(isDate.Parameters);

                    var isDateParameter = isDate.Parameters[0];
                    Assert.Same(isDate, isDateParameter.Function);
                    Assert.Equal("date", isDateParameter.Name);
                    Assert.Equal("nvarchar(max)", isDateParameter.StoreType);
                    Assert.False(isDateParameter.PropagatesNullability);
                    Assert.Equal(typeof(string), isDateParameter.ClrType);
                    Assert.Equal("nvarchar(max)", isDateParameter.TypeMapping.StoreType);
                    Assert.Equal("date", isDateParameter.StoreFunctionParameter.Name);
                    Assert.Equal("nvarchar(max)", isDateParameter.StoreFunctionParameter.Type);

                    var getData = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetData", new Type[] { typeof(int) }));
                    Assert.Equal("GetData", getData.Name);
                    Assert.Equal("dbo", getData.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetData(int)", getData.ModelName);
                    Assert.False(getData.IsNullable);
                    Assert.False(getData.IsScalar);
                    Assert.False(getData.IsBuiltIn);
                    Assert.False(getData.IsAggregate);
                    Assert.Null(getData.Translation);
                    Assert.Equal(typeof(IQueryable<Data>), getData.ReturnType);
                    Assert.Equal("GetData", getData.MethodInfo.Name);
                    Assert.Empty(getData.GetAnnotations());
                    Assert.Empty(getData.GetRuntimeAnnotations());
                    Assert.Null(getData.TypeMapping?.StoreType);
                    Assert.Null(getData.StoreFunction.ReturnType);
                    Assert.Equal(typeof(Data), getData.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType);
                    Assert.Single(getData.Parameters);

                    var getDataParameter = getData.Parameters[0];
                    Assert.Same(getData, getDataParameter.Function);
                    Assert.Equal("id", getDataParameter.Name);
                    Assert.Equal("int", getDataParameter.StoreType);
                    Assert.False(getDataParameter.PropagatesNullability);
                    Assert.Equal(typeof(int), getDataParameter.ClrType);
                    Assert.Equal("int", getDataParameter.TypeMapping.StoreType);
                    Assert.Equal("id", getDataParameter.StoreFunctionParameter.Name);
                    Assert.Equal("int", getDataParameter.StoreFunctionParameter.Type);

                    var getDataParameterless = model.FindDbFunction(typeof(DbFunctionContext)
                        .GetMethod("GetData", new Type[0]));
                    Assert.Equal("GetAllData", getDataParameterless.Name);
                    Assert.Equal("dbo", getDataParameterless.Schema);
                    Assert.Equal(typeof(DbFunctionContext).FullName + ".GetData()", getDataParameterless.ModelName);
                    Assert.False(getDataParameterless.IsNullable);
                    Assert.False(getDataParameterless.IsScalar);
                    Assert.False(getDataParameterless.IsBuiltIn);
                    Assert.False(getDataParameterless.IsAggregate);
                    Assert.Null(getDataParameterless.Translation);
                    Assert.Equal(typeof(IQueryable<Data>), getDataParameterless.ReturnType);
                    Assert.Equal("GetData", getDataParameterless.MethodInfo.Name);
                    Assert.Empty(getDataParameterless.GetAnnotations());
                    Assert.Empty(getDataParameterless.GetRuntimeAnnotations());
                    Assert.False(getDataParameterless.StoreFunction.IsBuiltIn);
                    Assert.Equal(typeof(Data), getDataParameterless.StoreFunction.EntityTypeMappings.Single().EntityType.ClrType);
                    Assert.Equal(0, getDataParameterless.Parameters.Count);

                    Assert.Equal(2, model.GetEntityTypes().Count());
                    var dataEntity = model.FindEntityType(typeof(Data));
                    Assert.Null(dataEntity.FindPrimaryKey());
                    var dataEntityFunctionMapping = dataEntity.GetFunctionMappings().Single(m => m.IsDefaultFunctionMapping);
                    Assert.True(dataEntityFunctionMapping.IncludesDerivedTypes);
                    Assert.True(dataEntityFunctionMapping.IsSharedTablePrincipal);
                    Assert.True(dataEntityFunctionMapping.IsSplitEntityTypePrincipal);
                    Assert.Same(getDataParameterless, dataEntityFunctionMapping.DbFunction);

                    var getDataStoreFunction = dataEntityFunctionMapping.StoreFunction;
                    Assert.Same(getDataParameterless, getDataStoreFunction.DbFunctions.Single());
                    Assert.False(getDataStoreFunction.IsOptional(dataEntity));

                    var dataEntityOtherFunctionMapping = dataEntity.GetFunctionMappings().Single(m => !m.IsDefaultFunctionMapping);
                    Assert.True(dataEntityOtherFunctionMapping.IncludesDerivedTypes);
                    Assert.True(dataEntityOtherFunctionMapping.IsSharedTablePrincipal);
                    Assert.True(dataEntityOtherFunctionMapping.IsSplitEntityTypePrincipal);
                    Assert.Same(getData, dataEntityOtherFunctionMapping.DbFunction);

                    var getDataOtherStoreFunction = dataEntityOtherFunctionMapping.StoreFunction;
                    Assert.Same(getData, getDataOtherStoreFunction.DbFunctions.Single());
                    Assert.False(getDataOtherStoreFunction.IsOptional(dataEntity));

                    var getBlobs = model.FindDbFunction("GetBlobs()");
                    Assert.Equal("dbo", getBlobs.Schema);
                    Assert.False(getBlobs.IsNullable);
                    Assert.False(getBlobs.IsScalar);
                    Assert.False(getBlobs.IsBuiltIn);
                    Assert.False(getBlobs.IsAggregate);
                    Assert.Null(getBlobs.Translation);
                    Assert.Null(getBlobs.TypeMapping);
                    Assert.Equal(typeof(IQueryable<object>), getBlobs.ReturnType);
                    Assert.Null(getBlobs.MethodInfo);
                    Assert.Empty(getBlobs.GetAnnotations());
                    Assert.Empty(getBlobs.GetRuntimeAnnotations());
                    Assert.Equal("GetBlobs", getBlobs.StoreFunction.Name);
                    Assert.False(getBlobs.StoreFunction.IsShared);
                    Assert.NotNull(getBlobs.ToString());
                    Assert.Empty(getBlobs.Parameters);

                    var objectEntity = model.FindEntityType(typeof(object));
                    Assert.Null(objectEntity.FindPrimaryKey());
                    var objectEntityFunctionMapping = objectEntity.GetFunctionMappings().Single(m => m.IsDefaultFunctionMapping);
                    Assert.True(objectEntityFunctionMapping.IncludesDerivedTypes);
                    Assert.True(objectEntityFunctionMapping.IsSharedTablePrincipal);
                    Assert.True(objectEntityFunctionMapping.IsSplitEntityTypePrincipal);
                    Assert.Same(getBlobs, objectEntityFunctionMapping.DbFunction);
                });
        }

        public class DbFunctionContext : SqlServerContextBase
        {
            public static bool IsDateStatic(string date)
                => throw new NotImplementedException();

            private int GetCount(Guid? id, string condition)
                => throw new NotImplementedException();

            public IQueryable<Data> GetData(int id)
            {
                return FromExpression(() => GetData(id));
            }

            public IQueryable<Data> GetData()
            {
                return FromExpression(() => GetData());
            }

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetCount), BindingFlags.NonPublic | BindingFlags.Instance))
                    .HasName("CustomerOrderCount").HasSchema("dbf").IsNullable(false)
                    .HasParameter("id").PropagatesNullability().Metadata.SetAnnotation("MyAnnotation", new[] { 1L });

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(IsDateStatic))).HasName("IsDate").IsBuiltIn()
                    .Metadata.SetAnnotation("MyGuid", new Guid());

                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetData), new Type[] { typeof(int) }));
                modelBuilder.HasDbFunction(typeof(DbFunctionContext).GetMethod(nameof(GetData), new Type[0]));

                modelBuilder.Entity<Data>().ToFunction(typeof(DbFunctionContext).FullName + ".GetData()", f => f.HasName("GetAllData"))
                    .HasNoKey();

                modelBuilder.Entity<object>().ToFunction("GetBlobs()", f => f.HasName("GetBlobs")).HasNoKey();
            }
        }

        [ConditionalFact]
        public void Sequences()
        {
            Test(
                new SequencesContext(),
                new CompiledModelCodeGenerationOptions(),
                code => Assert.Collection(code,
                c => AssertFileContents("SequencesContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.SequencesContext))]
    partial class SequencesContextModel : RuntimeModel
    {
        private static SequencesContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new SequencesContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                    c),
                    c => AssertFileContents("SequencesContextModelBuilder.cs",
                    @"// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class SequencesContextModel
    {
        partial void Initialize()
        {
            var data = DataEntityType.Create(this);

            DataEntityType.CreateAnnotations(data);

            var sequences = new SortedDictionary<(string, string), ISequence>();
            var hL = new RuntimeSequence(
                ""HL"",
                this,
                typeof(long),
                schema: ""S"",
                incrementBy: 10);

            sequences[(""HL"", ""S"")] = hL;

            var @long = new RuntimeSequence(
                ""Long"",
                this,
                typeof(long),
                startValue: -4L,
                incrementBy: 2,
                cyclic: true,
                minValue: -2L,
                maxValue: 2L);

            sequences[(""Long"", null)] = @long;

            AddAnnotation(""Relational:Sequences"", sequences);
            AddAnnotation(""Relational:MaxIdentifierLength"", 128);
            AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);
        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+Data"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Data),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation(""SqlServer:HiLoSequenceName"", ""HL"");
            id.AddAnnotation(""SqlServer:HiLoSequenceSchema"", ""S"");
            id.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.SequenceHiLo);

            var blob = runtimeEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            blob.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""Data"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                    c)),
                model =>
                {
                    Assert.Equal(2, model.GetSequences().Count());

                    var longSequence = model.FindSequence("Long");
                    Assert.Same(model, longSequence.Model);
                    Assert.Equal(typeof(long), longSequence.Type);
                    Assert.True(longSequence.IsCyclic);
                    Assert.Equal(-4, longSequence.StartValue);
                    Assert.Equal(-2, longSequence.MinValue);
                    Assert.Equal(2, longSequence.MaxValue);
                    Assert.Equal(2, longSequence.IncrementBy);
                    Assert.NotNull(longSequence.ToString());

                    var hiLo = model.FindSequence("HL", "S");
                    Assert.Same(model, ((IReadOnlySequence)hiLo).Model);
                    Assert.Equal("HL", hiLo.Name);
                    Assert.Equal("S", hiLo.Schema);
                    Assert.False(hiLo.IsCyclic);
                    Assert.Equal(1, hiLo.StartValue);
                    Assert.Null(hiLo.MinValue);
                    Assert.Null(hiLo.MaxValue);
                    Assert.Equal(10, hiLo.IncrementBy);
                    Assert.NotNull(hiLo.ToString());

                    Assert.Single(model.GetEntityTypes());
                    var dataEntity = model.FindEntityType(typeof(Data));
                    Assert.Same(hiLo, dataEntity.FindPrimaryKey().Properties.Single().FindHiLoSequence());
                });
        }

        public class SequencesContext : SqlServerContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.HasSequence<long>("Long")
                    .HasMin(-2)
                    .HasMax(2)
                    .IsCyclic()
                    .IncrementsBy(2)
                    .StartsAt(-4);

                modelBuilder.Entity<Data>(eb =>
                {
                    eb.Property<int>("Id").UseHiLo("HL", "S");
                    eb.HasKey("Id");
                });
            }
        }

        [ConditionalFact]
        public void CheckConstraints()
        {
            Test(
                new ConstraintsContext(),
                new CompiledModelCodeGenerationOptions(),
                code => Assert.Collection(code,
                    c => AssertFileContents("ConstraintsContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.ConstraintsContext))]
    partial class ConstraintsContextModel : RuntimeModel
    {
        private static ConstraintsContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new ConstraintsContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                    c),
                    c => AssertFileContents("ConstraintsContextModelBuilder.cs",
                    @"// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class ConstraintsContextModel
    {
        partial void Initialize()
        {
            var data = DataEntityType.Create(this);

            DataEntityType.CreateAnnotations(data);

            AddAnnotation(""Relational:MaxIdentifierLength"", 128);
            AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);
        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+Data"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Data),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.IdentityColumn);

            var blob = runtimeEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            blob.AddAnnotation(""SqlServer:ValueGenerationStrategy"", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""Data"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                    c)),
                model =>
                {
                    var dataEntity = model.GetEntityTypes().Single();

                    Assert.Equal(
                        CoreStrings.RuntimeModelMissingData,
                        Assert.Throws<InvalidOperationException>(() => dataEntity.GetCheckConstraints()).Message);
                });
        }

        public class ConstraintsContext : SqlServerContextBase
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                base.OnModelCreating(modelBuilder);

                modelBuilder.Entity<Data>(eb =>
                {
                    eb.Property<int>("Id");
                    eb.HasKey("Id");

                    eb.HasCheckConstraint("idConstraint", "Id <> 0");
                    eb.HasCheckConstraint("anotherConstraint", "Id <> -1");
                });
            }
        }

        [ConditionalFact]
        public void Sqlite()
        {
            Test(
                new SqliteContext(),
                new CompiledModelCodeGenerationOptions { ModelNamespace = "Microsoft.EntityFrameworkCore.Metadata" },
                code => Assert.Collection(code,
                    c => AssertFileContents("SqliteContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Microsoft.EntityFrameworkCore.Metadata
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.SqliteContext))]
    partial class SqliteContextModel : RuntimeModel
    {
        private static SqliteContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new SqliteContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                    c),
                    c => AssertFileContents("SqliteContextModelBuilder.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Microsoft.EntityFrameworkCore.Metadata
{
    partial class SqliteContextModel
    {
        partial void Initialize()
        {
            var data = DataEntityType.Create(this);

            DataEntityType.CreateAnnotations(data);

        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using NetTopologySuite.Geometries;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Microsoft.EntityFrameworkCore.Metadata
{
    partial class DataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+Data"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Data),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var blob = runtimeEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var point = runtimeEntityType.AddProperty(
                ""Point"",
                typeof(Point),
                nullable: true);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Relational:FunctionName"", null);
            runtimeEntityType.AddAnnotation(""Relational:Schema"", null);
            runtimeEntityType.AddAnnotation(""Relational:SqlQuery"", null);
            runtimeEntityType.AddAnnotation(""Relational:TableName"", ""Data"");
            runtimeEntityType.AddAnnotation(""Relational:ViewName"", null);
            runtimeEntityType.AddAnnotation(""Relational:ViewSchema"", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                    c)),
                model =>
                {
                    Assert.Single(model.GetEntityTypes());
                    var dataEntity = model.FindEntityType(typeof(Data));

                    Assert.Equal(typeof(Data).FullName, dataEntity.Name);
                    Assert.False(dataEntity.HasSharedClrType);
                    Assert.False(dataEntity.IsPropertyBag);
                    Assert.False(dataEntity.IsOwned());
                    Assert.IsType<ConstructorBinding>(dataEntity.ConstructorBinding);
                    Assert.Null(dataEntity.FindIndexerPropertyInfo());
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy());
                    Assert.Equal("Data", dataEntity.GetTableName());
                    Assert.Null(dataEntity.GetSchema());

                    var point = dataEntity.FindProperty("Point");
                    Assert.Equal(typeof(Point), point.ClrType);
                    Assert.True(point.IsNullable);
                    Assert.Equal(ValueGenerated.Never, point.ValueGenerated);
                    Assert.Equal("Point", point.GetColumnBaseName());
                    Assert.Equal("POINT", point.GetColumnType());
                    Assert.Null(point.GetValueConverter());
                    Assert.IsType<GeometryValueComparer<Point>>(point.GetValueComparer());
                    Assert.IsType<GeometryValueComparer<Point>>(point.GetKeyValueComparer());
                    Assert.Null(point.GetSrid());
                },
                typeof(SqliteNetTopologySuiteDesignTimeServices));
        }

        public class SqliteContext : DbContext
        {
            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseSqlite(o => o.UseNetTopologySuite());

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);

                modelBuilder.Entity<Data>(eb =>
                {
                    eb.Property<int>("Id");
                    eb.HasKey("Id");

                    eb.Property<Point>("Point")
                        .HasSrid(1101);
                });
            }
        }

        [ConditionalFact]
        public void Cosmos()
        {
            Test(
                new CosmosContext(),
                new CompiledModelCodeGenerationOptions(),
                code => Assert.Collection(code,
                    c => AssertFileContents("CosmosContextModel.cs",
                    @"// <auto-generated />
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [DbContext(typeof(CSharpRuntimeModelCodeGeneratorTest.CosmosContext))]
    partial class CosmosContextModel : RuntimeModel
    {
        private static CosmosContextModel _instance;
        public static IModel Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new CosmosContextModel();
                    _instance.Initialize();
                    _instance.Customize();
                }

                return _instance;
            }
        }

        partial void Initialize();

        partial void Customize();
    }
}
",
                    c),
                    c => AssertFileContents("CosmosContextModelBuilder.cs",
                    @"// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class CosmosContextModel
    {
        partial void Initialize()
        {
            var data = DataEntityType.Create(this);

            DataEntityType.CreateAnnotations(data);

            AddAnnotation(""Cosmos:ContainerName"", ""Default"");
        }
    }
}
",
                    c),
                    c => AssertFileContents("DataEntityType.cs",
                    @"// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Scaffolding.Internal;
using Newtonsoft.Json.Linq;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    partial class DataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                ""Microsoft.EntityFrameworkCore.Scaffolding.Internal.CSharpRuntimeModelCodeGeneratorTest+Data"",
                typeof(CSharpRuntimeModelCodeGeneratorTest.Data),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                ""Id"",
                typeof(int),
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var partitionId = runtimeEntityType.AddProperty(
                ""PartitionId"",
                typeof(long?),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                providerPropertyType: typeof(string));

            var blob = runtimeEntityType.AddProperty(
                ""Blob"",
                typeof(byte[]),
                propertyInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetProperty(""Blob"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CSharpRuntimeModelCodeGeneratorTest.Data).GetField(""<Blob>k__BackingField"", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            blob.AddAnnotation(""Cosmos:PropertyName"", ""JsonBlob"");

            var __id = runtimeEntityType.AddProperty(
                ""__id"",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new IdValueGeneratorFactory().Create);
            __id.AddAnnotation(""Cosmos:PropertyName"", ""id"");

            var __jObject = runtimeEntityType.AddProperty(
                ""__jObject"",
                typeof(JObject),
                nullable: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);
            __jObject.AddAnnotation(""Cosmos:PropertyName"", """");

            var _etag = runtimeEntityType.AddProperty(
                ""_etag"",
                typeof(string),
                nullable: true,
                concurrencyToken: true,
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore);

            var key = runtimeEntityType.AddKey(
                new[] { id, partitionId });
            runtimeEntityType.SetPrimaryKey(key);

            var key0 = runtimeEntityType.AddKey(
                new[] { __id, partitionId });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation(""Cosmos:ContainerName"", ""DataContainer"");
            runtimeEntityType.AddAnnotation(""Cosmos:ETagName"", ""_etag"");
            runtimeEntityType.AddAnnotation(""Cosmos:PartitionKeyName"", ""PartitionId"");

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
",
                    c)),
                model =>
                {
                    Assert.Single(model.GetEntityTypes());
                    var dataEntity = model.FindEntityType(typeof(Data));
                    Assert.Equal(typeof(Data).FullName, dataEntity.Name);
                    Assert.False(dataEntity.HasSharedClrType);
                    Assert.False(dataEntity.IsPropertyBag);
                    Assert.False(dataEntity.IsOwned());
                    Assert.IsType<ConstructorBinding>(dataEntity.ConstructorBinding);
                    Assert.Null(dataEntity.FindIndexerPropertyInfo());
                    Assert.Equal(ChangeTrackingStrategy.Snapshot, dataEntity.GetChangeTrackingStrategy());
                    Assert.Equal("DataContainer", dataEntity.GetContainer());
                    Assert.Null(dataEntity.FindDiscriminatorProperty());

                    var id = dataEntity.FindProperty("Id");
                    Assert.Equal(typeof(int), id.ClrType);
                    Assert.Null(id.PropertyInfo);
                    Assert.Null(id.FieldInfo);
                    Assert.False(id.IsNullable);
                    Assert.False(id.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, id.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Throw, id.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Save, id.GetBeforeSaveBehavior());
                    Assert.Equal("Id", id.GetJsonPropertyName());
                    Assert.Null(id.GetValueGeneratorFactory());
                    Assert.Null(id.GetValueConverter());
                    Assert.NotNull(id.GetValueComparer());
                    Assert.NotNull(id.GetKeyValueComparer());

                    var storeId = dataEntity.FindProperty("__id");
                    Assert.Equal(typeof(string), storeId.ClrType);
                    Assert.Null(storeId.PropertyInfo);
                    Assert.Null(storeId.FieldInfo);
                    Assert.False(storeId.IsNullable);
                    Assert.False(storeId.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, storeId.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Throw, storeId.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Save, storeId.GetBeforeSaveBehavior());
                    Assert.Equal("id", storeId.GetJsonPropertyName());
                    Assert.IsType<IdValueGenerator>(storeId.GetValueGeneratorFactory()(storeId, dataEntity));
                    Assert.Null(storeId.GetValueConverter());
                    Assert.NotNull(storeId.GetValueComparer());
                    Assert.NotNull(storeId.GetKeyValueComparer());

                    var partitionId = dataEntity.FindProperty("PartitionId");
                    Assert.Equal(typeof(long?), partitionId.ClrType);
                    Assert.Null(partitionId.PropertyInfo);
                    Assert.Null(partitionId.FieldInfo);
                    Assert.False(partitionId.IsNullable);
                    Assert.False(partitionId.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, partitionId.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Throw, partitionId.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Save, partitionId.GetBeforeSaveBehavior());
                    Assert.Equal("PartitionId", partitionId.GetJsonPropertyName());
                    Assert.Null(partitionId.GetValueGeneratorFactory());
                    Assert.Null(partitionId.GetValueConverter());
                    Assert.IsType<NumberToStringConverter<long>>(partitionId.FindTypeMapping().Converter);
                    Assert.NotNull(partitionId.GetValueComparer());
                    Assert.NotNull(partitionId.GetKeyValueComparer());

                    var eTag = dataEntity.FindProperty("_etag");
                    Assert.Equal(typeof(string), eTag.ClrType);
                    Assert.Null(eTag.PropertyInfo);
                    Assert.Null(eTag.FieldInfo);
                    Assert.True(eTag.IsNullable);
                    Assert.True(eTag.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, eTag.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Ignore, eTag.GetBeforeSaveBehavior());
                    Assert.Equal("_etag", eTag.GetJsonPropertyName());
                    Assert.Null(eTag.GetValueGeneratorFactory());
                    Assert.Null(eTag.GetValueConverter());
                    Assert.NotNull(eTag.GetValueComparer());
                    Assert.NotNull(eTag.GetKeyValueComparer());
                    Assert.Equal("_etag", dataEntity.GetETagPropertyName());
                    Assert.Same(eTag, dataEntity.GetETagProperty());

                    var blob = dataEntity.FindProperty(nameof(Data.Blob));
                    Assert.Equal(typeof(byte[]), blob.ClrType);
                    Assert.Equal(nameof(Data.Blob), blob.PropertyInfo.Name);
                    Assert.Equal("<Blob>k__BackingField", blob.FieldInfo.Name);
                    Assert.True(blob.IsNullable);
                    Assert.False(blob.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.Never, blob.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Save, blob.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Save, blob.GetBeforeSaveBehavior());
                    Assert.Equal("JsonBlob", blob.GetJsonPropertyName());
                    Assert.Null(blob.GetValueGeneratorFactory());
                    Assert.Null(blob.GetValueConverter());
                    Assert.NotNull(blob.GetValueComparer());
                    Assert.NotNull(blob.GetKeyValueComparer());

                    var jObject = dataEntity.FindProperty("__jObject");
                    Assert.Equal(typeof(JObject), jObject.ClrType);
                    Assert.Null(jObject.PropertyInfo);
                    Assert.Null(jObject.FieldInfo);
                    Assert.True(jObject.IsNullable);
                    Assert.False(jObject.IsConcurrencyToken);
                    Assert.Equal(ValueGenerated.OnAddOrUpdate, jObject.ValueGenerated);
                    Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetAfterSaveBehavior());
                    Assert.Equal(PropertySaveBehavior.Ignore, jObject.GetBeforeSaveBehavior());
                    Assert.Equal("", jObject.GetJsonPropertyName());
                    Assert.Null(jObject.GetValueGeneratorFactory());
                    Assert.Null(jObject.GetValueConverter());
                    Assert.NotNull(jObject.GetValueComparer());
                    Assert.NotNull(jObject.GetKeyValueComparer());

                    Assert.Equal(2, dataEntity.GetKeys().Count());

                    Assert.Equal(new[] { id, partitionId, blob, storeId, jObject, eTag }, dataEntity.GetProperties());
                });
        }

        public class CosmosContext : DbContext
        {
            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseCosmos("localhost", "_", "_");

            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);

                modelBuilder.HasDefaultContainer("Default");

                modelBuilder.Entity<Data>(eb =>
                {
                    eb.Property<int>("Id");
                    eb.Property<long?>("PartitionId").HasConversion<string>();
                    eb.HasPartitionKey("PartitionId");
                    eb.HasKey("Id", "PartitionId");
                    eb.ToContainer("DataContainer");
                    eb.UseETagConcurrency();
                    eb.HasNoDiscriminator();
                    eb.Property(d => d.Blob).ToJsonProperty("JsonBlob");
                });
            }
        }

        public class Data
        {
            public byte[] Blob { get; set; }
        }

        public abstract class ContextBase : DbContext
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseInMemoryDatabase(nameof(CSharpRuntimeModelCodeGeneratorTest));
        }

        public abstract class SqlServerContextBase : DbContext
        {
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Model.RemoveAnnotation(CoreAnnotationNames.ProductVersion);
            }

            protected override void OnConfiguring(DbContextOptionsBuilder options)
                => options
                    .EnableServiceProviderCaching(false)
                    .UseSqlServer(o => o.UseNetTopologySuite());
        }

        protected void Test(
            DbContext context,
            CompiledModelCodeGenerationOptions options,
            Action<IReadOnlyCollection<ScaffoldedFile>> assertScaffold = null,
            Action<IModel> assertModel = null,
            Type additionalDesignTimeServices = null,
            string expectedExceptionMessage = null)
        {
            var model = context.GetService<IDesignTimeModel>().Model;

            var services = new ServiceCollection();
            if (additionalDesignTimeServices != null)
            {
                ConfigureDesignTimeServices(additionalDesignTimeServices, services);
            }
            ConfigureProviderServices(context.GetService<IDatabaseProvider>().Name, services);
            services.AddEntityFrameworkDesignTimeServices();

            options.ModelNamespace ??= "TestNamespace";
            options.ContextType = context.GetType();

            var generator = services
                .BuildServiceProvider()
                .GetRequiredService<ICompiledModelCodeGeneratorSelector>()
                .Select(options);

            if (expectedExceptionMessage != null)
            {
                Assert.Equal(expectedExceptionMessage,
                    Assert.Throws<InvalidOperationException>(() => generator.GenerateModel(
                        model,
                        options)).Message);
                return;
            }

            var scaffoldedFiles = generator.GenerateModel(
                model,
                options);
            if (assertScaffold != null)
            {
                assertScaffold(scaffoldedFiles);
            }

            var build = new BuildSource
            {
                References =
                {
                    BuildReference.ByName("Microsoft.EntityFrameworkCore"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Abstractions"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Cosmos"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.InMemory"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Relational"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.Sqlite.NetTopologySuite"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer"),
                    BuildReference.ByName("Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite"),
                    BuildReference.ByName("NetTopologySuite"),
                    BuildReference.ByName("Newtonsoft.Json"),
                    BuildReference.ByName(typeof(CSharpRuntimeModelCodeGeneratorTest).Assembly.GetName().Name)
                },
                Sources = scaffoldedFiles.ToDictionary(f => f.Path, f => f.Code)
            };

            var assembly = build.BuildInMemory();

            if (assertModel != null)
            {
                var modelType = assembly.GetType(options.ModelNamespace + "." + options.ContextType.Name + "Model");
                var instancePropertyInfo = modelType.GetProperty("Instance", BindingFlags.Public | BindingFlags.Static);
                var compiledModel = (IModel)instancePropertyInfo.GetValue(null);

                var modelRuntimeInitializer = context.GetService<IModelRuntimeInitializer>();
                assertModel(modelRuntimeInitializer.Initialize(compiledModel, designTime: false));
            }
        }

        private void ConfigureProviderServices(string provider, IServiceCollection services)
        {
            var providerAssembly = Assembly.Load(new AssemblyName(provider));

            var providerServicesAttribute = providerAssembly.GetCustomAttribute<DesignTimeProviderServicesAttribute>();
            if (providerServicesAttribute == null)
            {
                throw new InvalidOperationException(DesignStrings.CannotFindDesignTimeProviderAssemblyAttribute(provider));
            }

            var designTimeServicesType = providerAssembly.GetType(
                providerServicesAttribute.TypeName,
                throwOnError: true,
                ignoreCase: false)!;

            ConfigureDesignTimeServices(designTimeServicesType, services);
        }

        private static void ConfigureDesignTimeServices(
            Type designTimeServicesType,
            IServiceCollection services)
        {
            var designTimeServices = (IDesignTimeServices)Activator.CreateInstance(designTimeServicesType)!;
            designTimeServices.ConfigureDesignTimeServices(services);
        }

        protected static void AssertFileContents(
            string expectedPath,
            string expectedCode,
            ScaffoldedFile file)
        {
            Assert.Equal(expectedPath, file.Path);
            Assert.Equal(expectedCode, file.Code, ignoreLineEndingDifferences: true);
        }
    }
}
