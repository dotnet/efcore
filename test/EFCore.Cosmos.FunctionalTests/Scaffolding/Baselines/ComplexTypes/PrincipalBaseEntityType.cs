// <auto-generated />
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Cosmos.Storage.Internal;
using Microsoft.EntityFrameworkCore.Cosmos.ValueGeneration.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Scaffolding;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using Newtonsoft.Json.Linq;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestNamespace
{
    [EntityFrameworkInternal]
    public partial class PrincipalBaseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase",
                typeof(CompiledModelTestBase.PrincipalBase),
                baseEntityType,
                discriminatorProperty: "Discriminator",
                discriminatorValue: "PrincipalBase",
                derivedTypesCount: 1,
                propertyCount: 15,
                complexPropertyCount: 1,
                navigationCount: 1,
                foreignKeyCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(long?),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            id.SetGetter(
                long? (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Id(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => !(PrincipalBaseUnsafeAccessors.Id(entity).HasValue),
                long? (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Id(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => !(PrincipalBaseUnsafeAccessors.Id(instance).HasValue));
            id.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, long? value) => PrincipalBaseUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, long? value) => PrincipalBaseUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                long? (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Id(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                long? (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Id(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                long? (InternalEntityEntry entry) => entry.ReadOriginalValue<long?>(id, 0),
                long? (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<long?>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                clrType: typeof(long),
                jsonValueReaderWriter: JsonInt64ReaderWriter.Instance);
            id.SetValueComparer(new NullableValueComparer<long>(id.TypeMapping.Comparer));
            id.SetKeyValueComparer(new NullableValueComparer<long>(id.TypeMapping.KeyComparer));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<long?>(id));

            var discriminator = runtimeEntityType.AddProperty(
                "Discriminator",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new DiscriminatorValueGeneratorFactory().Create);
            discriminator.SetAccessors(
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(0),
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(0),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(discriminator, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(discriminator),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            discriminator.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: 0,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            discriminator.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);

            var enum1 = runtimeEntityType.AddProperty(
                "Enum1",
                typeof(CompiledModelTestBase.AnEnum),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Enum1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Enum1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            enum1.SetGetter(
                CompiledModelTestBase.AnEnum (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Enum1(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.Enum1(entity))), ((object)((CompiledModelTestBase.AnEnum)0L))),
                CompiledModelTestBase.AnEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Enum1(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.Enum1(instance))), ((object)((CompiledModelTestBase.AnEnum)0L))));
            enum1.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum value) => PrincipalBaseUnsafeAccessors.Enum1(entity) = value);
            enum1.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum value) => PrincipalBaseUnsafeAccessors.Enum1(entity) = value);
            enum1.SetAccessors(
                CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Enum1(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Enum1(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AnEnum>(enum1, 2),
                CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AnEnum>(enum1),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            enum1.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum1.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                    bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                    bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                    int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                    CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AnEnum, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                        int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                        CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value)))));
            enum1.SetSentinelFromProviderValue(0);

            var enum2 = runtimeEntityType.AddProperty(
                "Enum2",
                typeof(CompiledModelTestBase.AnEnum?),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Enum2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Enum2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            enum2.SetGetter(
                CompiledModelTestBase.AnEnum? (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Enum2(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => !(PrincipalBaseUnsafeAccessors.Enum2(entity).HasValue),
                CompiledModelTestBase.AnEnum? (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Enum2(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => !(PrincipalBaseUnsafeAccessors.Enum2(instance).HasValue));
            enum2.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum? value) => PrincipalBaseUnsafeAccessors.Enum2(entity) = (value == null ? value : ((CompiledModelTestBase.AnEnum? )(((CompiledModelTestBase.AnEnum)(value))))));
            enum2.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum? value) => PrincipalBaseUnsafeAccessors.Enum2(entity) = (value == null ? value : ((CompiledModelTestBase.AnEnum? )(((CompiledModelTestBase.AnEnum)(value))))));
            enum2.SetAccessors(
                CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Enum2(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Enum2(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AnEnum?>(enum2, 3),
                CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum2),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            enum2.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            enum2.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                    bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                    bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                    int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                    CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AnEnum, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                        int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                        CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value)))));
            enum2.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.AnEnum>(enum2.TypeMapping.Comparer));
            enum2.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.AnEnum>(enum2.TypeMapping.KeyComparer));

            var flagsEnum1 = runtimeEntityType.AddProperty(
                "FlagsEnum1",
                typeof(CompiledModelTestBase.AFlagsEnum),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<FlagsEnum1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            flagsEnum1.SetGetter(
                CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.FlagsEnum1(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum1(entity))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))),
                CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.FlagsEnum1(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum1(instance))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))));
            flagsEnum1.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) => PrincipalBaseUnsafeAccessors.FlagsEnum1(entity) = value);
            flagsEnum1.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) => PrincipalBaseUnsafeAccessors.FlagsEnum1(entity) = value);
            flagsEnum1.SetAccessors(
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.FlagsEnum1(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.FlagsEnum1(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1, 4),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            flagsEnum1.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            flagsEnum1.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                    bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                    bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                    int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                    CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AFlagsEnum, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                        int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                        CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value)))));
            flagsEnum1.SetSentinelFromProviderValue(0);

            var flagsEnum2 = runtimeEntityType.AddProperty(
                "FlagsEnum2",
                typeof(CompiledModelTestBase.AFlagsEnum),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<FlagsEnum2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            flagsEnum2.SetGetter(
                CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.FlagsEnum2(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum2(entity))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))),
                CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.FlagsEnum2(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum2(instance))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))));
            flagsEnum2.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) => PrincipalBaseUnsafeAccessors.FlagsEnum2(entity) = value);
            flagsEnum2.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) => PrincipalBaseUnsafeAccessors.FlagsEnum2(entity) = value);
            flagsEnum2.SetAccessors(
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.FlagsEnum2(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.FlagsEnum2(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2, 5),
                CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            flagsEnum2.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            flagsEnum2.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                    bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                keyComparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                    bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                    int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                    CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                converter: new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                    int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                    CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value))),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AFlagsEnum, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                        int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                        CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value)))));
            flagsEnum2.SetSentinelFromProviderValue(0);

            var principalBaseId = runtimeEntityType.AddProperty(
                "PrincipalBaseId",
                typeof(long?),
                nullable: true);
            principalBaseId.SetAccessors(
                long? (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(6) ? entry.ReadStoreGeneratedValue<long?>(0) : (entry.FlaggedAsTemporary(6) && !(entry.ReadShadowValue<long?>(1).HasValue) ? entry.ReadTemporaryValue<long?>(0) : entry.ReadShadowValue<long?>(1))),
                long? (InternalEntityEntry entry) => entry.ReadShadowValue<long?>(1),
                long? (InternalEntityEntry entry) => entry.ReadOriginalValue<long?>(principalBaseId, 6),
                long? (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<long?>(principalBaseId, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            principalBaseId.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 0);
            principalBaseId.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                keyComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                providerValueComparer: new ValueComparer<long>(
                    bool (long v1, long v2) => v1 == v2,
                    int (long v) => ((object)v).GetHashCode(),
                    long (long v) => v),
                clrType: typeof(long),
                jsonValueReaderWriter: JsonInt64ReaderWriter.Instance);
            principalBaseId.SetValueComparer(new NullableValueComparer<long>(principalBaseId.TypeMapping.Comparer));
            principalBaseId.SetKeyValueComparer(new NullableValueComparer<long>(principalBaseId.TypeMapping.KeyComparer));
            principalBaseId.SetCurrentValueComparer(new EntryCurrentValueComparer<long?>(principalBaseId));

            var refTypeEnumerable = runtimeEntityType.AddProperty(
                "RefTypeEnumerable",
                typeof(IEnumerable<string>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<RefTypeEnumerable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            refTypeEnumerable.SetGetter(
                IEnumerable<string> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(entity) == null,
                IEnumerable<string> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(instance) == null);
            refTypeEnumerable.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(entity) = value);
            refTypeEnumerable.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(entity) = value);
            refTypeEnumerable.SetAccessors(
                IEnumerable<string> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IEnumerable<string> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IEnumerable<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<string>>(refTypeEnumerable, 7),
                IEnumerable<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable),
                object (ValueBuffer valueBuffer) => valueBuffer[7]);
            refTypeEnumerable.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            refTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v)),
                keyComparer: new ValueComparer<IEnumerable<string>>(
                    bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                    int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                    IEnumerable<string> (IEnumerable<string> v) => v),
                providerValueComparer: new ValueComparer<IEnumerable<string>>(
                    bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                    int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                    IEnumerable<string> (IEnumerable<string> v) => v),
                clrType: typeof(IEnumerable<string>),
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                    JsonStringReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    keyComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    clrType: typeof(string),
                    jsonValueReaderWriter: JsonStringReaderWriter.Instance));

            var refTypeIList = runtimeEntityType.AddProperty(
                "RefTypeIList",
                typeof(IList<string>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<RefTypeIList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            refTypeIList.SetGetter(
                IList<string> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.RefTypeIList(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.RefTypeIList(entity) == null,
                IList<string> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeIList(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeIList(instance) == null);
            refTypeIList.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, IList<string> value) => PrincipalBaseUnsafeAccessors.RefTypeIList(entity) = value);
            refTypeIList.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, IList<string> value) => PrincipalBaseUnsafeAccessors.RefTypeIList(entity) = value);
            refTypeIList.SetAccessors(
                IList<string> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.RefTypeIList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IList<string> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.RefTypeIList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IList<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<string>>(refTypeIList, 8),
                IList<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<string>>(refTypeIList),
                object (ValueBuffer valueBuffer) => valueBuffer[8]);
            refTypeIList.SetPropertyIndexes(
                index: 8,
                originalValueIndex: 8,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            refTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v)),
                keyComparer: new ValueComparer<IList<string>>(
                    bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                    int (IList<string> v) => ((object)v).GetHashCode(),
                    IList<string> (IList<string> v) => v),
                providerValueComparer: new ValueComparer<IList<string>>(
                    bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                    int (IList<string> v) => ((object)v).GetHashCode(),
                    IList<string> (IList<string> v) => v),
                clrType: typeof(IList<string>),
                jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                    JsonStringReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    keyComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    clrType: typeof(string),
                    jsonValueReaderWriter: JsonStringReaderWriter.Instance));

            var valueTypeArray = runtimeEntityType.AddProperty(
                "ValueTypeArray",
                typeof(DateTime[]),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueTypeArray.SetGetter(
                DateTime[] (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeArray(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeArray(entity) == null,
                DateTime[] (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeArray(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeArray(instance) == null);
            valueTypeArray.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) => PrincipalBaseUnsafeAccessors.ValueTypeArray(entity) = value);
            valueTypeArray.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) => PrincipalBaseUnsafeAccessors.ValueTypeArray(entity) = value);
            valueTypeArray.SetAccessors(
                DateTime[] (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeArray(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                DateTime[] (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeArray(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                DateTime[] (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime[]>(valueTypeArray, 9),
                DateTime[] (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime[]>(valueTypeArray),
                object (ValueBuffer valueBuffer) => valueBuffer[9]);
            valueTypeArray.SetPropertyIndexes(
                index: 9,
                originalValueIndex: 9,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            valueTypeArray.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<DateTime[], DateTime>(new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v)),
                keyComparer: new ValueComparer<DateTime[]>(
                    bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                    int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                    DateTime[] (DateTime[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<DateTime[]>(
                    bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                    int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                    DateTime[] (DateTime[] source) => source.ToArray()),
                clrType: typeof(DateTime[]),
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<DateTime[], DateTime>(
                    JsonDateTimeReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateTime>(
                        bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                        int (DateTime v) => ((object)v).GetHashCode(),
                        DateTime (DateTime v) => v),
                    keyComparer: new ValueComparer<DateTime>(
                        bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                        int (DateTime v) => ((object)v).GetHashCode(),
                        DateTime (DateTime v) => v),
                    providerValueComparer: new ValueComparer<DateTime>(
                        bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                        int (DateTime v) => ((object)v).GetHashCode(),
                        DateTime (DateTime v) => v),
                    clrType: typeof(DateTime),
                    jsonValueReaderWriter: JsonDateTimeReaderWriter.Instance));

            var valueTypeEnumerable = runtimeEntityType.AddProperty(
                "ValueTypeEnumerable",
                typeof(IEnumerable<byte>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeEnumerable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueTypeEnumerable.SetGetter(
                IEnumerable<byte> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(entity) == null,
                IEnumerable<byte> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(instance) == null);
            valueTypeEnumerable.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(entity) = value);
            valueTypeEnumerable.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(entity) = value);
            valueTypeEnumerable.SetAccessors(
                IEnumerable<byte> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IEnumerable<byte> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IEnumerable<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<byte>>(valueTypeEnumerable, 10),
                IEnumerable<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable),
                object (ValueBuffer valueBuffer) => valueBuffer[10]);
            valueTypeEnumerable.SetPropertyIndexes(
                index: 10,
                originalValueIndex: 10,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            valueTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                    bool (byte v1, byte v2) => v1 == v2,
                    int (byte v) => ((int)(v)),
                    byte (byte v) => v)),
                keyComparer: new ValueComparer<IEnumerable<byte>>(
                    bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                    int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                    IEnumerable<byte> (IEnumerable<byte> v) => v),
                providerValueComparer: new ValueComparer<IEnumerable<byte>>(
                    bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                    int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                    IEnumerable<byte> (IEnumerable<byte> v) => v),
                clrType: typeof(IEnumerable<byte>),
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                    JsonByteReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    keyComparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    clrType: typeof(byte),
                    jsonValueReaderWriter: JsonByteReaderWriter.Instance));

            var valueTypeIList = runtimeEntityType.AddProperty(
                "ValueTypeIList",
                typeof(IList<byte>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeIList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueTypeIList.SetGetter(
                IList<byte> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeIList(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeIList(entity) == null,
                IList<byte> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeIList(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeIList(instance) == null);
            valueTypeIList.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) => PrincipalBaseUnsafeAccessors.ValueTypeIList(entity) = value);
            valueTypeIList.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) => PrincipalBaseUnsafeAccessors.ValueTypeIList(entity) = value);
            valueTypeIList.SetAccessors(
                IList<byte> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeIList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IList<byte> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeIList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                IList<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<byte>>(valueTypeIList, 11),
                IList<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<byte>>(valueTypeIList),
                object (ValueBuffer valueBuffer) => valueBuffer[11]);
            valueTypeIList.SetPropertyIndexes(
                index: 11,
                originalValueIndex: 11,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            valueTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                    bool (byte v1, byte v2) => v1 == v2,
                    int (byte v) => ((int)(v)),
                    byte (byte v) => v)),
                keyComparer: new ValueComparer<IList<byte>>(
                    bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                    int (IList<byte> v) => ((object)v).GetHashCode(),
                    IList<byte> (IList<byte> v) => v),
                providerValueComparer: new ValueComparer<IList<byte>>(
                    bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                    int (IList<byte> v) => ((object)v).GetHashCode(),
                    IList<byte> (IList<byte> v) => v),
                clrType: typeof(IList<byte>),
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                    JsonByteReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    keyComparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    providerValueComparer: new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v),
                    clrType: typeof(byte),
                    jsonValueReaderWriter: JsonByteReaderWriter.Instance));

            var valueTypeList = runtimeEntityType.AddProperty(
                "ValueTypeList",
                typeof(List<short>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            valueTypeList.SetGetter(
                List<short> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeList(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.ValueTypeList(entity) == null,
                List<short> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeList(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeList(instance) == null);
            valueTypeList.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, List<short> value) => PrincipalBaseUnsafeAccessors.ValueTypeList(entity) = value);
            valueTypeList.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, List<short> value) => PrincipalBaseUnsafeAccessors.ValueTypeList(entity) = value);
            valueTypeList.SetAccessors(
                List<short> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                List<short> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.ValueTypeList(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                List<short> (InternalEntityEntry entry) => entry.ReadOriginalValue<List<short>>(valueTypeList, 12),
                List<short> (InternalEntityEntry entry) => entry.GetCurrentValue<List<short>>(valueTypeList),
                object (ValueBuffer valueBuffer) => valueBuffer[12]);
            valueTypeList.SetPropertyIndexes(
                index: 12,
                originalValueIndex: 12,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            valueTypeList.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ListOfValueTypesComparer<List<short>, short>(new ValueComparer<short>(
                    bool (short v1, short v2) => v1 == v2,
                    int (short v) => ((int)(v)),
                    short (short v) => v)),
                keyComparer: new ValueComparer<List<short>>(
                    bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                    int (List<short> v) => ((object)v).GetHashCode(),
                    List<short> (List<short> v) => v),
                providerValueComparer: new ValueComparer<List<short>>(
                    bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                    int (List<short> v) => ((object)v).GetHashCode(),
                    List<short> (List<short> v) => v),
                clrType: typeof(List<short>),
                jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<short>, short>(
                    JsonInt16ReaderWriter.Instance),
                elementMapping: CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<short>(
                        bool (short v1, short v2) => v1 == v2,
                        int (short v) => ((int)(v)),
                        short (short v) => v),
                    keyComparer: new ValueComparer<short>(
                        bool (short v1, short v2) => v1 == v2,
                        int (short v) => ((int)(v)),
                        short (short v) => v),
                    providerValueComparer: new ValueComparer<short>(
                        bool (short v1, short v2) => v1 == v2,
                        int (short v) => ((int)(v)),
                        short (short v) => v),
                    clrType: typeof(short),
                    jsonValueReaderWriter: JsonInt16ReaderWriter.Instance));

            var __id = runtimeEntityType.AddProperty(
                "__id",
                typeof(string),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new IdValueGeneratorFactory().Create);
            __id.SetAccessors(
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(2),
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(2),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(__id, 13),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(__id),
                object (ValueBuffer valueBuffer) => valueBuffer[13]);
            __id.SetPropertyIndexes(
                index: 13,
                originalValueIndex: 13,
                shadowIndex: 2,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            __id.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                clrType: typeof(string),
                jsonValueReaderWriter: JsonStringReaderWriter.Instance);
            __id.AddAnnotation("Cosmos:PropertyName", "id");

            var __jObject = runtimeEntityType.AddProperty(
                "__jObject",
                typeof(JObject),
                nullable: true);
            __jObject.SetAccessors(
                JObject (InternalEntityEntry entry) => entry.ReadShadowValue<JObject>(3),
                JObject (InternalEntityEntry entry) => entry.ReadShadowValue<JObject>(3),
                JObject (InternalEntityEntry entry) => entry.ReadOriginalValue<JObject>(__jObject, 14),
                JObject (InternalEntityEntry entry) => entry.GetCurrentValue<JObject>(__jObject),
                object (ValueBuffer valueBuffer) => valueBuffer[14]);
            __jObject.SetPropertyIndexes(
                index: 14,
                originalValueIndex: 14,
                shadowIndex: 3,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            __jObject.TypeMapping = CosmosTypeMapping.Default.Clone(
                comparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                keyComparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                providerValueComparer: new ValueComparer<JObject>(
                    bool (JObject v1, JObject v2) => object.Equals(v1, v2),
                    int (JObject v) => ((object)v).GetHashCode(),
                    JObject (JObject v) => v),
                clrType: typeof(JObject));
            __jObject.AddAnnotation("Cosmos:PropertyName", "");

            OwnedComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static class OwnedComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("Owned",
                    typeof(CompiledModelTestBase.OwnedType),
                    "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType",
                    typeof(CompiledModelTestBase.OwnedType),
                    propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Owned", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("_ownedField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyAccessMode: PropertyAccessMode.Field,
                    changeTrackingStrategy: ChangeTrackingStrategy.ChangingAndChangedNotificationsWithOriginalValues,
                    propertyCount: 8,
                    complexPropertyCount: 1);

                var complexType = complexProperty.ComplexType;
                complexProperty.SetGetter(
                    CompiledModelTestBase.OwnedType (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors._ownedField(entity),
                    bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors._ownedField(entity) == null,
                    CompiledModelTestBase.OwnedType (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors._ownedField(instance),
                    bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors._ownedField(instance) == null);
                complexProperty.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.OwnedType value) => PrincipalBaseUnsafeAccessors._ownedField(entity) = value);
                complexProperty.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.OwnedType value) => PrincipalBaseUnsafeAccessors._ownedField(entity) = value);
                complexProperty.SetAccessors(
                    CompiledModelTestBase.OwnedType (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                    CompiledModelTestBase.OwnedType (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                    null,
                    CompiledModelTestBase.OwnedType (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.OwnedType>(complexProperty),
                    null);
                complexProperty.SetPropertyIndexes(
                    index: 0,
                    originalValueIndex: -1,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                var details = complexType.AddProperty(
                    "Details",
                    typeof(string),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("Details", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_details", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    propertyAccessMode: PropertyAccessMode.FieldDuringConstruction,
                    nullable: true,
                    maxLength: 64,
                    unicode: false,
                    precision: 3,
                    scale: 2,
                    sentinel: "");
                details.SetGetter(
                    string (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(string) : PrincipalBaseUnsafeAccessors._ownedField(entity).Details),
                    bool (CompiledModelTestBase.PrincipalBase entity) => !((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(string) : PrincipalBaseUnsafeAccessors._ownedField(entity).Details) == null) && (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(string) : PrincipalBaseUnsafeAccessors._ownedField(entity).Details) == "",
                    string (CompiledModelTestBase.OwnedType instance) => instance.Details,
                    bool (CompiledModelTestBase.OwnedType instance) => !(instance.Details == null) && instance.Details == "");
                details.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, string value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        level1.Details = value;
                    });
                details.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, string value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        level1.Details = value;
                    });
                details.SetAccessors(
                    string (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(string) : PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))).Details),
                    string (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(string) : PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))).Details),
                    string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(details, 15),
                    string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(details),
                    object (ValueBuffer valueBuffer) => valueBuffer[15]);
                details.SetPropertyIndexes(
                    index: 15,
                    originalValueIndex: 15,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                details.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    keyComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    providerValueComparer: new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v),
                    clrType: typeof(string),
                    jsonValueReaderWriter: JsonStringReaderWriter.Instance);
                details.AddAnnotation("foo", "bar");

                var number = complexType.AddProperty(
                    "Number",
                    typeof(int),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("Number", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("<Number>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: 0);
                number.SetGetter(
                    int (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(int) : OwnedTypeUnsafeAccessors.Number(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(int) : OwnedTypeUnsafeAccessors.Number(PrincipalBaseUnsafeAccessors._ownedField(entity))) == 0,
                    int (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.Number(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.Number(instance) == 0);
                number.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, int value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors.Number(level1) = value;
                    });
                number.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, int value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors.Number(level1) = value;
                    });
                number.SetAccessors(
                    int (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(int) : OwnedTypeUnsafeAccessors.Number(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    int (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(int) : OwnedTypeUnsafeAccessors.Number(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(number, 16),
                    int (InternalEntityEntry entry) => entry.GetCurrentValue<int>(number),
                    object (ValueBuffer valueBuffer) => valueBuffer[16]);
                number.SetPropertyIndexes(
                    index: 16,
                    originalValueIndex: 16,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                number.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    keyComparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    providerValueComparer: new ValueComparer<int>(
                        bool (int v1, int v2) => v1 == v2,
                        int (int v) => v,
                        int (int v) => v),
                    clrType: typeof(int),
                    jsonValueReaderWriter: JsonInt32ReaderWriter.Instance);

                var refTypeEnumerable = complexType.AddProperty(
                    "RefTypeEnumerable",
                    typeof(IEnumerable<string>),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("RefTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_refTypeEnumerable", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                refTypeEnumerable.SetGetter(
                    IEnumerable<string> (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IEnumerable<string>) : OwnedTypeUnsafeAccessors._refTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IEnumerable<string>) : OwnedTypeUnsafeAccessors._refTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    IEnumerable<string> (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._refTypeEnumerable(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._refTypeEnumerable(instance) == null);
                refTypeEnumerable.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._refTypeEnumerable(level1) = value;
                    });
                refTypeEnumerable.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._refTypeEnumerable(level1) = value;
                    });
                refTypeEnumerable.SetAccessors(
                    IEnumerable<string> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IEnumerable<string>) : OwnedTypeUnsafeAccessors._refTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IEnumerable<string> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IEnumerable<string>) : OwnedTypeUnsafeAccessors._refTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IEnumerable<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<string>>(refTypeEnumerable, 17),
                    IEnumerable<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable),
                    object (ValueBuffer valueBuffer) => valueBuffer[17]);
                refTypeEnumerable.SetPropertyIndexes(
                    index: 17,
                    originalValueIndex: 17,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                refTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v)),
                    keyComparer: new ValueComparer<IEnumerable<string>>(
                        bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                        int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                        IEnumerable<string> (IEnumerable<string> v) => v),
                    providerValueComparer: new ValueComparer<IEnumerable<string>>(
                        bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                        int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                        IEnumerable<string> (IEnumerable<string> v) => v),
                    clrType: typeof(IEnumerable<string>),
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                        JsonStringReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        keyComparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        clrType: typeof(string),
                        jsonValueReaderWriter: JsonStringReaderWriter.Instance));

                var refTypeIList = complexType.AddProperty(
                    "RefTypeIList",
                    typeof(IList<string>),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("RefTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_refTypeIList", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                refTypeIList.SetGetter(
                    IList<string> (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IList<string>) : OwnedTypeUnsafeAccessors._refTypeIList(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IList<string>) : OwnedTypeUnsafeAccessors._refTypeIList(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    IList<string> (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._refTypeIList(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._refTypeIList(instance) == null);
                refTypeIList.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IList<string> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._refTypeIList(level1) = value;
                    });
                refTypeIList.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IList<string> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._refTypeIList(level1) = value;
                    });
                refTypeIList.SetAccessors(
                    IList<string> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IList<string>) : OwnedTypeUnsafeAccessors._refTypeIList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IList<string> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IList<string>) : OwnedTypeUnsafeAccessors._refTypeIList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IList<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<string>>(refTypeIList, 18),
                    IList<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<string>>(refTypeIList),
                    object (ValueBuffer valueBuffer) => valueBuffer[18]);
                refTypeIList.SetPropertyIndexes(
                    index: 18,
                    originalValueIndex: 18,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                refTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                        bool (string v1, string v2) => v1 == v2,
                        int (string v) => ((object)v).GetHashCode(),
                        string (string v) => v)),
                    keyComparer: new ValueComparer<IList<string>>(
                        bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                        int (IList<string> v) => ((object)v).GetHashCode(),
                        IList<string> (IList<string> v) => v),
                    providerValueComparer: new ValueComparer<IList<string>>(
                        bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                        int (IList<string> v) => ((object)v).GetHashCode(),
                        IList<string> (IList<string> v) => v),
                    clrType: typeof(IList<string>),
                    jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                        JsonStringReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        keyComparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        clrType: typeof(string),
                        jsonValueReaderWriter: JsonStringReaderWriter.Instance));

                var valueTypeArray = complexType.AddProperty(
                    "ValueTypeArray",
                    typeof(DateTime[]),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("ValueTypeArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_valueTypeArray", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                valueTypeArray.SetGetter(
                    DateTime[] (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(DateTime[]) : OwnedTypeUnsafeAccessors._valueTypeArray(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(DateTime[]) : OwnedTypeUnsafeAccessors._valueTypeArray(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    DateTime[] (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeArray(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeArray(instance) == null);
                valueTypeArray.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeArray(level1) = value;
                    });
                valueTypeArray.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeArray(level1) = value;
                    });
                valueTypeArray.SetAccessors(
                    DateTime[] (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(DateTime[]) : OwnedTypeUnsafeAccessors._valueTypeArray(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    DateTime[] (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(DateTime[]) : OwnedTypeUnsafeAccessors._valueTypeArray(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    DateTime[] (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime[]>(valueTypeArray, 19),
                    DateTime[] (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime[]>(valueTypeArray),
                    object (ValueBuffer valueBuffer) => valueBuffer[19]);
                valueTypeArray.SetPropertyIndexes(
                    index: 19,
                    originalValueIndex: 19,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                valueTypeArray.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<DateTime[], DateTime>(new ValueComparer<DateTime>(
                        bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                        int (DateTime v) => ((object)v).GetHashCode(),
                        DateTime (DateTime v) => v)),
                    keyComparer: new ValueComparer<DateTime[]>(
                        bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                        int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                        DateTime[] (DateTime[] source) => source.ToArray()),
                    providerValueComparer: new ValueComparer<DateTime[]>(
                        bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                        int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                        DateTime[] (DateTime[] source) => source.ToArray()),
                    clrType: typeof(DateTime[]),
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<DateTime[], DateTime>(
                        JsonDateTimeReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<DateTime>(
                            bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                            int (DateTime v) => ((object)v).GetHashCode(),
                            DateTime (DateTime v) => v),
                        keyComparer: new ValueComparer<DateTime>(
                            bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                            int (DateTime v) => ((object)v).GetHashCode(),
                            DateTime (DateTime v) => v),
                        providerValueComparer: new ValueComparer<DateTime>(
                            bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                            int (DateTime v) => ((object)v).GetHashCode(),
                            DateTime (DateTime v) => v),
                        clrType: typeof(DateTime),
                        jsonValueReaderWriter: JsonDateTimeReaderWriter.Instance));

                var valueTypeEnumerable = complexType.AddProperty(
                    "ValueTypeEnumerable",
                    typeof(IEnumerable<byte>),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("ValueTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_valueTypeEnumerable", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                valueTypeEnumerable.SetGetter(
                    IEnumerable<byte> (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IEnumerable<byte>) : OwnedTypeUnsafeAccessors._valueTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IEnumerable<byte>) : OwnedTypeUnsafeAccessors._valueTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    IEnumerable<byte> (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeEnumerable(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeEnumerable(instance) == null);
                valueTypeEnumerable.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeEnumerable(level1) = value;
                    });
                valueTypeEnumerable.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeEnumerable(level1) = value;
                    });
                valueTypeEnumerable.SetAccessors(
                    IEnumerable<byte> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IEnumerable<byte>) : OwnedTypeUnsafeAccessors._valueTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IEnumerable<byte> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IEnumerable<byte>) : OwnedTypeUnsafeAccessors._valueTypeEnumerable(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IEnumerable<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<byte>>(valueTypeEnumerable, 20),
                    IEnumerable<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable),
                    object (ValueBuffer valueBuffer) => valueBuffer[20]);
                valueTypeEnumerable.SetPropertyIndexes(
                    index: 20,
                    originalValueIndex: 20,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                valueTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v)),
                    keyComparer: new ValueComparer<IEnumerable<byte>>(
                        bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                        int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                        IEnumerable<byte> (IEnumerable<byte> v) => v),
                    providerValueComparer: new ValueComparer<IEnumerable<byte>>(
                        bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                        int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                        IEnumerable<byte> (IEnumerable<byte> v) => v),
                    clrType: typeof(IEnumerable<byte>),
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                        JsonByteReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        keyComparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        providerValueComparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        clrType: typeof(byte),
                        jsonValueReaderWriter: JsonByteReaderWriter.Instance));

                var valueTypeIList = complexType.AddProperty(
                    "ValueTypeIList",
                    typeof(IList<byte>),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("ValueTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("<ValueTypeIList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                valueTypeIList.SetGetter(
                    IList<byte> (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IList<byte>) : OwnedTypeUnsafeAccessors.ValueTypeIList(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(IList<byte>) : OwnedTypeUnsafeAccessors.ValueTypeIList(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    IList<byte> (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.ValueTypeIList(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.ValueTypeIList(instance) == null);
                valueTypeIList.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors.ValueTypeIList(level1) = value;
                    });
                valueTypeIList.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors.ValueTypeIList(level1) = value;
                    });
                valueTypeIList.SetAccessors(
                    IList<byte> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IList<byte>) : OwnedTypeUnsafeAccessors.ValueTypeIList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IList<byte> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(IList<byte>) : OwnedTypeUnsafeAccessors.ValueTypeIList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    IList<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<byte>>(valueTypeIList, 21),
                    IList<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<byte>>(valueTypeIList),
                    object (ValueBuffer valueBuffer) => valueBuffer[21]);
                valueTypeIList.SetPropertyIndexes(
                    index: 21,
                    originalValueIndex: 21,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                valueTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                        bool (byte v1, byte v2) => v1 == v2,
                        int (byte v) => ((int)(v)),
                        byte (byte v) => v)),
                    keyComparer: new ValueComparer<IList<byte>>(
                        bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                        int (IList<byte> v) => ((object)v).GetHashCode(),
                        IList<byte> (IList<byte> v) => v),
                    providerValueComparer: new ValueComparer<IList<byte>>(
                        bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                        int (IList<byte> v) => ((object)v).GetHashCode(),
                        IList<byte> (IList<byte> v) => v),
                    clrType: typeof(IList<byte>),
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                        JsonByteReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        keyComparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        providerValueComparer: new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v),
                        clrType: typeof(byte),
                        jsonValueReaderWriter: JsonByteReaderWriter.Instance));

                var valueTypeList = complexType.AddProperty(
                    "ValueTypeList",
                    typeof(List<short>),
                    propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("ValueTypeList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("_valueTypeList", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    nullable: true);
                valueTypeList.SetGetter(
                    List<short> (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(List<short>) : OwnedTypeUnsafeAccessors._valueTypeList(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                    bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(List<short>) : OwnedTypeUnsafeAccessors._valueTypeList(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                    List<short> (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeList(instance),
                    bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors._valueTypeList(instance) == null);
                valueTypeList.SetSetter(
                    (CompiledModelTestBase.PrincipalBase entity, List<short> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeList(level1) = value;
                    });
                valueTypeList.SetMaterializationSetter(
                    (CompiledModelTestBase.PrincipalBase entity, List<short> value) =>
                    {
                        var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                        OwnedTypeUnsafeAccessors._valueTypeList(level1) = value;
                    });
                valueTypeList.SetAccessors(
                    List<short> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(List<short>) : OwnedTypeUnsafeAccessors._valueTypeList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    List<short> (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(List<short>) : OwnedTypeUnsafeAccessors._valueTypeList(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                    List<short> (InternalEntityEntry entry) => entry.ReadOriginalValue<List<short>>(valueTypeList, 22),
                    List<short> (InternalEntityEntry entry) => entry.GetCurrentValue<List<short>>(valueTypeList),
                    object (ValueBuffer valueBuffer) => valueBuffer[22]);
                valueTypeList.SetPropertyIndexes(
                    index: 22,
                    originalValueIndex: 22,
                    shadowIndex: -1,
                    relationshipIndex: -1,
                    storeGenerationIndex: -1);
                valueTypeList.TypeMapping = CosmosTypeMapping.Default.Clone(
                    comparer: new ListOfValueTypesComparer<List<short>, short>(new ValueComparer<short>(
                        bool (short v1, short v2) => v1 == v2,
                        int (short v) => ((int)(v)),
                        short (short v) => v)),
                    keyComparer: new ValueComparer<List<short>>(
                        bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                        int (List<short> v) => ((object)v).GetHashCode(),
                        List<short> (List<short> v) => v),
                    providerValueComparer: new ValueComparer<List<short>>(
                        bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                        int (List<short> v) => ((object)v).GetHashCode(),
                        List<short> (List<short> v) => v),
                    clrType: typeof(List<short>),
                    jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<short>, short>(
                        JsonInt16ReaderWriter.Instance),
                    elementMapping: CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<short>(
                            bool (short v1, short v2) => v1 == v2,
                            int (short v) => ((int)(v)),
                            short (short v) => v),
                        keyComparer: new ValueComparer<short>(
                            bool (short v1, short v2) => v1 == v2,
                            int (short v) => ((int)(v)),
                            short (short v) => v),
                        providerValueComparer: new ValueComparer<short>(
                            bool (short v1, short v2) => v1 == v2,
                            int (short v) => ((int)(v)),
                            short (short v) => v),
                        clrType: typeof(short),
                        jsonValueReaderWriter: JsonInt16ReaderWriter.Instance));

                PrincipalComplexProperty.Create(complexType);
                complexType.AddAnnotation("go", "brr");
                complexProperty.AddAnnotation("goo", "ber");
                return complexProperty;
            }

            public static class PrincipalComplexProperty
            {
                public static RuntimeComplexProperty Create(RuntimeComplexType declaringType)
                {
                    var complexProperty = declaringType.AddComplexProperty("Principal",
                        typeof(CompiledModelTestBase.PrincipalBase),
                        "Microsoft.EntityFrameworkCore.Scaffolding.CompiledModelTestBase+PrincipalBase.Owned#OwnedType.Principal#PrincipalBase",
                        typeof(CompiledModelTestBase.PrincipalBase),
                        propertyInfo: typeof(CompiledModelTestBase.OwnedType).GetProperty("Principal", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.OwnedType).GetField("<Principal>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        propertyCount: 12);

                    var complexType = complexProperty.ComplexType;
                    complexProperty.SetGetter(
                        CompiledModelTestBase.PrincipalBase (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null,
                        CompiledModelTestBase.PrincipalBase (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.Principal(instance),
                        bool (CompiledModelTestBase.OwnedType instance) => OwnedTypeUnsafeAccessors.Principal(instance) == null);
                    complexProperty.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.PrincipalBase value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            OwnedTypeUnsafeAccessors.Principal(level1) = value;
                        });
                    complexProperty.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.PrincipalBase value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            OwnedTypeUnsafeAccessors.Principal(level1) = value;
                        });
                    complexProperty.SetAccessors(
                        CompiledModelTestBase.PrincipalBase (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                        CompiledModelTestBase.PrincipalBase (InternalEntityEntry entry) => (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))),
                        null,
                        CompiledModelTestBase.PrincipalBase (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.PrincipalBase>(complexProperty),
                        null);
                    complexProperty.SetPropertyIndexes(
                        index: 1,
                        originalValueIndex: -1,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    var alternateId = complexType.AddProperty(
                        "AlternateId",
                        typeof(Guid),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("AlternateId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    alternateId.SetGetter(
                        Guid (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(Guid) : (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))).AlternateId),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(Guid) : (PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))).AlternateId) == new Guid("00000000-0000-0000-0000-000000000000"),
                        Guid (CompiledModelTestBase.PrincipalBase instance) => instance.AlternateId,
                        bool (CompiledModelTestBase.PrincipalBase instance) => instance.AlternateId == new Guid("00000000-0000-0000-0000-000000000000"));
                    alternateId.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, Guid value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            level2.AlternateId = value;
                        });
                    alternateId.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, Guid value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            level2.AlternateId = value;
                        });
                    alternateId.SetAccessors(
                        Guid (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(Guid) : (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))).AlternateId),
                        Guid (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(Guid) : (PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))).AlternateId),
                        Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(alternateId, 23),
                        Guid (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(alternateId),
                        object (ValueBuffer valueBuffer) => valueBuffer[23]);
                    alternateId.SetPropertyIndexes(
                        index: 23,
                        originalValueIndex: 23,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    alternateId.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<Guid>(
                            bool (Guid v1, Guid v2) => v1 == v2,
                            int (Guid v) => ((object)v).GetHashCode(),
                            Guid (Guid v) => v),
                        keyComparer: new ValueComparer<Guid>(
                            bool (Guid v1, Guid v2) => v1 == v2,
                            int (Guid v) => ((object)v).GetHashCode(),
                            Guid (Guid v) => v),
                        providerValueComparer: new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v),
                        converter: new ValueConverter<Guid, string>(
                            string (Guid v) => v.ToString("D"),
                            Guid (string v) => new Guid(v)),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Guid, string>(
                            JsonStringReaderWriter.Instance,
                            new ValueConverter<Guid, string>(
                                string (Guid v) => v.ToString("D"),
                                Guid (string v) => new Guid(v))));
                    alternateId.SetSentinelFromProviderValue("00000000-0000-0000-0000-000000000000");

                    var enum1 = complexType.AddProperty(
                        "Enum1",
                        typeof(CompiledModelTestBase.AnEnum),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Enum1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Enum1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    enum1.SetGetter(
                        CompiledModelTestBase.AnEnum (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AnEnum) : PrincipalBaseUnsafeAccessors.Enum1((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AnEnum) : PrincipalBaseUnsafeAccessors.Enum1((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))))), ((object)((CompiledModelTestBase.AnEnum)0L))),
                        CompiledModelTestBase.AnEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Enum1(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.Enum1(instance))), ((object)((CompiledModelTestBase.AnEnum)0L))));
                    enum1.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Enum1(level2) = value;
                        });
                    enum1.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Enum1(level2) = value;
                        });
                    enum1.SetAccessors(
                        CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AnEnum) : PrincipalBaseUnsafeAccessors.Enum1((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AnEnum) : PrincipalBaseUnsafeAccessors.Enum1((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AnEnum>(enum1, 24),
                        CompiledModelTestBase.AnEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AnEnum>(enum1),
                        object (ValueBuffer valueBuffer) => valueBuffer[24]);
                    enum1.SetPropertyIndexes(
                        index: 24,
                        originalValueIndex: 24,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    enum1.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                            bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                            bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            bool (int v1, int v2) => v1 == v2,
                            int (int v) => v,
                            int (int v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                            int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                            CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value))),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AnEnum, int>(
                            JsonInt32ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                                int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                                CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value)))));
                    enum1.SetSentinelFromProviderValue(0);

                    var enum2 = complexType.AddProperty(
                        "Enum2",
                        typeof(CompiledModelTestBase.AnEnum?),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Enum2", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Enum2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    enum2.SetGetter(
                        CompiledModelTestBase.AnEnum? (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AnEnum? ) : PrincipalBaseUnsafeAccessors.Enum2((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => !(((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AnEnum? ) : PrincipalBaseUnsafeAccessors.Enum2((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))).HasValue),
                        CompiledModelTestBase.AnEnum? (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Enum2(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => !(PrincipalBaseUnsafeAccessors.Enum2(instance).HasValue));
                    enum2.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum? value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Enum2(level2) = (value == null ? value : ((CompiledModelTestBase.AnEnum? )(((CompiledModelTestBase.AnEnum)(value)))));
                        });
                    enum2.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AnEnum? value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Enum2(level2) = (value == null ? value : ((CompiledModelTestBase.AnEnum? )(((CompiledModelTestBase.AnEnum)(value)))));
                        });
                    enum2.SetAccessors(
                        CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AnEnum? ) : PrincipalBaseUnsafeAccessors.Enum2((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AnEnum? ) : PrincipalBaseUnsafeAccessors.Enum2((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AnEnum?>(enum2, 25),
                        CompiledModelTestBase.AnEnum? (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum2),
                        object (ValueBuffer valueBuffer) => valueBuffer[25]);
                    enum2.SetPropertyIndexes(
                        index: 25,
                        originalValueIndex: 25,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    enum2.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                            bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.AnEnum>(
                            bool (CompiledModelTestBase.AnEnum v1, CompiledModelTestBase.AnEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AnEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AnEnum (CompiledModelTestBase.AnEnum v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            bool (int v1, int v2) => v1 == v2,
                            int (int v) => v,
                            int (int v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                            int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                            CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value))),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AnEnum, int>(
                            JsonInt32ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.AnEnum, int>(
                                int (CompiledModelTestBase.AnEnum value) => ((int)(value)),
                                CompiledModelTestBase.AnEnum (int value) => ((CompiledModelTestBase.AnEnum)(value)))));
                    enum2.SetValueComparer(new NullableValueComparer<CompiledModelTestBase.AnEnum>(enum2.TypeMapping.Comparer));
                    enum2.SetKeyValueComparer(new NullableValueComparer<CompiledModelTestBase.AnEnum>(enum2.TypeMapping.KeyComparer));

                    var flagsEnum1 = complexType.AddProperty(
                        "FlagsEnum1",
                        typeof(CompiledModelTestBase.AFlagsEnum),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("FlagsEnum1", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<FlagsEnum1>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    flagsEnum1.SetGetter(
                        CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum1((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum1((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))),
                        CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.FlagsEnum1(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum1(instance))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))));
                    flagsEnum1.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.FlagsEnum1(level2) = value;
                        });
                    flagsEnum1.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.FlagsEnum1(level2) = value;
                        });
                    flagsEnum1.SetAccessors(
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum1((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum1((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1, 26),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1),
                        object (ValueBuffer valueBuffer) => valueBuffer[26]);
                    flagsEnum1.SetPropertyIndexes(
                        index: 26,
                        originalValueIndex: 26,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    flagsEnum1.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                            bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                            bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            bool (int v1, int v2) => v1 == v2,
                            int (int v) => v,
                            int (int v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                            int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                            CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value))),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AFlagsEnum, int>(
                            JsonInt32ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                                int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                                CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value)))));
                    flagsEnum1.SetSentinelFromProviderValue(0);

                    var flagsEnum2 = complexType.AddProperty(
                        "FlagsEnum2",
                        typeof(CompiledModelTestBase.AFlagsEnum),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("FlagsEnum2", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<FlagsEnum2>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                    flagsEnum2.SetGetter(
                        CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum2((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => object.Equals(((object)(((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum2((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))),
                        CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.FlagsEnum2(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => object.Equals(((object)(PrincipalBaseUnsafeAccessors.FlagsEnum2(instance))), ((object)((CompiledModelTestBase.AFlagsEnum)0L))));
                    flagsEnum2.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.FlagsEnum2(level2) = value;
                        });
                    flagsEnum2.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, CompiledModelTestBase.AFlagsEnum value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.FlagsEnum2(level2) = value;
                        });
                    flagsEnum2.SetAccessors(
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum2((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(CompiledModelTestBase.AFlagsEnum) : PrincipalBaseUnsafeAccessors.FlagsEnum2((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.ReadOriginalValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2, 27),
                        CompiledModelTestBase.AFlagsEnum (InternalEntityEntry entry) => entry.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2),
                        object (ValueBuffer valueBuffer) => valueBuffer[27]);
                    flagsEnum2.SetPropertyIndexes(
                        index: 27,
                        originalValueIndex: 27,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    flagsEnum2.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                            bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                        keyComparer: new ValueComparer<CompiledModelTestBase.AFlagsEnum>(
                            bool (CompiledModelTestBase.AFlagsEnum v1, CompiledModelTestBase.AFlagsEnum v2) => object.Equals(((object)(v1)), ((object)(v2))),
                            int (CompiledModelTestBase.AFlagsEnum v) => ((object)v).GetHashCode(),
                            CompiledModelTestBase.AFlagsEnum (CompiledModelTestBase.AFlagsEnum v) => v),
                        providerValueComparer: new ValueComparer<int>(
                            bool (int v1, int v2) => v1 == v2,
                            int (int v) => v,
                            int (int v) => v),
                        converter: new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                            int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                            CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value))),
                        jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CompiledModelTestBase.AFlagsEnum, int>(
                            JsonInt32ReaderWriter.Instance,
                            new ValueConverter<CompiledModelTestBase.AFlagsEnum, int>(
                                int (CompiledModelTestBase.AFlagsEnum value) => ((int)(value)),
                                CompiledModelTestBase.AFlagsEnum (int value) => ((CompiledModelTestBase.AFlagsEnum)(value)))));
                    flagsEnum2.SetSentinelFromProviderValue(0);

                    var id = complexType.AddProperty(
                        "Id",
                        typeof(long?),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    id.SetGetter(
                        long? (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(long? ) : PrincipalBaseUnsafeAccessors.Id((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => !(((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(long? ) : PrincipalBaseUnsafeAccessors.Id((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))).HasValue),
                        long? (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Id(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => !(PrincipalBaseUnsafeAccessors.Id(instance).HasValue));
                    id.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, long? value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Id(level2) = value;
                        });
                    id.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, long? value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.Id(level2) = value;
                        });
                    id.SetAccessors(
                        long? (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(long? ) : PrincipalBaseUnsafeAccessors.Id((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        long? (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(long? ) : PrincipalBaseUnsafeAccessors.Id((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        long? (InternalEntityEntry entry) => entry.ReadOriginalValue<long?>(id, 28),
                        long? (InternalEntityEntry entry) => entry.GetCurrentValue<long?>(id),
                        object (ValueBuffer valueBuffer) => valueBuffer[28]);
                    id.SetPropertyIndexes(
                        index: 28,
                        originalValueIndex: 28,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    id.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ValueComparer<long>(
                            bool (long v1, long v2) => v1 == v2,
                            int (long v) => ((object)v).GetHashCode(),
                            long (long v) => v),
                        keyComparer: new ValueComparer<long>(
                            bool (long v1, long v2) => v1 == v2,
                            int (long v) => ((object)v).GetHashCode(),
                            long (long v) => v),
                        providerValueComparer: new ValueComparer<long>(
                            bool (long v1, long v2) => v1 == v2,
                            int (long v) => ((object)v).GetHashCode(),
                            long (long v) => v),
                        clrType: typeof(long),
                        jsonValueReaderWriter: JsonInt64ReaderWriter.Instance);
                    id.SetValueComparer(new NullableValueComparer<long>(id.TypeMapping.Comparer));
                    id.SetKeyValueComparer(new NullableValueComparer<long>(id.TypeMapping.KeyComparer));

                    var refTypeEnumerable = complexType.AddProperty(
                        "RefTypeEnumerable",
                        typeof(IEnumerable<string>),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("RefTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<RefTypeEnumerable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    refTypeEnumerable.SetGetter(
                        IEnumerable<string> (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IEnumerable<string>) : PrincipalBaseUnsafeAccessors.RefTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IEnumerable<string>) : PrincipalBaseUnsafeAccessors.RefTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        IEnumerable<string> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeEnumerable(instance) == null);
                    refTypeEnumerable.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.RefTypeEnumerable(level2) = value;
                        });
                    refTypeEnumerable.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IEnumerable<string> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.RefTypeEnumerable(level2) = value;
                        });
                    refTypeEnumerable.SetAccessors(
                        IEnumerable<string> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IEnumerable<string>) : PrincipalBaseUnsafeAccessors.RefTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IEnumerable<string> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IEnumerable<string>) : PrincipalBaseUnsafeAccessors.RefTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IEnumerable<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<string>>(refTypeEnumerable, 29),
                        IEnumerable<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable),
                        object (ValueBuffer valueBuffer) => valueBuffer[29]);
                    refTypeEnumerable.SetPropertyIndexes(
                        index: 29,
                        originalValueIndex: 29,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    refTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v)),
                        keyComparer: new ValueComparer<IEnumerable<string>>(
                            bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                            int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                            IEnumerable<string> (IEnumerable<string> v) => v),
                        providerValueComparer: new ValueComparer<IEnumerable<string>>(
                            bool (IEnumerable<string> v1, IEnumerable<string> v2) => object.Equals(v1, v2),
                            int (IEnumerable<string> v) => ((object)v).GetHashCode(),
                            IEnumerable<string> (IEnumerable<string> v) => v),
                        clrType: typeof(IEnumerable<string>),
                        jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                            JsonStringReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            keyComparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            providerValueComparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            clrType: typeof(string),
                            jsonValueReaderWriter: JsonStringReaderWriter.Instance));

                    var refTypeIList = complexType.AddProperty(
                        "RefTypeIList",
                        typeof(IList<string>),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("RefTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<RefTypeIList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    refTypeIList.SetGetter(
                        IList<string> (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IList<string>) : PrincipalBaseUnsafeAccessors.RefTypeIList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IList<string>) : PrincipalBaseUnsafeAccessors.RefTypeIList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        IList<string> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeIList(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.RefTypeIList(instance) == null);
                    refTypeIList.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IList<string> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.RefTypeIList(level2) = value;
                        });
                    refTypeIList.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IList<string> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.RefTypeIList(level2) = value;
                        });
                    refTypeIList.SetAccessors(
                        IList<string> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IList<string>) : PrincipalBaseUnsafeAccessors.RefTypeIList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IList<string> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IList<string>) : PrincipalBaseUnsafeAccessors.RefTypeIList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IList<string> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<string>>(refTypeIList, 30),
                        IList<string> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<string>>(refTypeIList),
                        object (ValueBuffer valueBuffer) => valueBuffer[30]);
                    refTypeIList.SetPropertyIndexes(
                        index: 30,
                        originalValueIndex: 30,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    refTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfReferenceTypesComparer<List<string>, string>(new ValueComparer<string>(
                            bool (string v1, string v2) => v1 == v2,
                            int (string v) => ((object)v).GetHashCode(),
                            string (string v) => v)),
                        keyComparer: new ValueComparer<IList<string>>(
                            bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                            int (IList<string> v) => ((object)v).GetHashCode(),
                            IList<string> (IList<string> v) => v),
                        providerValueComparer: new ValueComparer<IList<string>>(
                            bool (IList<string> v1, IList<string> v2) => object.Equals(v1, v2),
                            int (IList<string> v) => ((object)v).GetHashCode(),
                            IList<string> (IList<string> v) => v),
                        clrType: typeof(IList<string>),
                        jsonValueReaderWriter: new JsonCollectionOfReferencesReaderWriter<List<string>, string>(
                            JsonStringReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            keyComparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            providerValueComparer: new ValueComparer<string>(
                                bool (string v1, string v2) => v1 == v2,
                                int (string v) => ((object)v).GetHashCode(),
                                string (string v) => v),
                            clrType: typeof(string),
                            jsonValueReaderWriter: JsonStringReaderWriter.Instance));

                    var valueTypeArray = complexType.AddProperty(
                        "ValueTypeArray",
                        typeof(DateTime[]),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeArray", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeArray>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    valueTypeArray.SetGetter(
                        DateTime[] (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(DateTime[]) : PrincipalBaseUnsafeAccessors.ValueTypeArray((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(DateTime[]) : PrincipalBaseUnsafeAccessors.ValueTypeArray((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        DateTime[] (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeArray(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeArray(instance) == null);
                    valueTypeArray.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeArray(level2) = value;
                        });
                    valueTypeArray.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, DateTime[] value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeArray(level2) = value;
                        });
                    valueTypeArray.SetAccessors(
                        DateTime[] (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(DateTime[]) : PrincipalBaseUnsafeAccessors.ValueTypeArray((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        DateTime[] (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(DateTime[]) : PrincipalBaseUnsafeAccessors.ValueTypeArray((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        DateTime[] (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime[]>(valueTypeArray, 31),
                        DateTime[] (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime[]>(valueTypeArray),
                        object (ValueBuffer valueBuffer) => valueBuffer[31]);
                    valueTypeArray.SetPropertyIndexes(
                        index: 31,
                        originalValueIndex: 31,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    valueTypeArray.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<DateTime[], DateTime>(new ValueComparer<DateTime>(
                            bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                            int (DateTime v) => ((object)v).GetHashCode(),
                            DateTime (DateTime v) => v)),
                        keyComparer: new ValueComparer<DateTime[]>(
                            bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                            int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                            DateTime[] (DateTime[] source) => source.ToArray()),
                        providerValueComparer: new ValueComparer<DateTime[]>(
                            bool (DateTime[] v1, DateTime[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals(((object)(v1)), ((object)(v2))),
                            int (DateTime[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode(((object)(v))),
                            DateTime[] (DateTime[] source) => source.ToArray()),
                        clrType: typeof(DateTime[]),
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<DateTime[], DateTime>(
                            JsonDateTimeReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<DateTime>(
                                bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                                int (DateTime v) => ((object)v).GetHashCode(),
                                DateTime (DateTime v) => v),
                            keyComparer: new ValueComparer<DateTime>(
                                bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                                int (DateTime v) => ((object)v).GetHashCode(),
                                DateTime (DateTime v) => v),
                            providerValueComparer: new ValueComparer<DateTime>(
                                bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                                int (DateTime v) => ((object)v).GetHashCode(),
                                DateTime (DateTime v) => v),
                            clrType: typeof(DateTime),
                            jsonValueReaderWriter: JsonDateTimeReaderWriter.Instance));

                    var valueTypeEnumerable = complexType.AddProperty(
                        "ValueTypeEnumerable",
                        typeof(IEnumerable<byte>),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeEnumerable", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeEnumerable>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    valueTypeEnumerable.SetGetter(
                        IEnumerable<byte> (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IEnumerable<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IEnumerable<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        IEnumerable<byte> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(instance) == null);
                    valueTypeEnumerable.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(level2) = value;
                        });
                    valueTypeEnumerable.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IEnumerable<byte> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeEnumerable(level2) = value;
                        });
                    valueTypeEnumerable.SetAccessors(
                        IEnumerable<byte> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IEnumerable<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IEnumerable<byte> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IEnumerable<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeEnumerable((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IEnumerable<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IEnumerable<byte>>(valueTypeEnumerable, 32),
                        IEnumerable<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable),
                        object (ValueBuffer valueBuffer) => valueBuffer[32]);
                    valueTypeEnumerable.SetPropertyIndexes(
                        index: 32,
                        originalValueIndex: 32,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    valueTypeEnumerable.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v)),
                        keyComparer: new ValueComparer<IEnumerable<byte>>(
                            bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                            int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                            IEnumerable<byte> (IEnumerable<byte> v) => v),
                        providerValueComparer: new ValueComparer<IEnumerable<byte>>(
                            bool (IEnumerable<byte> v1, IEnumerable<byte> v2) => object.Equals(v1, v2),
                            int (IEnumerable<byte> v) => ((object)v).GetHashCode(),
                            IEnumerable<byte> (IEnumerable<byte> v) => v),
                        clrType: typeof(IEnumerable<byte>),
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                            JsonByteReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            keyComparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            providerValueComparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            clrType: typeof(byte),
                            jsonValueReaderWriter: JsonByteReaderWriter.Instance));

                    var valueTypeIList = complexType.AddProperty(
                        "ValueTypeIList",
                        typeof(IList<byte>),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeIList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeIList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    valueTypeIList.SetGetter(
                        IList<byte> (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IList<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeIList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(IList<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeIList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        IList<byte> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeIList(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeIList(instance) == null);
                    valueTypeIList.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeIList(level2) = value;
                        });
                    valueTypeIList.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, IList<byte> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeIList(level2) = value;
                        });
                    valueTypeIList.SetAccessors(
                        IList<byte> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IList<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeIList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IList<byte> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(IList<byte>) : PrincipalBaseUnsafeAccessors.ValueTypeIList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        IList<byte> (InternalEntityEntry entry) => entry.ReadOriginalValue<IList<byte>>(valueTypeIList, 33),
                        IList<byte> (InternalEntityEntry entry) => entry.GetCurrentValue<IList<byte>>(valueTypeIList),
                        object (ValueBuffer valueBuffer) => valueBuffer[33]);
                    valueTypeIList.SetPropertyIndexes(
                        index: 33,
                        originalValueIndex: 33,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    valueTypeIList.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<List<byte>, byte>(new ValueComparer<byte>(
                            bool (byte v1, byte v2) => v1 == v2,
                            int (byte v) => ((int)(v)),
                            byte (byte v) => v)),
                        keyComparer: new ValueComparer<IList<byte>>(
                            bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                            int (IList<byte> v) => ((object)v).GetHashCode(),
                            IList<byte> (IList<byte> v) => v),
                        providerValueComparer: new ValueComparer<IList<byte>>(
                            bool (IList<byte> v1, IList<byte> v2) => object.Equals(v1, v2),
                            int (IList<byte> v) => ((object)v).GetHashCode(),
                            IList<byte> (IList<byte> v) => v),
                        clrType: typeof(IList<byte>),
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<byte>, byte>(
                            JsonByteReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            keyComparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            providerValueComparer: new ValueComparer<byte>(
                                bool (byte v1, byte v2) => v1 == v2,
                                int (byte v) => ((int)(v)),
                                byte (byte v) => v),
                            clrType: typeof(byte),
                            jsonValueReaderWriter: JsonByteReaderWriter.Instance));

                    var valueTypeList = complexType.AddProperty(
                        "ValueTypeList",
                        typeof(List<short>),
                        propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("ValueTypeList", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<ValueTypeList>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                        nullable: true);
                    valueTypeList.SetGetter(
                        List<short> (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(List<short>) : PrincipalBaseUnsafeAccessors.ValueTypeList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))),
                        bool (CompiledModelTestBase.PrincipalBase entity) => ((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))) == null ? default(List<short>) : PrincipalBaseUnsafeAccessors.ValueTypeList((PrincipalBaseUnsafeAccessors._ownedField(entity) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(entity))))) == null,
                        List<short> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeList(instance),
                        bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.ValueTypeList(instance) == null);
                    valueTypeList.SetSetter(
                        (CompiledModelTestBase.PrincipalBase entity, List<short> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeList(level2) = value;
                        });
                    valueTypeList.SetMaterializationSetter(
                        (CompiledModelTestBase.PrincipalBase entity, List<short> value) =>
                        {
                            var level1 = PrincipalBaseUnsafeAccessors._ownedField(entity);
                            var level2 = OwnedTypeUnsafeAccessors.Principal(level1);
                            PrincipalBaseUnsafeAccessors.ValueTypeList(level2) = value;
                        });
                    valueTypeList.SetAccessors(
                        List<short> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(List<short>) : PrincipalBaseUnsafeAccessors.ValueTypeList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        List<short> (InternalEntityEntry entry) => ((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))) == null ? default(List<short>) : PrincipalBaseUnsafeAccessors.ValueTypeList((PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))) == null ? default(CompiledModelTestBase.PrincipalBase) : OwnedTypeUnsafeAccessors.Principal(PrincipalBaseUnsafeAccessors._ownedField(((CompiledModelTestBase.PrincipalBase)(entry.Entity))))))),
                        List<short> (InternalEntityEntry entry) => entry.ReadOriginalValue<List<short>>(valueTypeList, 34),
                        List<short> (InternalEntityEntry entry) => entry.GetCurrentValue<List<short>>(valueTypeList),
                        object (ValueBuffer valueBuffer) => valueBuffer[34]);
                    valueTypeList.SetPropertyIndexes(
                        index: 34,
                        originalValueIndex: 34,
                        shadowIndex: -1,
                        relationshipIndex: -1,
                        storeGenerationIndex: -1);
                    valueTypeList.TypeMapping = CosmosTypeMapping.Default.Clone(
                        comparer: new ListOfValueTypesComparer<List<short>, short>(new ValueComparer<short>(
                            bool (short v1, short v2) => v1 == v2,
                            int (short v) => ((int)(v)),
                            short (short v) => v)),
                        keyComparer: new ValueComparer<List<short>>(
                            bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                            int (List<short> v) => ((object)v).GetHashCode(),
                            List<short> (List<short> v) => v),
                        providerValueComparer: new ValueComparer<List<short>>(
                            bool (List<short> v1, List<short> v2) => object.Equals(v1, v2),
                            int (List<short> v) => ((object)v).GetHashCode(),
                            List<short> (List<short> v) => v),
                        clrType: typeof(List<short>),
                        jsonValueReaderWriter: new JsonCollectionOfStructsReaderWriter<List<short>, short>(
                            JsonInt16ReaderWriter.Instance),
                        elementMapping: CosmosTypeMapping.Default.Clone(
                            comparer: new ValueComparer<short>(
                                bool (short v1, short v2) => v1 == v2,
                                int (short v) => ((int)(v)),
                                short (short v) => v),
                            keyComparer: new ValueComparer<short>(
                                bool (short v1, short v2) => v1 == v2,
                                int (short v) => ((int)(v)),
                                short (short v) => v),
                            providerValueComparer: new ValueComparer<short>(
                                bool (short v1, short v2) => v1 == v2,
                                int (short v) => ((int)(v)),
                                short (short v) => v),
                            clrType: typeof(short),
                            jsonValueReaderWriter: JsonInt16ReaderWriter.Instance));

                    return complexProperty;
                }
            }
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PrincipalBaseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var deriveds = principalEntityType.AddNavigation("Deriveds",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<CompiledModelTestBase.PrincipalBase>),
                propertyInfo: typeof(CompiledModelTestBase.PrincipalBase).GetProperty("Deriveds", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CompiledModelTestBase.PrincipalBase).GetField("<Deriveds>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            deriveds.SetGetter(
                ICollection<CompiledModelTestBase.PrincipalBase> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Deriveds(entity),
                bool (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Deriveds(entity) == null,
                ICollection<CompiledModelTestBase.PrincipalBase> (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Deriveds(instance),
                bool (CompiledModelTestBase.PrincipalBase instance) => PrincipalBaseUnsafeAccessors.Deriveds(instance) == null);
            deriveds.SetSetter(
                (CompiledModelTestBase.PrincipalBase entity, ICollection<CompiledModelTestBase.PrincipalBase> value) => PrincipalBaseUnsafeAccessors.Deriveds(entity) = value);
            deriveds.SetMaterializationSetter(
                (CompiledModelTestBase.PrincipalBase entity, ICollection<CompiledModelTestBase.PrincipalBase> value) => PrincipalBaseUnsafeAccessors.Deriveds(entity) = value);
            deriveds.SetAccessors(
                ICollection<CompiledModelTestBase.PrincipalBase> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Deriveds(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                ICollection<CompiledModelTestBase.PrincipalBase> (InternalEntityEntry entry) => PrincipalBaseUnsafeAccessors.Deriveds(((CompiledModelTestBase.PrincipalBase)(entry.Entity))),
                null,
                ICollection<CompiledModelTestBase.PrincipalBase> (InternalEntityEntry entry) => entry.GetCurrentValue<ICollection<CompiledModelTestBase.PrincipalBase>>(deriveds),
                null);
            deriveds.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 2,
                storeGenerationIndex: -1);
            deriveds.SetCollectionAccessor<CompiledModelTestBase.PrincipalBase, ICollection<CompiledModelTestBase.PrincipalBase>, CompiledModelTestBase.PrincipalBase>(
                ICollection<CompiledModelTestBase.PrincipalBase> (CompiledModelTestBase.PrincipalBase entity) => PrincipalBaseUnsafeAccessors.Deriveds(entity),
                (CompiledModelTestBase.PrincipalBase entity, ICollection<CompiledModelTestBase.PrincipalBase> collection) => PrincipalBaseUnsafeAccessors.Deriveds(entity) = ((ICollection<CompiledModelTestBase.PrincipalBase>)(collection)),
                (CompiledModelTestBase.PrincipalBase entity, ICollection<CompiledModelTestBase.PrincipalBase> collection) => PrincipalBaseUnsafeAccessors.Deriveds(entity) = ((ICollection<CompiledModelTestBase.PrincipalBase>)(collection)),
                ICollection<CompiledModelTestBase.PrincipalBase> (CompiledModelTestBase.PrincipalBase entity, Action<CompiledModelTestBase.PrincipalBase, ICollection<CompiledModelTestBase.PrincipalBase>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<CompiledModelTestBase.PrincipalBase, ICollection<CompiledModelTestBase.PrincipalBase>, CompiledModelTestBase.PrincipalBase>(entity, setter),
                ICollection<CompiledModelTestBase.PrincipalBase> () => ((ICollection<CompiledModelTestBase.PrincipalBase>)(((ICollection<CompiledModelTestBase.PrincipalBase>)(new HashSet<CompiledModelTestBase.PrincipalBase>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id")!;
            var discriminator = runtimeEntityType.FindProperty("Discriminator")!;
            var enum1 = runtimeEntityType.FindProperty("Enum1")!;
            var enum2 = runtimeEntityType.FindProperty("Enum2")!;
            var flagsEnum1 = runtimeEntityType.FindProperty("FlagsEnum1")!;
            var flagsEnum2 = runtimeEntityType.FindProperty("FlagsEnum2")!;
            var principalBaseId = runtimeEntityType.FindProperty("PrincipalBaseId")!;
            var refTypeEnumerable = runtimeEntityType.FindProperty("RefTypeEnumerable")!;
            var refTypeIList = runtimeEntityType.FindProperty("RefTypeIList")!;
            var valueTypeArray = runtimeEntityType.FindProperty("ValueTypeArray")!;
            var valueTypeEnumerable = runtimeEntityType.FindProperty("ValueTypeEnumerable")!;
            var valueTypeIList = runtimeEntityType.FindProperty("ValueTypeIList")!;
            var valueTypeList = runtimeEntityType.FindProperty("ValueTypeList")!;
            var __id = runtimeEntityType.FindProperty("__id")!;
            var __jObject = runtimeEntityType.FindProperty("__jObject")!;
            var owned = runtimeEntityType.FindComplexProperty("Owned")!;
            var ownedType = owned.ComplexType;
            var details = ownedType.FindProperty("Details")!;
            var number = ownedType.FindProperty("Number")!;
            var refTypeEnumerable0 = ownedType.FindProperty("RefTypeEnumerable")!;
            var refTypeIList0 = ownedType.FindProperty("RefTypeIList")!;
            var valueTypeArray0 = ownedType.FindProperty("ValueTypeArray")!;
            var valueTypeEnumerable0 = ownedType.FindProperty("ValueTypeEnumerable")!;
            var valueTypeIList0 = ownedType.FindProperty("ValueTypeIList")!;
            var valueTypeList0 = ownedType.FindProperty("ValueTypeList")!;
            var principal = ownedType.FindComplexProperty("Principal")!;
            var principalBase = principal.ComplexType;
            var alternateId = principalBase.FindProperty("AlternateId")!;
            var enum10 = principalBase.FindProperty("Enum1")!;
            var enum20 = principalBase.FindProperty("Enum2")!;
            var flagsEnum10 = principalBase.FindProperty("FlagsEnum1")!;
            var flagsEnum20 = principalBase.FindProperty("FlagsEnum2")!;
            var id0 = principalBase.FindProperty("Id")!;
            var refTypeEnumerable1 = principalBase.FindProperty("RefTypeEnumerable")!;
            var refTypeIList1 = principalBase.FindProperty("RefTypeIList")!;
            var valueTypeArray1 = principalBase.FindProperty("ValueTypeArray")!;
            var valueTypeEnumerable1 = principalBase.FindProperty("ValueTypeEnumerable")!;
            var valueTypeIList1 = principalBase.FindProperty("ValueTypeIList")!;
            var valueTypeList1 = principalBase.FindProperty("ValueTypeList")!;
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<long?, long>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<long?>(key));
            var deriveds = runtimeEntityType.FindNavigation("Deriveds")!;
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((CompiledModelTestBase.PrincipalBase)(source.Entity));
                    var liftedArg = ((ISnapshot)(new Snapshot<long?, string, CompiledModelTestBase.AnEnum, CompiledModelTestBase.AnEnum?, CompiledModelTestBase.AFlagsEnum, CompiledModelTestBase.AFlagsEnum, long?, IEnumerable<string>, IList<string>, DateTime[], IEnumerable<byte>, IList<byte>, List<short>, string, JObject, string, int, IEnumerable<string>, IList<string>, DateTime[], IEnumerable<byte>, IList<byte>, List<short>, Guid, CompiledModelTestBase.AnEnum, CompiledModelTestBase.AnEnum?, CompiledModelTestBase.AFlagsEnum, CompiledModelTestBase.AFlagsEnum, long?, IEnumerable<string>>((source.GetCurrentValue<long?>(id) == null ? null : ((ValueComparer<long?>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<long?>(id))), (source.GetCurrentValue<string>(discriminator) == null ? null : ((ValueComparer<string>)(((IProperty)discriminator).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(discriminator))), ((ValueComparer<CompiledModelTestBase.AnEnum>)(((IProperty)enum1).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AnEnum>(enum1)), (source.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum2) == null ? null : ((ValueComparer<CompiledModelTestBase.AnEnum?>)(((IProperty)enum2).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum2))), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)(((IProperty)flagsEnum1).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum1)), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)(((IProperty)flagsEnum2).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum2)), (source.GetCurrentValue<long?>(principalBaseId) == null ? null : ((ValueComparer<long?>)(((IProperty)principalBaseId).GetValueComparer())).Snapshot(source.GetCurrentValue<long?>(principalBaseId))), (((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable))) == null ? null : ((IEnumerable<string>)(((ValueComparer<object>)(((IProperty)refTypeEnumerable).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable))))))), (((object)(source.GetCurrentValue<IList<string>>(refTypeIList))) == null ? null : ((IList<string>)(((ValueComparer<object>)(((IProperty)refTypeIList).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IList<string>>(refTypeIList))))))), (((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray))) == null ? null : ((DateTime[])(((ValueComparer<IEnumerable<DateTime>>)(((IProperty)valueTypeArray).GetValueComparer())).Snapshot(((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray))))))), (source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable) == null ? null : ((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeEnumerable).GetValueComparer())).Snapshot(source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable))), (((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList))) == null ? null : ((IList<byte>)(((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeIList).GetValueComparer())).Snapshot(((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList))))))), (((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList))) == null ? null : ((List<short>)(((ValueComparer<IEnumerable<short>>)(((IProperty)valueTypeList).GetValueComparer())).Snapshot(((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList))))))), (source.GetCurrentValue<string>(__id) == null ? null : ((ValueComparer<string>)(((IProperty)__id).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(__id))), (source.GetCurrentValue<JObject>(__jObject) == null ? null : ((ValueComparer<JObject>)(((IProperty)__jObject).GetValueComparer())).Snapshot(source.GetCurrentValue<JObject>(__jObject))), (source.GetCurrentValue<string>(details) == null ? null : ((ValueComparer<string>)(((IProperty)details).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(details))), ((ValueComparer<int>)(((IProperty)number).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(number)), (((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable0))) == null ? null : ((IEnumerable<string>)(((ValueComparer<object>)(((IProperty)refTypeEnumerable0).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable0))))))), (((object)(source.GetCurrentValue<IList<string>>(refTypeIList0))) == null ? null : ((IList<string>)(((ValueComparer<object>)(((IProperty)refTypeIList0).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IList<string>>(refTypeIList0))))))), (((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray0))) == null ? null : ((DateTime[])(((ValueComparer<IEnumerable<DateTime>>)(((IProperty)valueTypeArray0).GetValueComparer())).Snapshot(((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray0))))))), (source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable0) == null ? null : ((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeEnumerable0).GetValueComparer())).Snapshot(source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable0))), (((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList0))) == null ? null : ((IList<byte>)(((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeIList0).GetValueComparer())).Snapshot(((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList0))))))), (((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList0))) == null ? null : ((List<short>)(((ValueComparer<IEnumerable<short>>)(((IProperty)valueTypeList0).GetValueComparer())).Snapshot(((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList0))))))), ((ValueComparer<Guid>)(((IProperty)alternateId).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(alternateId)), ((ValueComparer<CompiledModelTestBase.AnEnum>)(((IProperty)enum10).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AnEnum>(enum10)), (source.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum20) == null ? null : ((ValueComparer<CompiledModelTestBase.AnEnum?>)(((IProperty)enum20).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AnEnum?>(enum20))), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)(((IProperty)flagsEnum10).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum10)), ((ValueComparer<CompiledModelTestBase.AFlagsEnum>)(((IProperty)flagsEnum20).GetValueComparer())).Snapshot(source.GetCurrentValue<CompiledModelTestBase.AFlagsEnum>(flagsEnum20)), (source.GetCurrentValue<long?>(id0) == null ? null : ((ValueComparer<long?>)(((IProperty)id0).GetValueComparer())).Snapshot(source.GetCurrentValue<long?>(id0))), (((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable1))) == null ? null : ((IEnumerable<string>)(((ValueComparer<object>)(((IProperty)refTypeEnumerable1).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IEnumerable<string>>(refTypeEnumerable1))))))))));
                    var entity0 = ((CompiledModelTestBase.PrincipalBase)(source.Entity));
                    return ((ISnapshot)(new MultiSnapshot(new ISnapshot[] { liftedArg, ((ISnapshot)(new Snapshot<IList<string>, DateTime[], IEnumerable<byte>, IList<byte>, List<short>>((((object)(source.GetCurrentValue<IList<string>>(refTypeIList1))) == null ? null : ((IList<string>)(((ValueComparer<object>)(((IProperty)refTypeIList1).GetValueComparer())).Snapshot(((object)(source.GetCurrentValue<IList<string>>(refTypeIList1))))))), (((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray1))) == null ? null : ((DateTime[])(((ValueComparer<IEnumerable<DateTime>>)(((IProperty)valueTypeArray1).GetValueComparer())).Snapshot(((IEnumerable<DateTime>)(source.GetCurrentValue<DateTime[]>(valueTypeArray1))))))), (source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable1) == null ? null : ((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeEnumerable1).GetValueComparer())).Snapshot(source.GetCurrentValue<IEnumerable<byte>>(valueTypeEnumerable1))), (((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList1))) == null ? null : ((IList<byte>)(((ValueComparer<IEnumerable<byte>>)(((IProperty)valueTypeIList1).GetValueComparer())).Snapshot(((IEnumerable<byte>)(source.GetCurrentValue<IList<byte>>(valueTypeIList1))))))), (((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList1))) == null ? null : ((List<short>)(((ValueComparer<IEnumerable<short>>)(((IProperty)valueTypeList1).GetValueComparer())).Snapshot(((IEnumerable<short>)(source.GetCurrentValue<List<short>>(valueTypeList1)))))))))) })));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<long?>((default(long? ) == null ? null : ((ValueComparer<long?>)(((IProperty)principalBaseId).GetValueComparer())).Snapshot(default(long? )))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<long?>(default(long? )))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<string, long?, string, JObject>((source.ContainsKey("Discriminator") ? ((string)(source["Discriminator"])) : null), (source.ContainsKey("PrincipalBaseId") ? ((long? )(source["PrincipalBaseId"])) : null), (source.ContainsKey("__id") ? ((string)(source["__id"])) : null), (source.ContainsKey("__jObject") ? ((JObject)(source["__jObject"])) : null)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<string, long?, string, JObject>(default(string), default(long? ), default(string), default(JObject)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity1 = ((CompiledModelTestBase.PrincipalBase)(source.Entity));
                    return ((ISnapshot)(new Snapshot<long?, long?, object>((source.GetCurrentValue<long?>(id) == null ? null : ((ValueComparer<long?>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<long?>(id))), (source.GetCurrentValue<long?>(principalBaseId) == null ? null : ((ValueComparer<long?>)(((IProperty)principalBaseId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<long?>(principalBaseId))), SnapshotFactoryFactory.SnapshotCollection(PrincipalBaseUnsafeAccessors.Deriveds(entity1)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 35,
                navigationCount: 1,
                complexPropertyCount: 2,
                originalValueCount: 35,
                shadowCount: 4,
                relationshipCount: 3,
                storeGeneratedCount: 1);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
