<#@ template hostspecific="true" #>
<#@ assembly name="Microsoft.VisualStudio.Interop" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#
    var model = LoadResources();
#>
// <auto-generated />

using System.Resources;

#nullable enable

namespace <#= model.Namespace #>
{
    internal static class <#= model.Class #>
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("<#= model.ResourceName #>", typeof(<#= model.Class #>).Assembly);
<#
    foreach (var resource in model.Resources)
    {
#>

        /// <summary>
<#
        foreach (var line in Lines(resource.Value))
        {
#>
        /// <#= Xml(line) #>
<#
        }
#>
        /// </summary>
<#
        if (resource.Parameters.Any())
        {
#>
        public static string <#= resource.Name #>(<#= List("object ", resource.Parameters) #>)
            => string.Format(
                GetString("<#= resource.Name #>", <#= List("nameof(", resource.Parameters, ")") #>),
                <#= List(resource.Parameters) #>);
<#
        }
        else
        {
#>
        public static string <#= resource.Name #>
            => GetString("<#= resource.Name #>");
<#
        }
    }
#>

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name)!;
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}
<#+
    ResourceFile LoadResources()
    {
        var result = new ResourceFile();

        var services = (IServiceProvider)Host;
        var dte = (DTE)services.GetService(typeof(DTE));

        var resourceFile = (string)Session["ResourceFile"];
        if (!Path.IsPathRooted(resourceFile))
        {
            resourceFile = Host.ResolvePath(resourceFile);
        }

        var resourceProjectItem = dte.Solution.FindProjectItem(resourceFile);
        var templateProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
        var project = templateProjectItem.ContainingProject;
        var rootNamespace = (string)project.Properties.Item("RootNamespace").Value;
        var resourceDir = Path.GetDirectoryName(resourceFile);
        var projectDir = (string)project.Properties.Item("FullPath").Value;
        var resourceNamespace = rootNamespace + "." + resourceDir.Substring(projectDir.Length)
            .Replace(Path.DirectorySeparatorChar, '.');

        result.Namespace = (string)resourceProjectItem.Properties.Item("CustomToolNamespace")?.Value;
        if (string.IsNullOrEmpty(result.Namespace))
        {
            result.Namespace = resourceNamespace;
        }

        result.Class = Path.GetFileNameWithoutExtension(resourceFile);

        result.ResourceName = resourceNamespace + "." + result.Class;

        using (var reader = new ResXResourceReader(resourceFile))
        {
            result.Resources = Enumerable.ToList(
                from DictionaryEntry r in reader
                let value = (string)r.Value
                select new Resource
                {
                    Name = (string)r.Key,
                    Value = value,
                    Parameters = Regex.Matches(value, @"\{(\w+)\}").Cast<Match>().Select(m => m.Groups[1].Value)
                        .Distinct().ToList()
                });
        }

        return result;
    }

    IEnumerable<string> Lines(string value)
        => value.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

    string Xml(string value)
        => value.Replace("<", "&lt;").Replace(">", "&gt;");

    string List(IEnumerable<string> items)
        => List(null, items);

    string List(string prefix, IEnumerable<string> items, string suffix = null)
        => string.Join(", ", items.Select(i => prefix + i + suffix));

    class ResourceFile
    {
        public string Namespace { get; set; }
        public string Class { get; set; }
        public string ResourceName { get; set; }
        public IEnumerable<Resource> Resources { get; set; }
    }

    class Resource
    {
        public string Name { get; set; }
        public string Value { get; set; }
        public IEnumerable<string> Parameters { get; set; }
    }
#>