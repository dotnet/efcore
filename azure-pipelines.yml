variables:
  - name: _BuildConfig
    value: Release
  - name: _TeamName
    value: AspNetCore
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: ENTITYFRAMEWORKCORE
  - name: _CosmosConnectionUrl
    value: https://localhost:8081
  - name: _CosmosToken
    value: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
  - ${{ if ne(variables['System.TeamProject'], 'public') }}:
    - group: DotNet-MSRC-Storage
    - name: _InternalRuntimeDownloadArgs
      value: /p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet
             /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64)
  - ${{ if eq(variables['System.TeamProject'], 'public') }}:
    - name: _InternalRuntimeDownloadArgs
      value: ''

trigger:
  - master
  - release/*
  - feature/*
  - internal/release/3.*

pr: ['*']

stages:
- stage: build
  displayName: Build
  jobs:
    - template: eng/common/templates/jobs/jobs.yml
      parameters:
        enableMicrobuild: true
        enablePublishBuildArtifacts: true
        enablePublishBuildAssets: true
        enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
        enablePublishTestResults: true
        enableTelemetry: true
        helixRepo: aspnet/EntityFrameworkCore
        jobs:
          - job: Windows
            pool:
              ${{ if eq(variables['System.TeamProject'], 'public') }}:
                name: NetCore1ESPool-Svc-Public
                demands: ImageOverride -equals Build.Server.Amd64.VS2017.Open
              ${{ if ne(variables['System.TeamProject'], 'public') }}:
                name: NetCore1ESPool-Svc-Internal
                demands: ImageOverride -equals Build.Server.Amd64.VS2017
            variables:
              - _InternalBuildArgs: ''
              - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                - group: DotNet-Blob-Feed
                - _SignType: real
                - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/aspnet-entityframeworkcore/index.json
                - _DotNetPublishToBlobFeed: true
                - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl) /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed) /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines) /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory) /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
            steps:
              - task: NuGetCommand@2
                displayName: 'Clear NuGet caches'
                condition: succeeded()
                inputs:
                  command: custom
                  arguments: 'locals all -clear'
              - script: "echo ##vso[build.addbuildtag]daily-build"
                condition: and(notin(variables['Build.Reason'], 'PullRequest'), ne(variables['IsFinalBuild'], 'true'))
                displayName: 'Set CI tags'
              - script: "echo ##vso[build.addbuildtag]release-candidate"
                condition: and(notin(variables['Build.Reason'], 'PullRequest'), eq(variables['IsFinalBuild'], 'true'))
                displayName: 'Set CI tags'
              - ${{ if ne(variables['System.TeamProject'], 'public') }}:
                - task: PowerShell@2
                  displayName: Setup Private Feeds Credentials
                  inputs:
                    filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
                    arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
                  env:
                    Token: $(dn-bot-dnceng-artifact-feeds-rw)
              - script: eng\common\cibuild.cmd -configuration $(_BuildConfig) -prepareMachine $(_InternalBuildArgs) $(_InternalRuntimeDownloadArgs)
                env:
                  Test__Cosmos__DefaultConnection: $(_CosmosConnectionUrl)
                name: Build
              - task: PublishBuildArtifacts@1
                displayName: Upload TestResults
                condition: always()
                continueOnError: true
                inputs:
                  pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
                  artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
                  artifactType: Container
                  parallel: true
              - task: PublishBuildArtifacts@1
                displayName: Upload artifacts
                condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
                inputs:
                  pathtoPublish: 'artifacts/packages/'
                  artifactName: packages
                  artifactType: Container
                  parallel: true

          - job: macOS
            pool:
              vmImage: macOS-10.14
            steps:
              - ${{ if ne(variables['System.TeamProject'], 'public') }}:
                - task: Bash@3
                  displayName: Setup Private Feeds Credentials
                  inputs:
                    filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
                    arguments: $(Build.SourcesDirectory)/NuGet.config $Token
                  env:
                    Token: $(dn-bot-dnceng-artifact-feeds-rw)
              - script: eng/common/cibuild.sh --configuration $(_BuildConfig) --binaryLog --prepareMachine $(_InternalRuntimeDownloadArgs)
                env:
                  Test__Cosmos__DefaultConnection: $(_CosmosConnectionUrl)
                name: Build
              - task: PublishBuildArtifacts@1
                displayName: Upload TestResults
                condition: always()
                continueOnError: true
                inputs:
                  pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
                  artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
                  artifactType: Container
                  parallel: true

          - job: Linux
            timeoutInMinutes: 120
            pool:
              vmImage: ubuntu-18.04
            variables:
              - LC_ALL: 'en_US.UTF-8'
              - LANG: 'en_US.UTF-8'
              - LANGUAGE: 'en_US.UTF-8'
              - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(variables['system.pullrequest.isfork'], false), notin(variables['Build.Reason'], 'PullRequest', 'Schedule', 'BuildCompletion')) }}:
                - _CosmosConnectionUrl: 'true'
            steps:
              - bash: sudo apt-get install -y libsqlite3-mod-spatialite
                displayName: Install SpatiaLite
                continueOnError: true
              - bash: |
                    echo "##vso[task.setvariable variable=_CosmosConnectionUrl]https://ef-nightly-test.documents.azure.com:443/"
                    echo "##vso[task.setvariable variable=_CosmosToken]$(ef-nightly-cosmos-key)"
                displayName: Prepare to run Cosmos tests on ef-nightly-test
                condition: and(eq(variables['_CosmosConnectionUrl'], 'true'), or(endsWith(variables['Build.BuildId'], '0'), endsWith(variables['Build.BuildId'], '2'), endsWith(variables['Build.BuildId'], '4'), endsWith(variables['Build.BuildId'], '6'), endsWith(variables['Build.BuildId'], '8')))
              - bash: |
                    echo "##vso[task.setvariable variable=_CosmosConnectionUrl]https://ef-pr-test.documents.azure.com:443/"
                    echo "##vso[task.setvariable variable=_CosmosToken]$(ef-pr-cosmos-test)"
                displayName: Prepare to run Cosmos tests on ef-pr-test
                condition: and(eq(variables['_CosmosConnectionUrl'], 'true'), or(endsWith(variables['Build.BuildId'], '1'), endsWith(variables['Build.BuildId'], '3'), endsWith(variables['Build.BuildId'], '5'), endsWith(variables['Build.BuildId'], '7'), endsWith(variables['Build.BuildId'], '9')))
              - ${{ if ne(variables['System.TeamProject'], 'public') }}:
                - task: Bash@3
                  displayName: Setup Private Feeds Credentials
                  inputs:
                    filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
                    arguments: $(Build.SourcesDirectory)/NuGet.config $Token
                  env:
                    Token: $(dn-bot-dnceng-artifact-feeds-rw)
              - script: eng/common/cibuild.sh --configuration $(_BuildConfig) --prepareMachine $(_InternalRuntimeDownloadArgs)
                env:
                  Test__Cosmos__DefaultConnection: $(_CosmosConnectionUrl)
                  Test__Cosmos__AuthToken: $(_CosmosToken)
                name: Build
              - task: PublishBuildArtifacts@1
                displayName: Upload TestResults
                condition: always()
                continueOnError: true
                inputs:
                  pathtoPublish: artifacts/TestResults/$(_BuildConfig)/
                  artifactName: $(Agent.Os)_$(Agent.JobName) TestResults
                  artifactType: Container
                  parallel: true

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      # Symbol validation isn't being very reliable lately. This should be enabled back
      # once this issue is resolved: https://github.com/dotnet/arcade/issues/2871
      enableSymbolValidation: false
